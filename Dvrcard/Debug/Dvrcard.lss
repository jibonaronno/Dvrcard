
Dvrcard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00002fb6  0000304a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000476  00800138  00800138  00003122  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003122  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000031c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cc1  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ea  00000000  00000000  00009319  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003585  00000000  00000000  0000aa03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd8  00000000  00000000  0000df88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011fb  00000000  00000000  0000eb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003afe  00000000  00000000  0000fd5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  00013859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_5>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__vector_13>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_15>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_16>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	64 61       	ori	r22, 0x14	; 20
      56:	74 61       	ori	r23, 0x14	; 20
      58:	20 73       	andi	r18, 0x30	; 48
      5a:	65 74       	andi	r22, 0x45	; 69
      5c:	20 66       	ori	r18, 0x60	; 96
      5e:	6f 72       	andi	r22, 0x2F	; 47
      60:	20 77       	andi	r18, 0x70	; 112
      62:	72 69       	ori	r23, 0x92	; 146
      64:	74 74       	andi	r23, 0x44	; 68
      66:	69 6e       	ori	r22, 0xE9	; 233
      68:	67 20       	and	r6, r7
      6a:	74 6f       	ori	r23, 0xF4	; 244
      6c:	20 74       	andi	r18, 0x40	; 64
      6e:	68 65       	ori	r22, 0x58	; 88
      70:	20 73       	andi	r18, 0x30	; 48
      72:	64 20       	and	r6, r4
      74:	63 61       	ori	r22, 0x13	; 19
      76:	72 64       	ori	r23, 0x42	; 66
      78:	20 73       	andi	r18, 0x30	; 48
      7a:	69 6e       	ori	r22, 0xE9	; 233
      7c:	67 6c       	ori	r22, 0xC7	; 199
      7e:	65 20       	and	r6, r5
      80:	73 65       	ori	r23, 0x53	; 83
      82:	63 74       	andi	r22, 0x43	; 67
      84:	6f 72       	andi	r22, 0x2F	; 47
	...

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf e5       	ldi	r28, 0x5F	; 95
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	11 e0       	ldi	r17, 0x01	; 1
      96:	a0 e6       	ldi	r26, 0x60	; 96
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	e6 eb       	ldi	r30, 0xB6	; 182
      9c:	ff e2       	ldi	r31, 0x2F	; 47
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a8 33       	cpi	r26, 0x38	; 56
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	25 e0       	ldi	r18, 0x05	; 5
      ac:	a8 e3       	ldi	r26, 0x38	; 56
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	ae 3a       	cpi	r26, 0xAE	; 174
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	0e 94 c4 0c 	call	0x1988	; 0x1988 <main>
      be:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <SetupAdc>:
	sbi(ADCSRA, ADSC);
}

void StopAdc()
{
	cbi(ADCSRA, ADSC);
      c6:	85 36       	cpi	r24, 0x65	; 101
      c8:	41 f4       	brne	.+16     	; 0xda <SetupAdc+0x14>
      ca:	81 e4       	ldi	r24, 0x41	; 65
      cc:	87 b9       	out	0x07, r24	; 7
      ce:	8e e8       	ldi	r24, 0x8E	; 142
      d0:	86 b9       	out	0x06, r24	; 6
      d2:	80 b7       	in	r24, 0x30	; 48
      d4:	8f 70       	andi	r24, 0x0F	; 15
      d6:	80 bf       	out	0x30, r24	; 48
      d8:	33 9a       	sbi	0x06, 3	; 6
      da:	08 95       	ret

000000dc <StartAdc>:
      dc:	36 9a       	sbi	0x06, 6	; 6
      de:	08 95       	ret

000000e0 <__vector_16>:
}

ISR(ADC_vect)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	2f 93       	push	r18
      ec:	3f 93       	push	r19
      ee:	4f 93       	push	r20
      f0:	5f 93       	push	r21
      f2:	6f 93       	push	r22
      f4:	7f 93       	push	r23
      f6:	8f 93       	push	r24
      f8:	9f 93       	push	r25
      fa:	af 93       	push	r26
      fc:	bf 93       	push	r27
      fe:	ef 93       	push	r30
     100:	ff 93       	push	r31
	
	ad_l = ADCL;
     102:	84 b1       	in	r24, 0x04	; 4
     104:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <ad_l>
	ad_h = ADCH;
     108:	25 b1       	in	r18, 0x05	; 5
     10a:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <ad_h>
	ad = 0;
//	ad = ad_l;
	ad |= (((unsigned short)ad_h)<<8);
	ad |= ((unsigned short)ad_l);
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	92 2b       	or	r25, r18
     112:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <ad+0x1>
     116:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ad>
//	AdcInt = 1;
	
	if(adsumcount > 1)
     11a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <adsumcount>
     11e:	22 30       	cpi	r18, 0x02	; 2
     120:	50 f1       	brcs	.+84     	; 0x176 <__vector_16+0x96>
	{
		//adc_main = adsum_x/40;
		// WE ARE TAKING 2ND SAMPLE FROM ADC.
		adc_main = ad;
     122:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <adc_main+0x1>
     126:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <adc_main>
		adsum_x = 0;
     12a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
     12e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__data_end+0x1>
     132:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end+0x2>
     136:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x3>
		adsumcount = 0;
     13a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <adsumcount>
		AdcInt = 1;
     13e:	21 e0       	ldi	r18, 0x01	; 1
     140:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <AdcInt>
		
		if ((ADMUX & 0b00011111) == CHANNEL_1)
     144:	27 b1       	in	r18, 0x07	; 7
     146:	2f 71       	andi	r18, 0x1F	; 31
     148:	21 30       	cpi	r18, 0x01	; 1
     14a:	41 f4       	brne	.+16     	; 0x15c <__vector_16+0x7c>
		{
			adc_channel1 = adc_main;
     14c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <adc_channel1+0x1>
     150:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <adc_channel1>
			ADMUX = ((ADMUX & 0b11100000) | CHANNEL_2); 
     154:	87 b1       	in	r24, 0x07	; 7
     156:	80 7e       	andi	r24, 0xE0	; 224
     158:	82 60       	ori	r24, 0x02	; 2
     15a:	0b c0       	rjmp	.+22     	; 0x172 <__vector_16+0x92>
		}
		else if ((ADMUX & 0b00011111) == CHANNEL_2)
     15c:	27 b1       	in	r18, 0x07	; 7
     15e:	2f 71       	andi	r18, 0x1F	; 31
     160:	22 30       	cpi	r18, 0x02	; 2
     162:	61 f4       	brne	.+24     	; 0x17c <__vector_16+0x9c>
		{
			adc_channel2 = adc_main;
     164:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <adc_channel2+0x1>
     168:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <adc_channel2>
			ADMUX = ((ADMUX & 0b11100000) | CHANNEL_1);
     16c:	87 b1       	in	r24, 0x07	; 7
     16e:	80 7e       	andi	r24, 0xE0	; 224
     170:	81 60       	ori	r24, 0x01	; 1
     172:	87 b9       	out	0x07, r24	; 7
     174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_16+0x9c>
		}
	}
	else
	{
		//adsum_x += ad;
		adsumcount++;
     176:	2f 5f       	subi	r18, 0xFF	; 255
     178:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <adsumcount>
	}
	StartAdc();
     17c:	0e 94 6e 00 	call	0xdc	; 0xdc <StartAdc>
}
     180:	ff 91       	pop	r31
     182:	ef 91       	pop	r30
     184:	bf 91       	pop	r27
     186:	af 91       	pop	r26
     188:	9f 91       	pop	r25
     18a:	8f 91       	pop	r24
     18c:	7f 91       	pop	r23
     18e:	6f 91       	pop	r22
     190:	5f 91       	pop	r21
     192:	4f 91       	pop	r20
     194:	3f 91       	pop	r19
     196:	2f 91       	pop	r18
     198:	0f 90       	pop	r0
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	0f 90       	pop	r0
     19e:	1f 90       	pop	r1
     1a0:	18 95       	reti

000001a2 <GetPressedButtonId>:
		ButtonIdReadFlag = 1;
		return PressedButtonId;
	}
	
	return 0;
}
     1a2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PressedButtonId>
     1a6:	88 23       	and	r24, r24
     1a8:	29 f0       	breq	.+10     	; 0x1b4 <GetPressedButtonId+0x12>
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ButtonIdReadFlag>
     1b0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PressedButtonId>
     1b4:	08 95       	ret

000001b6 <ButtonMatrixPrimaryCycle>:

void ButtonMatrixPrimaryCycle()
{
	if(ActiveColumn == BTNMATRIX_COLUMN1)
     1b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ActiveColumn>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <ButtonMatrixPrimaryCycle+0xa>
     1be:	c6 c0       	rjmp	.+396    	; 0x34c <ButtonMatrixPrimaryCycle+0x196>
	{
		CHECKPIN1
     1c0:	cc 99       	sbic	0x19, 4	; 25
     1c2:	34 c0       	rjmp	.+104    	; 0x22c <ButtonMatrixPrimaryCycle+0x76>
		{
			click = 1;
     1c4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 1)
     1c8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Button>
     1cc:	91 30       	cpi	r25, 0x01	; 1
     1ce:	51 f0       	breq	.+20     	; 0x1e4 <ButtonMatrixPrimaryCycle+0x2e>
			{
				BtnPressCount = 0;
     1d0:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     1d4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     1d8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     1dc:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 1;
     1e0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     1e4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     1e8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     1f2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     1f6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     1fa:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     1fe:	28 17       	cp	r18, r24
     200:	39 07       	cpc	r19, r25
     202:	50 f4       	brcc	.+20     	; 0x218 <ButtonMatrixPrimaryCycle+0x62>
			{
				PressedButtonId = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <PressedButtonId>
				BtnPressCount = LONGPRESS_COUNT + 2;
     20a:	2e 5f       	subi	r18, 0xFE	; 254
     20c:	3f 4f       	sbci	r19, 0xFF	; 255
     20e:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <BtnPressCount+0x1>
     212:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <BtnPressCount>
     216:	ee c1       	rjmp	.+988    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     218:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     21c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     220:	28 17       	cp	r18, r24
     222:	39 07       	cpc	r19, r25
     224:	08 f0       	brcs	.+2      	; 0x228 <ButtonMatrixPrimaryCycle+0x72>
     226:	e5 c2       	rjmp	.+1482   	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 1;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	e1 c2       	rjmp	.+1474   	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN2
     22c:	cd 99       	sbic	0x19, 5	; 25
     22e:	2d c0       	rjmp	.+90     	; 0x28a <ButtonMatrixPrimaryCycle+0xd4>
		{
			click = 1;
     230:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 2)
     234:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	59 f0       	breq	.+22     	; 0x252 <ButtonMatrixPrimaryCycle+0x9c>
			{
				BtnPressCount = 0;
     23c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     240:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     244:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     248:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 2;
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     252:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     256:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     260:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     264:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     268:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     26c:	28 17       	cp	r18, r24
     26e:	39 07       	cpc	r19, r25
     270:	10 f4       	brcc	.+4      	; 0x276 <ButtonMatrixPrimaryCycle+0xc0>
			{
				PressedButtonId = 2;
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	b6 c1       	rjmp	.+876    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     276:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     27a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     27e:	28 17       	cp	r18, r24
     280:	39 07       	cpc	r19, r25
     282:	08 f0       	brcs	.+2      	; 0x286 <ButtonMatrixPrimaryCycle+0xd0>
     284:	b6 c2       	rjmp	.+1388   	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 2;
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	b2 c2       	rjmp	.+1380   	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN3
     28a:	ce 99       	sbic	0x19, 6	; 25
     28c:	2d c0       	rjmp	.+90     	; 0x2e8 <ButtonMatrixPrimaryCycle+0x132>
		{
			click = 1;
     28e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 3)
     292:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	59 f0       	breq	.+22     	; 0x2b0 <ButtonMatrixPrimaryCycle+0xfa>
			{
				BtnPressCount = 0;
     29a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     29e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     2a2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     2a6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 3;
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     2b0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     2b4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     2be:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     2c2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     2c6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     2ca:	28 17       	cp	r18, r24
     2cc:	39 07       	cpc	r19, r25
     2ce:	10 f4       	brcc	.+4      	; 0x2d4 <ButtonMatrixPrimaryCycle+0x11e>
			{
				PressedButtonId = 3;
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	87 c1       	rjmp	.+782    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     2d4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     2d8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     2dc:	28 17       	cp	r18, r24
     2de:	39 07       	cpc	r19, r25
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <ButtonMatrixPrimaryCycle+0x12e>
     2e2:	87 c2       	rjmp	.+1294   	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 3;
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	83 c2       	rjmp	.+1286   	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN4
     2e8:	cf 99       	sbic	0x19, 7	; 25
     2ea:	2d c0       	rjmp	.+90     	; 0x346 <ButtonMatrixPrimaryCycle+0x190>
		{
			click = 1;
     2ec:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 4)
     2f0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     2f4:	84 30       	cpi	r24, 0x04	; 4
     2f6:	59 f0       	breq	.+22     	; 0x30e <ButtonMatrixPrimaryCycle+0x158>
			{
				BtnPressCount = 0;
     2f8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     2fc:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     300:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     304:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 4;
     308:	84 e0       	ldi	r24, 0x04	; 4
     30a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     30e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     312:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     31c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     320:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     324:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     328:	28 17       	cp	r18, r24
     32a:	39 07       	cpc	r19, r25
     32c:	10 f4       	brcc	.+4      	; 0x332 <ButtonMatrixPrimaryCycle+0x17c>
			{
				PressedButtonId = 4;
     32e:	84 e0       	ldi	r24, 0x04	; 4
     330:	58 c1       	rjmp	.+688    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     332:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     336:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     33a:	28 17       	cp	r18, r24
     33c:	39 07       	cpc	r19, r25
     33e:	08 f0       	brcs	.+2      	; 0x342 <ButtonMatrixPrimaryCycle+0x18c>
     340:	58 c2       	rjmp	.+1200   	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 4;
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	54 c2       	rjmp	.+1192   	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else
		{
			//<MOD>ACTIVE_COLUMN2;
			ActiveColumn = BTNMATRIX_COLUMN1; //<MOD>
     346:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ActiveColumn>
     34a:	53 c2       	rjmp	.+1190   	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
		}
	}
	else if(ActiveColumn == BTNMATRIX_COLUMN2)
     34c:	82 30       	cpi	r24, 0x02	; 2
     34e:	09 f0       	breq	.+2      	; 0x352 <ButtonMatrixPrimaryCycle+0x19c>
     350:	c0 c0       	rjmp	.+384    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	{
		CHECKPIN1
     352:	cc 99       	sbic	0x19, 4	; 25
     354:	2e c0       	rjmp	.+92     	; 0x3b2 <ButtonMatrixPrimaryCycle+0x1fc>
		{
			click = 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 5)
     35c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     360:	85 30       	cpi	r24, 0x05	; 5
     362:	59 f0       	breq	.+22     	; 0x37a <ButtonMatrixPrimaryCycle+0x1c4>
			{
				BtnPressCount = 0;
     364:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     368:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     36c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     370:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 5;
     374:	85 e0       	ldi	r24, 0x05	; 5
     376:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     37a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     37e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     388:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     38c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     390:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     394:	28 17       	cp	r18, r24
     396:	39 07       	cpc	r19, r25
     398:	10 f4       	brcc	.+4      	; 0x39e <ButtonMatrixPrimaryCycle+0x1e8>
			{
				PressedButtonId = 5;
     39a:	85 e0       	ldi	r24, 0x05	; 5
     39c:	22 c1       	rjmp	.+580    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     39e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     3a2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     3a6:	28 17       	cp	r18, r24
     3a8:	39 07       	cpc	r19, r25
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <ButtonMatrixPrimaryCycle+0x1f8>
     3ac:	22 c2       	rjmp	.+1092   	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 5;
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	1e c2       	rjmp	.+1084   	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN2
     3b2:	cd 99       	sbic	0x19, 5	; 25
     3b4:	2e c0       	rjmp	.+92     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			click = 1;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 6)
     3bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     3c0:	86 30       	cpi	r24, 0x06	; 6
     3c2:	59 f0       	breq	.+22     	; 0x3da <ButtonMatrixPrimaryCycle+0x224>
			{
				BtnPressCount = 0;
     3c4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     3c8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     3cc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     3d0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 6;
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     3da:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     3de:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     3e8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     3ec:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     3f0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	10 f4       	brcc	.+4      	; 0x3fe <ButtonMatrixPrimaryCycle+0x248>
			{
				PressedButtonId = 6;
     3fa:	86 e0       	ldi	r24, 0x06	; 6
     3fc:	f2 c0       	rjmp	.+484    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     3fe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     402:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     406:	28 17       	cp	r18, r24
     408:	39 07       	cpc	r19, r25
     40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	f2 c1       	rjmp	.+996    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 6;
     40e:	86 e0       	ldi	r24, 0x06	; 6
     410:	ee c1       	rjmp	.+988    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN3
     412:	ce 99       	sbic	0x19, 6	; 25
     414:	2e c0       	rjmp	.+92     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		{
			click = 1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 7)
     41c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     420:	87 30       	cpi	r24, 0x07	; 7
     422:	59 f0       	breq	.+22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			{
				BtnPressCount = 0;
     424:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     428:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     42c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     430:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 7;
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     43a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     43e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     448:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     44c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     450:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     454:	28 17       	cp	r18, r24
     456:	39 07       	cpc	r19, r25
     458:	10 f4       	brcc	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				PressedButtonId = 7;
     45a:	87 e0       	ldi	r24, 0x07	; 7
     45c:	c2 c0       	rjmp	.+388    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     45e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     462:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     466:	28 17       	cp	r18, r24
     468:	39 07       	cpc	r19, r25
     46a:	08 f0       	brcs	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	c2 c1       	rjmp	.+900    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 7;
     46e:	87 e0       	ldi	r24, 0x07	; 7
     470:	be c1       	rjmp	.+892    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN4
     472:	cf 99       	sbic	0x19, 7	; 25
     474:	be c1       	rjmp	.+892    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
		{
			click = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 8)
     47c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     480:	88 30       	cpi	r24, 0x08	; 8
     482:	59 f0       	breq	.+22     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			{
				BtnPressCount = 0;
     484:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     488:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     48c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     490:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 8;
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     49a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     49e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     4a8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     4ac:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     4b0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     4b4:	28 17       	cp	r18, r24
     4b6:	39 07       	cpc	r19, r25
     4b8:	10 f4       	brcc	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			{
				PressedButtonId = 8;
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	92 c0       	rjmp	.+292    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     4be:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     4c2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	92 c1       	rjmp	.+804    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 8;
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	8e c1       	rjmp	.+796    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		{
			//<MOD>ACTIVE_COLUMN3;
			//<MOD>ActiveColumn = BTNMATRIX_COLUMN3;
		}
	}
	else if(ActiveColumn == BTNMATRIX_COLUMN3)
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d6:	cb c0       	rjmp	.+406    	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
	{
		CHECKPIN1
     4d8:	cc 99       	sbic	0x19, 4	; 25
     4da:	2e c0       	rjmp	.+92     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		{
			click = 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 9)
     4e2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     4e6:	89 30       	cpi	r24, 0x09	; 9
     4e8:	59 f0       	breq	.+22     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			{
				BtnPressCount = 0;
     4ea:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     4ee:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     4f2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     4f6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 9;
     4fa:	89 e0       	ldi	r24, 0x09	; 9
     4fc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     500:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     504:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     50e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     512:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     516:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     51a:	28 17       	cp	r18, r24
     51c:	39 07       	cpc	r19, r25
     51e:	10 f4       	brcc	.+4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			{
				PressedButtonId = 9;
     520:	89 e0       	ldi	r24, 0x09	; 9
     522:	5f c0       	rjmp	.+190    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     524:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     528:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     52c:	28 17       	cp	r18, r24
     52e:	39 07       	cpc	r19, r25
     530:	08 f0       	brcs	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     532:	5f c1       	rjmp	.+702    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 9;
     534:	89 e0       	ldi	r24, 0x09	; 9
     536:	5b c1       	rjmp	.+694    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN2
     538:	cd 99       	sbic	0x19, 5	; 25
     53a:	2e c0       	rjmp	.+92     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
		{
			click = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 10)
     542:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     546:	8a 30       	cpi	r24, 0x0A	; 10
     548:	59 f0       	breq	.+22     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			{
				BtnPressCount = 0;
     54a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     54e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     552:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     556:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 10;
     55a:	8a e0       	ldi	r24, 0x0A	; 10
     55c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     560:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     564:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     56e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     572:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     576:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     57a:	28 17       	cp	r18, r24
     57c:	39 07       	cpc	r19, r25
     57e:	10 f4       	brcc	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			{
				PressedButtonId = 10;
     580:	8a e0       	ldi	r24, 0x0A	; 10
     582:	2f c0       	rjmp	.+94     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     584:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     588:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     58c:	28 17       	cp	r18, r24
     58e:	39 07       	cpc	r19, r25
     590:	08 f0       	brcs	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     592:	2f c1       	rjmp	.+606    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 10;
     594:	8a e0       	ldi	r24, 0x0A	; 10
     596:	2b c1       	rjmp	.+598    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN3
     598:	ce 99       	sbic	0x19, 6	; 25
     59a:	39 c0       	rjmp	.+114    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
		{
			click = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 11)
     5a2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     5a6:	8b 30       	cpi	r24, 0x0B	; 11
     5a8:	59 f0       	breq	.+22     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
			{
				BtnPressCount = 0;
     5aa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     5ae:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     5b2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     5b6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 11;
     5ba:	8b e0       	ldi	r24, 0x0B	; 11
     5bc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     5c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     5c4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     5ce:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     5d2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     5d6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	68 f4       	brcc	.+26     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
			{
				PressedButtonId = 11;
     5e0:	8b e0       	ldi	r24, 0x0B	; 11
     5e2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <PressedButtonId>
				BtnPressCount = LONGPRESS_COUNT + 2;
     5e6:	2e 5f       	subi	r18, 0xFE	; 254
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <BtnPressCount+0x1>
     5ee:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <BtnPressCount>
				LongPress = 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <LongPress>
     5f8:	fc c0       	rjmp	.+504    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     5fa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     5fe:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     602:	28 17       	cp	r18, r24
     604:	39 07       	cpc	r19, r25
     606:	08 f0       	brcs	.+2      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     608:	f4 c0       	rjmp	.+488    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 11;
     60a:	8b e0       	ldi	r24, 0x0B	; 11
     60c:	f0 c0       	rjmp	.+480    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN4
     60e:	cf 99       	sbic	0x19, 7	; 25
     610:	f0 c0       	rjmp	.+480    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
		{
			click = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 12)
     618:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     61c:	8c 30       	cpi	r24, 0x0C	; 12
     61e:	59 f0       	breq	.+22     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
			{
				BtnPressCount = 0;
     620:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     624:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     628:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     62c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 12;
     630:	8c e0       	ldi	r24, 0x0C	; 12
     632:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     636:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     63a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     644:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     648:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     64c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     650:	28 17       	cp	r18, r24
     652:	39 07       	cpc	r19, r25
     654:	10 f4       	brcc	.+4      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			{
				PressedButtonId = 12;
     656:	8c e0       	ldi	r24, 0x0C	; 12
     658:	c4 cf       	rjmp	.-120    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     65a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     65e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     662:	28 17       	cp	r18, r24
     664:	39 07       	cpc	r19, r25
     666:	08 f0       	brcs	.+2      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     668:	c4 c0       	rjmp	.+392    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 12;
     66a:	8c e0       	ldi	r24, 0x0C	; 12
     66c:	c0 c0       	rjmp	.+384    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		{
			//<MOD>ACTIVE_COLUMN4;
			//<MOD>ActiveColumn = BTNMATRIX_COLUMN4;
		}
	}
	else if(ActiveColumn == BTNMATRIX_COLUMN4)
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	09 f0       	breq	.+2      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     672:	bf c0       	rjmp	.+382    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
	{
		CHECKPIN1
     674:	cc 99       	sbic	0x19, 4	; 25
     676:	2e c0       	rjmp	.+92     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
		{
			click = 1;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 13)
     67e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     682:	8d 30       	cpi	r24, 0x0D	; 13
     684:	59 f0       	breq	.+22     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
			{
				BtnPressCount = 0;
     686:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     68a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     68e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     692:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 13;
     696:	8d e0       	ldi	r24, 0x0D	; 13
     698:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     69c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     6a0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     6aa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     6ae:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     6b2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     6b6:	28 17       	cp	r18, r24
     6b8:	39 07       	cpc	r19, r25
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
			{
				PressedButtonId = 13;
     6bc:	8d e0       	ldi	r24, 0x0D	; 13
     6be:	91 cf       	rjmp	.-222    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     6c0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     6c4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     6c8:	28 17       	cp	r18, r24
     6ca:	39 07       	cpc	r19, r25
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6ce:	91 c0       	rjmp	.+290    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 13;
     6d0:	8d e0       	ldi	r24, 0x0D	; 13
     6d2:	8d c0       	rjmp	.+282    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN2
     6d4:	cd 99       	sbic	0x19, 5	; 25
     6d6:	2e c0       	rjmp	.+92     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
		{
			click = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 14)
     6de:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     6e2:	8e 30       	cpi	r24, 0x0E	; 14
     6e4:	59 f0       	breq	.+22     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
			{
				BtnPressCount = 0;
     6e6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     6ea:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     6ee:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     6f2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 14;
     6f6:	8e e0       	ldi	r24, 0x0E	; 14
     6f8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     6fc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     700:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     70a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     70e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     712:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     716:	28 17       	cp	r18, r24
     718:	39 07       	cpc	r19, r25
     71a:	10 f4       	brcc	.+4      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
			{
				PressedButtonId = 14;
     71c:	8e e0       	ldi	r24, 0x0E	; 14
     71e:	61 cf       	rjmp	.-318    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     720:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     724:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     728:	28 17       	cp	r18, r24
     72a:	39 07       	cpc	r19, r25
     72c:	08 f0       	brcs	.+2      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
     72e:	61 c0       	rjmp	.+194    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 14;
     730:	8e e0       	ldi	r24, 0x0E	; 14
     732:	5d c0       	rjmp	.+186    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN3
     734:	ce 99       	sbic	0x19, 6	; 25
     736:	2d c0       	rjmp	.+90     	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
		{
			click = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 15)
     73e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     742:	8f 30       	cpi	r24, 0x0F	; 15
     744:	59 f0       	breq	.+22     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
			{
				BtnPressCount = 0;
     746:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     74a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     74e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     752:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 15;
     756:	8f e0       	ldi	r24, 0x0F	; 15
     758:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     75c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     760:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     76a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     76e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     772:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     776:	28 17       	cp	r18, r24
     778:	39 07       	cpc	r19, r25
     77a:	10 f4       	brcc	.+4      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
			{
				PressedButtonId = 15;
     77c:	8f e0       	ldi	r24, 0x0F	; 15
     77e:	31 cf       	rjmp	.-414    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     780:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     784:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     788:	28 17       	cp	r18, r24
     78a:	39 07       	cpc	r19, r25
     78c:	90 f5       	brcc	.+100    	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 15;
     78e:	8f e0       	ldi	r24, 0x0F	; 15
     790:	2e c0       	rjmp	.+92     	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			}
		}
		else CHECKPIN4
     792:	cf 99       	sbic	0x19, 7	; 25
     794:	2e c0       	rjmp	.+92     	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
		{
			click = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <click>
			if (Button != 16)
     79c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Button>
     7a0:	80 31       	cpi	r24, 0x10	; 16
     7a2:	59 f0       	breq	.+22     	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
			{
				BtnPressCount = 0;
     7a4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     7a8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
				PressedButtonId = 0;
     7ac:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
				LongPress = 0;
     7b0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
				Button = 16;
     7b4:	80 e1       	ldi	r24, 0x10	; 16
     7b6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Button>
			}
			BtnPressCount++;
     7ba:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <BtnPressCount>
     7be:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <BtnPressCount+0x1>
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <BtnPressCount+0x1>
     7c8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <BtnPressCount>
			if (BtnPressCount > LONGPRESS_COUNT)
     7cc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <LONGPRESS_COUNT>
     7d0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <LONGPRESS_COUNT+0x1>
     7d4:	28 17       	cp	r18, r24
     7d6:	39 07       	cpc	r19, r25
     7d8:	10 f4       	brcc	.+4      	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
			{
				PressedButtonId = 16;
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	02 cf       	rjmp	.-508    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
				BtnPressCount = LONGPRESS_COUNT + 2;
				LongPress = 1;
			}
			else if (BtnPressCount > SHORTPRESS_COUNT)
     7de:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <SHORTPRESS_COUNT>
     7e2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <SHORTPRESS_COUNT+0x1>
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	18 f4       	brcc	.+6      	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
			{
				PressedButtonId = 16;
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <PressedButtonId>
			//<MOD>ACTIVE_COLUMN1;
			//<MOD>ActiveColumn = BTNMATRIX_COLUMN1;
		}
	}
	
	if (ButtonIdReadFlag == 1)
     7f2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ButtonIdReadFlag>
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	c1 f4       	brne	.+48     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
	{
		PressedButtonId = 0;
     7fa:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
		NextButtonDelayCount++;
     7fe:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <NextButtonDelayCount>
     802:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <NextButtonDelayCount+0x1>
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <NextButtonDelayCount+0x1>
     80c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <NextButtonDelayCount>
		
		if (NextButtonDelayCount > 500)
     810:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <NextButtonDelayCount>
     814:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <NextButtonDelayCount+0x1>
     818:	85 3f       	cpi	r24, 0xF5	; 245
     81a:	91 40       	sbci	r25, 0x01	; 1
     81c:	30 f0       	brcs	.+12     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
		{
			NextButtonDelayCount = 0;
     81e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <NextButtonDelayCount+0x1>
     822:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <NextButtonDelayCount>
			ButtonIdReadFlag = 0;
     826:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <ButtonIdReadFlag>
		}
	}
	
	if (click != 1)
     82a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <click>
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	51 f0       	breq	.+20     	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
	{
		BtnPressCount = 0;
     832:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <BtnPressCount+0x1>
     836:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <BtnPressCount>
		PressedButtonId = 0;
     83a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PressedButtonId>
		LongPress = 0;
     83e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <LongPress>
		Button = 0;
     842:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <Button>
	}
	
	click = 0;
     846:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <click>
     84a:	08 95       	ret

0000084c <DS1307Write>:
	
	return TRUE;
}

uint8_t DS1307Write(uint8_t address,uint8_t data)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	d8 2f       	mov	r29, r24
     852:	c6 2f       	mov	r28, r22
	uint8_t res;	//result
	
	//Start
	SoftI2CStart();
     854:	0e 94 5f 04 	call	0x8be	; 0x8be <SoftI2CStart>
	
	//SLA+W
	res=SoftI2CWriteByte(DS1307_SLA_W);	//DS1307 address + W
     858:	80 ed       	ldi	r24, 0xD0	; 208
     85a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
     85e:	81 11       	cpse	r24, r1
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0d c0       	rjmp	.+26     	; 0x880 <__stack+0x21>
	
	//Now send the address of required register
	res=SoftI2CWriteByte(address);
     866:	8d 2f       	mov	r24, r29
     868:	0e 94 78 04 	call	0x8f0	; 0x8f0 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
     86c:	88 23       	and	r24, r24
     86e:	c9 f3       	breq	.-14     	; 0x862 <__stack+0x3>
	
	//Now write the value
	res=SoftI2CWriteByte(data);
     870:	8c 2f       	mov	r24, r28
     872:	0e 94 78 04 	call	0x8f0	; 0x8f0 <SoftI2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
     876:	88 23       	and	r24, r24
     878:	a1 f3       	breq	.-24     	; 0x862 <__stack+0x3>
	
	//STOP
	SoftI2CStop();
     87a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <SoftI2CStop>
	
	return TRUE;
     87e:	81 e0       	ldi	r24, 0x01	; 1
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <__delay_cycle>:
		asm volatile ("nop");
	}
}

void delay_us(unsigned short time_us)
{
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	00 e0       	ldi	r16, 0x00	; 0
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	98 01       	movw	r18, r16
     890:	06 17       	cp	r16, r22
     892:	17 07       	cpc	r17, r23
     894:	28 07       	cpc	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	31 f0       	breq	.+12     	; 0x8a6 <__delay_cycle+0x20>
     89a:	00 00       	nop
     89c:	0f 5f       	subi	r16, 0xFF	; 255
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	2f 4f       	sbci	r18, 0xFF	; 255
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	f5 cf       	rjmp	.-22     	; 0x890 <__delay_cycle+0xa>
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <delay_ms>:
	unsigned short delay_count = F_CPU / 4000;

	unsigned short cnt;
	
	//#ifndef  _DEBUG
	asm volatile ("\n"
     8ac:	20 ea       	ldi	r18, 0xA0	; 160
     8ae:	3f e0       	ldi	r19, 0x0F	; 15

000008b0 <L_dl157>:
     8b0:	e2 2f       	mov	r30, r18
     8b2:	f3 2f       	mov	r31, r19

000008b4 <L_dl257>:
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <L_dl257>
     8b8:	8a 95       	dec	r24
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <L_dl157>
     8bc:	08 95       	ret

000008be <SoftI2CStart>:
	SOFT_I2C_SCL_HIGH;
	
}
void SoftI2CStart()
{
	SOFT_I2C_SCL_HIGH;
     8be:	a0 98       	cbi	0x14, 0	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8c0:	85 e0       	ldi	r24, 0x05	; 5
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	31 97       	sbiw	r30, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <SoftI2CStart+0x8>
	H_DEL;
	
	SOFT_I2C_SDA_LOW;
     8ca:	a1 9a       	sbi	0x14, 1	; 20
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <SoftI2CStart+0xe>
     8d0:	08 95       	ret

000008d2 <SoftI2CStop>:
	H_DEL;
}

void SoftI2CStop()
{
	SOFT_I2C_SDA_LOW;
     8d2:	a1 9a       	sbi	0x14, 1	; 20
     8d4:	85 e0       	ldi	r24, 0x05	; 5
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <SoftI2CStop+0x8>
	H_DEL;
	SOFT_I2C_SCL_HIGH;
     8de:	a0 98       	cbi	0x14, 0	; 20
     8e0:	e3 e0       	ldi	r30, 0x03	; 3
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <SoftI2CStop+0x12>
	Q_DEL;
	SOFT_I2C_SDA_HIGH;
     8e8:	a1 98       	cbi	0x14, 1	; 20
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <SoftI2CStop+0x18>
     8ee:	08 95       	ret

000008f0 <SoftI2CWriteByte>:
	H_DEL;
}

uint8_t SoftI2CWriteByte(uint8_t data)
{
     8f0:	98 e0       	ldi	r25, 0x08	; 8
     8f2:	43 e0       	ldi	r20, 0x03	; 3
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	25 e0       	ldi	r18, 0x05	; 5
     8f8:	30 e0       	ldi	r19, 0x00	; 0
	
	uint8_t i;
	
	for(i=0;i<8;i++)
	{
		SOFT_I2C_SCL_LOW;
     8fa:	a0 9a       	sbi	0x14, 0	; 20
     8fc:	fa 01       	movw	r30, r20
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <SoftI2CWriteByte+0xe>
		Q_DEL;
		
		if(data & 0x80)
     902:	87 ff       	sbrs	r24, 7
     904:	02 c0       	rjmp	.+4      	; 0x90a <SoftI2CWriteByte+0x1a>
		SOFT_I2C_SDA_HIGH;
     906:	a1 98       	cbi	0x14, 1	; 20
     908:	01 c0       	rjmp	.+2      	; 0x90c <SoftI2CWriteByte+0x1c>
		else
		SOFT_I2C_SDA_LOW;
     90a:	a1 9a       	sbi	0x14, 1	; 20
     90c:	f9 01       	movw	r30, r18
     90e:	31 97       	sbiw	r30, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <SoftI2CWriteByte+0x1e>
		
		H_DEL;
		
		SOFT_I2C_SCL_HIGH;
     912:	a0 98       	cbi	0x14, 0	; 20
     914:	f9 01       	movw	r30, r18
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <SoftI2CWriteByte+0x26>
		H_DEL;
		
		while((SCLPIN & (1<<SCL))==0);
     91a:	98 9b       	sbis	0x13, 0	; 19
     91c:	fe cf       	rjmp	.-4      	; 0x91a <SoftI2CWriteByte+0x2a>
		
		data=data<<1;
     91e:	88 0f       	add	r24, r24
     920:	91 50       	subi	r25, 0x01	; 1
uint8_t SoftI2CWriteByte(uint8_t data)
{
	
	uint8_t i;
	
	for(i=0;i<8;i++)
     922:	59 f7       	brne	.-42     	; 0x8fa <SoftI2CWriteByte+0xa>
		
		data=data<<1;
	}
	
	//The 9th clock (ACK Phase)
	SOFT_I2C_SCL_LOW;
     924:	a0 9a       	sbi	0x14, 0	; 20
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <SoftI2CWriteByte+0x3a>
	Q_DEL;
	
	SOFT_I2C_SDA_HIGH;
     92e:	a1 98       	cbi	0x14, 1	; 20
     930:	25 e0       	ldi	r18, 0x05	; 5
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	c9 01       	movw	r24, r18
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <SoftI2CWriteByte+0x46>
	H_DEL;
	
	SOFT_I2C_SCL_HIGH;
     93a:	a0 98       	cbi	0x14, 0	; 20
     93c:	c9 01       	movw	r24, r18
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <SoftI2CWriteByte+0x4e>
	H_DEL;
	
	uint8_t ack=!(SDAPIN & (1<<SDA));
     942:	83 b3       	in	r24, 0x13	; 19
	
	SOFT_I2C_SCL_LOW;
     944:	a0 9a       	sbi	0x14, 0	; 20
     946:	f9 01       	movw	r30, r18
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <SoftI2CWriteByte+0x58>
	H_DEL;
	
	return ack;
     94c:	86 95       	lsr	r24
     94e:	81 70       	andi	r24, 0x01	; 1
	
}
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	89 27       	eor	r24, r25
     954:	08 95       	ret

00000956 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
     956:	c0 98       	cbi	0x18, 0	; 24
     958:	88 b3       	in	r24, 0x18	; 24
     95a:	88 bb       	out	0x18, r24	; 24
     95c:	c1 98       	cbi	0x18, 1	; 24
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     964:	b8 9a       	sbi	0x17, 0	; 23
     966:	87 b3       	in	r24, 0x17	; 23
     968:	87 bb       	out	0x17, r24	; 23
     96a:	b9 9a       	sbi	0x17, 1	; 23
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <delay_ms>

00000972 <lcdControlWrite>:
     972:	cf 93       	push	r28
     974:	c8 2f       	mov	r28, r24
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     97c:	c0 98       	cbi	0x18, 0	; 24
     97e:	88 b3       	in	r24, 0x18	; 24
     980:	88 bb       	out	0x18, r24	; 24
     982:	c1 9a       	sbi	0x18, 1	; 24
     984:	81 b3       	in	r24, 0x11	; 17
     986:	80 6f       	ori	r24, 0xF0	; 240
     988:	81 bb       	out	0x11, r24	; 17
     98a:	82 b3       	in	r24, 0x12	; 18
     98c:	8f 70       	andi	r24, 0x0F	; 15
     98e:	9c 2f       	mov	r25, r28
     990:	90 7f       	andi	r25, 0xF0	; 240
     992:	89 2b       	or	r24, r25
     994:	82 bb       	out	0x12, r24	; 18
     996:	c1 98       	cbi	0x18, 1	; 24
     998:	c1 9a       	sbi	0x18, 1	; 24
     99a:	82 b3       	in	r24, 0x12	; 18
     99c:	28 2f       	mov	r18, r24
     99e:	2f 70       	andi	r18, 0x0F	; 15
     9a0:	30 e1       	ldi	r19, 0x10	; 16
     9a2:	c3 9f       	mul	r28, r19
     9a4:	c0 01       	movw	r24, r0
     9a6:	11 24       	eor	r1, r1
     9a8:	82 2b       	or	r24, r18
     9aa:	82 bb       	out	0x12, r24	; 18
     9ac:	c1 98       	cbi	0x18, 1	; 24
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <lcdDataWrite>:
     9b2:	cf 93       	push	r28
     9b4:	c8 2f       	mov	r28, r24
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
	...
     9f4:	c0 9a       	sbi	0x18, 0	; 24
     9f6:	88 b3       	in	r24, 0x18	; 24
     9f8:	88 bb       	out	0x18, r24	; 24
     9fa:	c1 9a       	sbi	0x18, 1	; 24
	...
     a18:	81 b3       	in	r24, 0x11	; 17
     a1a:	80 6f       	ori	r24, 0xF0	; 240
     a1c:	81 bb       	out	0x11, r24	; 17
     a1e:	82 b3       	in	r24, 0x12	; 18
     a20:	8f 70       	andi	r24, 0x0F	; 15
     a22:	9c 2f       	mov	r25, r28
     a24:	90 7f       	andi	r25, 0xF0	; 240
     a26:	89 2b       	or	r24, r25
     a28:	82 bb       	out	0x12, r24	; 18
	...
     a46:	c1 98       	cbi	0x18, 1	; 24
	...
     a64:	c1 9a       	sbi	0x18, 1	; 24
	...
     a82:	82 b3       	in	r24, 0x12	; 18
     a84:	28 2f       	mov	r18, r24
     a86:	2f 70       	andi	r18, 0x0F	; 15
     a88:	30 e1       	ldi	r19, 0x10	; 16
     a8a:	c3 9f       	mul	r28, r19
     a8c:	c0 01       	movw	r24, r0
     a8e:	11 24       	eor	r1, r1
     a90:	82 2b       	or	r24, r18
     a92:	82 bb       	out	0x12, r24	; 18
	...
     ab0:	c1 98       	cbi	0x18, 1	; 24
	...
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <lcdInit>:
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     ad8:	0e 94 ab 04 	call	0x956	; 0x956 <lcdInitHW>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 b9 04 	call	0x972	; 0x972 <lcdControlWrite>
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     ae8:	88 e2       	ldi	r24, 0x28	; 40
     aea:	0e 94 b9 04 	call	0x972	; 0x972 <lcdControlWrite>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	0e 94 b9 04 	call	0x972	; 0x972 <lcdControlWrite>
     af4:	84 e6       	ldi	r24, 0x64	; 100
     af6:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     b00:	86 e0       	ldi	r24, 0x06	; 6
     b02:	0e 94 b9 04 	call	0x972	; 0x972 <lcdControlWrite>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     b0c:	8c e0       	ldi	r24, 0x0C	; 12
     b0e:	0e 94 b9 04 	call	0x972	; 0x972 <lcdControlWrite>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <delay_ms>

00000b24 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	0c 94 b9 04 	jmp	0x972	; 0x972 <lcdControlWrite>

00000b2a <lcdGotoXY>:
void lcdGotoXY(uint8_t x, uint8_t y)
{
	register uint8_t DDRAMAddr;

	// remap lines into proper order
	switch(y)
     b2a:	62 30       	cpi	r22, 0x02	; 2
     b2c:	31 f0       	breq	.+12     	; 0xb3a <lcdGotoXY+0x10>
     b2e:	63 30       	cpi	r22, 0x03	; 3
     b30:	31 f0       	breq	.+12     	; 0xb3e <lcdGotoXY+0x14>
     b32:	61 30       	cpi	r22, 0x01	; 1
     b34:	29 f4       	brne	.+10     	; 0xb40 <lcdGotoXY+0x16>
	{
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     b36:	80 5c       	subi	r24, 0xC0	; 192
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <lcdGotoXY+0x16>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     b3a:	8c 5e       	subi	r24, 0xEC	; 236
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <lcdGotoXY+0x16>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     b3e:	8c 5a       	subi	r24, 0xAC	; 172
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
     b40:	80 68       	ori	r24, 0x80	; 128
     b42:	0c 94 b9 04 	jmp	0x972	; 0x972 <lcdControlWrite>

00000b46 <lcdPrintData>:
}

void lcdPrintData(char* data, uint8_t nBytes)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
	register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	59 f0       	breq	.+22     	; 0xb68 <lcdPrintData+0x22>
     b52:	ec 01       	movw	r28, r24
     b54:	8c 01       	movw	r16, r24
     b56:	06 0f       	add	r16, r22
     b58:	11 1d       	adc	r17, r1

	// print data
	for(i=0; i<nBytes; i++)
     b5a:	c0 17       	cp	r28, r16
     b5c:	d1 07       	cpc	r29, r17
     b5e:	21 f0       	breq	.+8      	; 0xb68 <lcdPrintData+0x22>
	{
		lcdDataWrite(data[i]);
     b60:	89 91       	ld	r24, Y+
     b62:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <lcdDataWrite>
     b66:	f9 cf       	rjmp	.-14     	; 0xb5a <lcdPrintData+0x14>
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <init_devices>:
				lcdPrintData("^^", 2);
				break;
			}
		}
	}
}
     b72:	f8 94       	cli
     b74:	d4 98       	cbi	0x1a, 4	; 26
     b76:	dc 9a       	sbi	0x1b, 4	; 27
     b78:	d5 98       	cbi	0x1a, 5	; 26
     b7a:	dd 9a       	sbi	0x1b, 5	; 27
     b7c:	d6 98       	cbi	0x1a, 6	; 26
     b7e:	de 9a       	sbi	0x1b, 6	; 27
     b80:	d7 98       	cbi	0x1a, 7	; 26
     b82:	df 9a       	sbi	0x1b, 7	; 27
     b84:	c4 98       	cbi	0x18, 4	; 24
     b86:	bc 9a       	sbi	0x17, 4	; 23
     b88:	c5 9a       	sbi	0x18, 5	; 24
     b8a:	bd 9a       	sbi	0x17, 5	; 23
     b8c:	c6 9a       	sbi	0x18, 6	; 24
     b8e:	be 98       	cbi	0x17, 6	; 23
     b90:	c7 9a       	sbi	0x18, 7	; 24
     b92:	bf 9a       	sbi	0x17, 7	; 23
     b94:	ba 98       	cbi	0x17, 2	; 23
     b96:	c2 9a       	sbi	0x18, 2	; 24
     b98:	bb 98       	cbi	0x17, 3	; 23
     b9a:	c3 9a       	sbi	0x18, 3	; 24
     b9c:	93 98       	cbi	0x12, 3	; 18
     b9e:	8b 9a       	sbi	0x11, 3	; 17
     ba0:	8f e5       	ldi	r24, 0x5F	; 95
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 48 12 	call	0x2490	; 0x2490 <USART_Init>
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	89 bf       	out	0x39, r24	; 57
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	85 bd       	out	0x25, r24	; 37
     bb0:	08 95       	ret

00000bb2 <__vector_5>:
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	2f 93       	push	r18
     bbe:	3f 93       	push	r19
     bc0:	4f 93       	push	r20
     bc2:	5f 93       	push	r21
     bc4:	6f 93       	push	r22
     bc6:	7f 93       	push	r23
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	af 93       	push	r26
     bce:	bf 93       	push	r27
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31
     bd4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <T2TickCount>
     bd8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <T2TickCount+0x1>
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <T2TickCount+0x1>
     be2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <T2TickCount>
     be6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <SecondTickCount>
     bea:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <SecondTickCount+0x1>
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <SecondTickCount+0x1>
     bf4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <SecondTickCount>
     bf8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <T2TickCount002>
     bfc:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <T2TickCount002+0x1>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <T2TickCount002+0x1>
     c06:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <T2TickCount002>
     c0a:	0e 94 2d 12 	call	0x245a	; 0x245a <RxWatchdogCountUpCycle>
     c0e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ButtonMatrixPrimaryCycle>
     c12:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <SecondTickCount>
     c16:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <SecondTickCount+0x1>
     c1a:	c3 97       	sbiw	r24, 0x33	; 51
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <__vector_5+0x7a>
     c1e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <SecondTickCount+0x1>
     c22:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <SecondTickCount>
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <SecondTickInt>
     c2c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <T2TickCount>
     c30:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <T2TickCount+0x1>
     c34:	80 3a       	cpi	r24, 0xA0	; 160
     c36:	97 40       	sbci	r25, 0x07	; 7
     c38:	e0 f0       	brcs	.+56     	; 0xc72 <__vector_5+0xc0>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <T2TickInt003>
     c40:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <T2TickCount+0x1>
     c44:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <T2TickCount>
     c48:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <UnitIntigratorTickInt>
     c4c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <sec_counter>
     c50:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <sec_counter+0x1>
     c54:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <sec_counter+0x2>
     c58:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <sec_counter+0x3>
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	a1 1d       	adc	r26, r1
     c60:	b1 1d       	adc	r27, r1
     c62:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <sec_counter>
     c66:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <sec_counter+0x1>
     c6a:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <sec_counter+0x2>
     c6e:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <sec_counter+0x3>
     c72:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <T2TickCount002>
     c76:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <T2TickCount002+0x1>
     c7a:	81 39       	cpi	r24, 0x91	; 145
     c7c:	91 40       	sbci	r25, 0x01	; 1
     c7e:	38 f0       	brcs	.+14     	; 0xc8e <__vector_5+0xdc>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <T2TickInt002>
     c86:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <T2TickCount002+0x1>
     c8a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <T2TickCount002>
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	7f 91       	pop	r23
     c9c:	6f 91       	pop	r22
     c9e:	5f 91       	pop	r21
     ca0:	4f 91       	pop	r20
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <CRC16cal>:
     cb0:	fc 01       	movw	r30, r24
     cb2:	68 0f       	add	r22, r24
     cb4:	79 1f       	adc	r23, r25
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	9f ef       	ldi	r25, 0xFF	; 255
     cba:	e6 17       	cp	r30, r22
     cbc:	f7 07       	cpc	r31, r23
     cbe:	91 f0       	breq	.+36     	; 0xce4 <CRC16cal+0x34>
     cc0:	21 91       	ld	r18, Z+
     cc2:	82 27       	eor	r24, r18
     cc4:	28 e0       	ldi	r18, 0x08	; 8
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	48 2f       	mov	r20, r24
     cca:	41 70       	andi	r20, 0x01	; 1
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	44 23       	and	r20, r20
     cd2:	21 f0       	breq	.+8      	; 0xcdc <CRC16cal+0x2c>
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	84 27       	eor	r24, r20
     cd8:	40 ea       	ldi	r20, 0xA0	; 160
     cda:	94 27       	eor	r25, r20
     cdc:	21 50       	subi	r18, 0x01	; 1
     cde:	31 09       	sbc	r19, r1
     ce0:	99 f7       	brne	.-26     	; 0xcc8 <CRC16cal+0x18>
     ce2:	eb cf       	rjmp	.-42     	; 0xcba <CRC16cal+0xa>
     ce4:	08 95       	ret

00000ce6 <GetNDigitFromShort>:
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	64 97       	sbiw	r28, 0x14	; 20
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	8b 01       	movw	r16, r22
     d06:	d4 2e       	mov	r13, r20
     d08:	4a e0       	ldi	r20, 0x0A	; 10
     d0a:	9e 01       	movw	r18, r28
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	79 01       	movw	r14, r18
     d12:	b9 01       	movw	r22, r18
     d14:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__itoa_ncheck>
     d18:	f7 01       	movw	r30, r14
     d1a:	01 90       	ld	r0, Z+
     d1c:	00 20       	and	r0, r0
     d1e:	e9 f7       	brne	.-6      	; 0xd1a <GetNDigitFromShort+0x34>
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	cf 01       	movw	r24, r30
     d24:	8e 19       	sub	r24, r14
     d26:	9f 09       	sbc	r25, r15
     d28:	38 2f       	mov	r19, r24
     d2a:	f8 01       	movw	r30, r16
     d2c:	d8 01       	movw	r26, r16
     d2e:	20 2f       	mov	r18, r16
     d30:	50 e3       	ldi	r21, 0x30	; 48
     d32:	4a 2f       	mov	r20, r26
     d34:	40 1b       	sub	r20, r16
     d36:	4d 15       	cp	r20, r13
     d38:	10 f4       	brcc	.+4      	; 0xd3e <GetNDigitFromShort+0x58>
     d3a:	5d 93       	st	X+, r21
     d3c:	fa cf       	rjmp	.-12     	; 0xd32 <GetNDigitFromShort+0x4c>
     d3e:	3d 15       	cp	r19, r13
     d40:	e8 f0       	brcs	.+58     	; 0xd7c <GetNDigitFromShort+0x96>
     d42:	8d 19       	sub	r24, r13
     d44:	d7 01       	movw	r26, r14
     d46:	a8 0f       	add	r26, r24
     d48:	b1 1d       	adc	r27, r1
     d4a:	8e 2f       	mov	r24, r30
     d4c:	82 1b       	sub	r24, r18
     d4e:	8d 15       	cp	r24, r13
     d50:	18 f4       	brcc	.+6      	; 0xd58 <GetNDigitFromShort+0x72>
     d52:	8d 91       	ld	r24, X+
     d54:	81 93       	st	Z+, r24
     d56:	f9 cf       	rjmp	.-14     	; 0xd4a <GetNDigitFromShort+0x64>
     d58:	f8 01       	movw	r30, r16
     d5a:	ed 0d       	add	r30, r13
     d5c:	f1 1d       	adc	r31, r1
     d5e:	10 82       	st	Z, r1
     d60:	64 96       	adiw	r28, 0x14	; 20
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	08 95       	ret
     d7c:	3d 2d       	mov	r19, r13
     d7e:	38 1b       	sub	r19, r24
     d80:	23 2f       	mov	r18, r19
     d82:	43 2f       	mov	r20, r19
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	48 0f       	add	r20, r24
     d88:	51 1d       	adc	r21, r1
     d8a:	62 2f       	mov	r22, r18
     d8c:	63 1b       	sub	r22, r19
     d8e:	82 2f       	mov	r24, r18
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	84 17       	cp	r24, r20
     d94:	95 07       	cpc	r25, r21
     d96:	04 f7       	brge	.-64     	; 0xd58 <GetNDigitFromShort+0x72>
     d98:	d8 01       	movw	r26, r16
     d9a:	a8 0f       	add	r26, r24
     d9c:	b9 1f       	adc	r27, r25
     d9e:	f7 01       	movw	r30, r14
     da0:	e6 0f       	add	r30, r22
     da2:	f1 1d       	adc	r31, r1
     da4:	60 81       	ld	r22, Z
     da6:	6c 93       	st	X, r22
     da8:	2f 5f       	subi	r18, 0xFF	; 255
     daa:	ef cf       	rjmp	.-34     	; 0xd8a <GetNDigitFromShort+0xa4>

00000dac <GetNDigitFromu32>:
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	64 97       	sbiw	r28, 0x14	; 20
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8a 01       	movw	r16, r20
     dd0:	d2 2e       	mov	r13, r18
     dd2:	4a e0       	ldi	r20, 0x0A	; 10
     dd4:	9e 01       	movw	r18, r28
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	79 01       	movw	r14, r18
     ddc:	b9 01       	movw	r22, r18
     dde:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__itoa_ncheck>
     de2:	f7 01       	movw	r30, r14
     de4:	01 90       	ld	r0, Z+
     de6:	00 20       	and	r0, r0
     de8:	e9 f7       	brne	.-6      	; 0xde4 <GetNDigitFromu32+0x38>
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	cf 01       	movw	r24, r30
     dee:	8e 19       	sub	r24, r14
     df0:	9f 09       	sbc	r25, r15
     df2:	38 2f       	mov	r19, r24
     df4:	f8 01       	movw	r30, r16
     df6:	d8 01       	movw	r26, r16
     df8:	20 2f       	mov	r18, r16
     dfa:	50 e3       	ldi	r21, 0x30	; 48
     dfc:	4a 2f       	mov	r20, r26
     dfe:	40 1b       	sub	r20, r16
     e00:	4d 15       	cp	r20, r13
     e02:	10 f4       	brcc	.+4      	; 0xe08 <GetNDigitFromu32+0x5c>
     e04:	5d 93       	st	X+, r21
     e06:	fa cf       	rjmp	.-12     	; 0xdfc <GetNDigitFromu32+0x50>
     e08:	3d 15       	cp	r19, r13
     e0a:	e8 f0       	brcs	.+58     	; 0xe46 <GetNDigitFromu32+0x9a>
     e0c:	8d 19       	sub	r24, r13
     e0e:	d7 01       	movw	r26, r14
     e10:	a8 0f       	add	r26, r24
     e12:	b1 1d       	adc	r27, r1
     e14:	8e 2f       	mov	r24, r30
     e16:	82 1b       	sub	r24, r18
     e18:	8d 15       	cp	r24, r13
     e1a:	18 f4       	brcc	.+6      	; 0xe22 <GetNDigitFromu32+0x76>
     e1c:	8d 91       	ld	r24, X+
     e1e:	81 93       	st	Z+, r24
     e20:	f9 cf       	rjmp	.-14     	; 0xe14 <GetNDigitFromu32+0x68>
     e22:	f8 01       	movw	r30, r16
     e24:	ed 0d       	add	r30, r13
     e26:	f1 1d       	adc	r31, r1
     e28:	10 82       	st	Z, r1
     e2a:	64 96       	adiw	r28, 0x14	; 20
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	08 95       	ret
     e46:	3d 2d       	mov	r19, r13
     e48:	38 1b       	sub	r19, r24
     e4a:	23 2f       	mov	r18, r19
     e4c:	43 2f       	mov	r20, r19
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	48 0f       	add	r20, r24
     e52:	51 1d       	adc	r21, r1
     e54:	62 2f       	mov	r22, r18
     e56:	63 1b       	sub	r22, r19
     e58:	82 2f       	mov	r24, r18
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	84 17       	cp	r24, r20
     e5e:	95 07       	cpc	r25, r21
     e60:	04 f7       	brge	.-64     	; 0xe22 <GetNDigitFromu32+0x76>
     e62:	d8 01       	movw	r26, r16
     e64:	a8 0f       	add	r26, r24
     e66:	b9 1f       	adc	r27, r25
     e68:	f7 01       	movw	r30, r14
     e6a:	e6 0f       	add	r30, r22
     e6c:	f1 1d       	adc	r31, r1
     e6e:	60 81       	ld	r22, Z
     e70:	6c 93       	st	X, r22
     e72:	2f 5f       	subi	r18, 0xFF	; 255
     e74:	ef cf       	rjmp	.-34     	; 0xe54 <GetNDigitFromu32+0xa8>

00000e76 <StoreBuffer>:
     e76:	46 2f       	mov	r20, r22
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	6a e0       	ldi	r22, 0x0A	; 10
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <eeprom_write_block>

00000e82 <RestoreBuffer>:
     e82:	46 2f       	mov	r20, r22
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	6a e0       	ldi	r22, 0x0A	; 10
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <eeprom_read_block>

00000e8e <StoreEnergyReading>:
     e8e:	46 2f       	mov	r20, r22
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	6e e1       	ldi	r22, 0x1E	; 30
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <eeprom_write_block>

00000e9a <ReStoreEnergyReading>:
     e9a:	46 2f       	mov	r20, r22
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	6e e1       	ldi	r22, 0x1E	; 30
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <eeprom_read_block>

00000ea6 <ReadRecordsAndTransmit>:
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	ec 01       	movw	r28, r24
     ebc:	41 97       	sbiw	r24, 0x11	; 17
     ebe:	64 f0       	brlt	.+24     	; 0xed8 <ReadRecordsAndTransmit+0x32>
     ec0:	78 94       	sei
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	08 95       	ret
     ed8:	db 01       	movw	r26, r22
     eda:	ca 01       	movw	r24, r20
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	a1 09       	sbc	r26, r1
     ee0:	b1 09       	sbc	r27, r1
     ee2:	8e 30       	cpi	r24, 0x0E	; 14
     ee4:	97 42       	sbci	r25, 0x27	; 39
     ee6:	a1 05       	cpc	r26, r1
     ee8:	b1 05       	cpc	r27, r1
     eea:	50 f7       	brcc	.-44     	; 0xec0 <ReadRecordsAndTransmit+0x1a>
     eec:	cb 01       	movw	r24, r22
     eee:	ba 01       	movw	r22, r20
     ef0:	f8 94       	cli
     ef2:	0e 94 18 11 	call	0x2230	; 0x2230 <SD_readSingleBlock>
     ef6:	8a e1       	ldi	r24, 0x1A	; 26
     ef8:	e8 2e       	mov	r14, r24
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	f8 2e       	mov	r15, r24
     efe:	00 e0       	ldi	r16, 0x00	; 0
     f00:	10 e0       	ldi	r17, 0x00	; 0
     f02:	97 e6       	ldi	r25, 0x67	; 103
     f04:	c9 2e       	mov	r12, r25
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	d9 2e       	mov	r13, r25
     f0a:	2b ee       	ldi	r18, 0xEB	; 235
     f0c:	a2 2e       	mov	r10, r18
     f0e:	22 e0       	ldi	r18, 0x02	; 2
     f10:	b2 2e       	mov	r11, r18
     f12:	0c 17       	cp	r16, r28
     f14:	1d 07       	cpc	r17, r29
     f16:	a0 f6       	brcc	.-88     	; 0xec0 <ReadRecordsAndTransmit+0x1a>
     f18:	8f e1       	ldi	r24, 0x1F	; 31
     f1a:	f7 01       	movw	r30, r14
     f1c:	a8 ea       	ldi	r26, 0xA8	; 168
     f1e:	b2 e0       	ldi	r27, 0x02	; 2
     f20:	01 90       	ld	r0, Z+
     f22:	0d 92       	st	X+, r0
     f24:	8a 95       	dec	r24
     f26:	e1 f7       	brne	.-8      	; 0xf20 <ReadRecordsAndTransmit+0x7a>
     f28:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <local_record+0x1e>
     f2c:	1f 92       	push	r1
     f2e:	8f 93       	push	r24
     f30:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <local_record+0x3>
     f34:	1f 92       	push	r1
     f36:	8f 93       	push	r24
     f38:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <local_record+0x4>
     f3c:	1f 92       	push	r1
     f3e:	8f 93       	push	r24
     f40:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <local_record+0x5>
     f44:	1f 92       	push	r1
     f46:	8f 93       	push	r24
     f48:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <local_record+0x2>
     f4c:	1f 92       	push	r1
     f4e:	8f 93       	push	r24
     f50:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <local_record+0x1>
     f54:	1f 92       	push	r1
     f56:	8f 93       	push	r24
     f58:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <local_record>
     f5c:	1f 92       	push	r1
     f5e:	8f 93       	push	r24
     f60:	df 92       	push	r13
     f62:	cf 92       	push	r12
     f64:	bf 92       	push	r11
     f66:	af 92       	push	r10
     f68:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
     f6c:	8b ee       	ldi	r24, 0xEB	; 235
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	8f e1       	ldi	r24, 0x1F	; 31
     f7a:	e8 0e       	add	r14, r24
     f7c:	f1 1c       	adc	r15, r1
     f7e:	8d b7       	in	r24, 0x3d	; 61
     f80:	9e b7       	in	r25, 0x3e	; 62
     f82:	42 96       	adiw	r24, 0x12	; 18
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	9e bf       	out	0x3e, r25	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	8d bf       	out	0x3d, r24	; 61
     f8e:	c1 cf       	rjmp	.-126    	; 0xf12 <ReadRecordsAndTransmit+0x6c>

00000f90 <ReadRecordsAndTransmitAll>:
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <ReadRecordsAndTransmitAll+0x16>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <ReadRecordsAndTransmitAll+0x18>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <ReadRecordsAndTransmitAll+0x1a>
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	80 90 10 03 	lds	r8, 0x0310	; 0x800310 <rtable+0x4>
     fb2:	90 90 11 03 	lds	r9, 0x0311	; 0x800311 <rtable+0x5>
     fb6:	a0 90 12 03 	lds	r10, 0x0312	; 0x800312 <rtable+0x6>
     fba:	b0 90 13 03 	lds	r11, 0x0313	; 0x800313 <rtable+0x7>
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	b6 94       	lsr	r11
     fc2:	a7 94       	ror	r10
     fc4:	97 94       	ror	r9
     fc6:	87 94       	ror	r8
     fc8:	8a 95       	dec	r24
     fca:	d1 f7       	brne	.-12     	; 0xfc0 <ReadRecordsAndTransmitAll+0x30>
     fcc:	c1 2c       	mov	r12, r1
     fce:	d1 2c       	mov	r13, r1
     fd0:	76 01       	movw	r14, r12
     fd2:	c8 14       	cp	r12, r8
     fd4:	d9 04       	cpc	r13, r9
     fd6:	ea 04       	cpc	r14, r10
     fd8:	fb 04       	cpc	r15, r11
     fda:	41 f1       	breq	.+80     	; 0x102c <ReadRecordsAndTransmitAll+0x9c>
     fdc:	44 e0       	ldi	r20, 0x04	; 4
     fde:	be 01       	movw	r22, r28
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	c6 01       	movw	r24, r12
     fe6:	0e 94 73 06 	call	0xce6	; 0xce6 <GetNDigitFromShort>
     fea:	8f e8       	ldi	r24, 0x8F	; 143
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
     ff2:	ce 01       	movw	r24, r28
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
     ffa:	8d ea       	ldi	r24, 0xAD	; 173
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
    1002:	b7 01       	movw	r22, r14
    1004:	a6 01       	movw	r20, r12
    1006:	8f e0       	ldi	r24, 0x0F	; 15
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 53 07 	call	0xea6	; 0xea6 <ReadRecordsAndTransmit>
    100e:	2f ef       	ldi	r18, 0xFF	; 255
    1010:	83 ec       	ldi	r24, 0xC3	; 195
    1012:	99 e0       	ldi	r25, 0x09	; 9
    1014:	21 50       	subi	r18, 0x01	; 1
    1016:	80 40       	sbci	r24, 0x00	; 0
    1018:	90 40       	sbci	r25, 0x00	; 0
    101a:	e1 f7       	brne	.-8      	; 0x1014 <ReadRecordsAndTransmitAll+0x84>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <ReadRecordsAndTransmitAll+0x8e>
    101e:	00 00       	nop
    1020:	2f ef       	ldi	r18, 0xFF	; 255
    1022:	c2 1a       	sub	r12, r18
    1024:	d2 0a       	sbc	r13, r18
    1026:	e2 0a       	sbc	r14, r18
    1028:	f2 0a       	sbc	r15, r18
    102a:	d3 cf       	rjmp	.-90     	; 0xfd2 <ReadRecordsAndTransmitAll+0x42>
    102c:	26 96       	adiw	r28, 0x06	; 6
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	08 95       	ret

0000104e <StoreRtable>:
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	2f e1       	ldi	r18, 0x1F	; 31
    1054:	fc 01       	movw	r30, r24
    1056:	e6 5e       	subi	r30, 0xE6	; 230
    1058:	fc 4f       	sbci	r31, 0xFC	; 252
    105a:	20 83       	st	Z, r18
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	81 15       	cp	r24, r1
    1060:	32 e0       	ldi	r19, 0x02	; 2
    1062:	93 07       	cpc	r25, r19
    1064:	b9 f7       	brne	.-18     	; 0x1054 <StoreRtable+0x6>
    1066:	8e e0       	ldi	r24, 0x0E	; 14
    1068:	ec e0       	ldi	r30, 0x0C	; 12
    106a:	f3 e0       	ldi	r31, 0x03	; 3
    106c:	aa e1       	ldi	r26, 0x1A	; 26
    106e:	b3 e0       	ldi	r27, 0x03	; 3
    1070:	01 90       	ld	r0, Z+
    1072:	0d 92       	st	X+, r0
    1074:	8a 95       	dec	r24
    1076:	e1 f7       	brne	.-8      	; 0x1070 <StoreRtable+0x22>
    1078:	f8 94       	cli
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	cb 01       	movw	r24, r22
    1080:	0e 94 45 11 	call	0x228a	; 0x228a <SD_writeSingleBlock>
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	91 ee       	ldi	r25, 0xE1	; 225
    1088:	24 e0       	ldi	r18, 0x04	; 4
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	90 40       	sbci	r25, 0x00	; 0
    108e:	20 40       	sbci	r18, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <StoreRtable+0x3c>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <StoreRtable+0x46>
    1094:	00 00       	nop
    1096:	78 94       	sei
    1098:	08 95       	ret

0000109a <ReadRtableAndTransmit>:
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	f8 94       	cli
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	cb 01       	movw	r24, r22
    10a6:	0e 94 18 11 	call	0x2230	; 0x2230 <SD_readSingleBlock>
    10aa:	2f ef       	ldi	r18, 0xFF	; 255
    10ac:	81 ee       	ldi	r24, 0xE1	; 225
    10ae:	94 e0       	ldi	r25, 0x04	; 4
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	80 40       	sbci	r24, 0x00	; 0
    10b4:	90 40       	sbci	r25, 0x00	; 0
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <ReadRtableAndTransmit+0x16>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <ReadRtableAndTransmit+0x20>
    10ba:	00 00       	nop
    10bc:	78 94       	sei
    10be:	cc e0       	ldi	r28, 0x0C	; 12
    10c0:	d3 e0       	ldi	r29, 0x03	; 3
    10c2:	8e e0       	ldi	r24, 0x0E	; 14
    10c4:	ea e1       	ldi	r30, 0x1A	; 26
    10c6:	f3 e0       	ldi	r31, 0x03	; 3
    10c8:	de 01       	movw	r26, r28
    10ca:	01 90       	ld	r0, Z+
    10cc:	0d 92       	st	X+, r0
    10ce:	8a 95       	dec	r24
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <ReadRtableAndTransmit+0x30>
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	8f 93       	push	r24
    10d6:	8e 81       	ldd	r24, Y+6	; 0x06
    10d8:	8f 93       	push	r24
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	8f 93       	push	r24
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	8f 93       	push	r24
    10e2:	80 eb       	ldi	r24, 0xB0	; 176
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	80 e9       	ldi	r24, 0x90	; 144
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
    10f6:	8d b7       	in	r24, 0x3d	; 61
    10f8:	9e b7       	in	r25, 0x3e	; 62
    10fa:	08 96       	adiw	r24, 0x08	; 8
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	9e bf       	out	0x3e, r25	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	8d bf       	out	0x3d, r24	; 61
    1106:	80 e9       	ldi	r24, 0x90	; 144
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <transmitString>

00001112 <ResetRecordCount>:
    1112:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <rtable+0x4>
    1116:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <rtable+0x5>
    111a:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <rtable+0x6>
    111e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <rtable+0x7>
    1122:	0c 94 27 08 	jmp	0x104e	; 0x104e <StoreRtable>

00001126 <GetLastUnit>:
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <GetLastUnit+0x6>
    112c:	00 d0       	rcall	.+0      	; 0x112e <GetLastUnit+0x8>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	19 82       	std	Y+1, r1	; 0x01
    1134:	1a 82       	std	Y+2, r1	; 0x02
    1136:	1b 82       	std	Y+3, r1	; 0x03
    1138:	1c 82       	std	Y+4, r1	; 0x04
    113a:	64 e0       	ldi	r22, 0x04	; 4
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	0e 94 4d 07 	call	0xe9a	; 0xe9a <ReStoreEnergyReading>
    1144:	69 81       	ldd	r22, Y+1	; 0x01
    1146:	7a 81       	ldd	r23, Y+2	; 0x02
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <UpdateEnergyCalculation>:
    115a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <UnitIntigratorTickInt>
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	09 f0       	breq	.+2      	; 0x1164 <UpdateEnergyCalculation+0xa>
    1162:	71 c0       	rjmp	.+226    	; 0x1246 <UpdateEnergyCalculation+0xec>
    1164:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <UnitIntigratorTickInt>
    1168:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <curr001>
    116c:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <curr001+0x1>
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	a8 f0       	brcs	.+42     	; 0x11a0 <UpdateEnergyCalculation+0x46>
    1176:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <volt001>
    117a:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <volt001+0x1>
    117e:	0e 94 10 13 	call	0x2620	; 0x2620 <__umulhisi3>
    1182:	24 e6       	ldi	r18, 0x64	; 100
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	0e 94 cf 12 	call	0x259e	; 0x259e <__udivmodsi4>
    118e:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <wattPerSec>
    1192:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <wattPerSec+0x1>
    1196:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <wattPerSec+0x2>
    119a:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <wattPerSec+0x3>
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <UpdateEnergyCalculation+0x56>
    11a0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <wattPerSec>
    11a4:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <wattPerSec+0x1>
    11a8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <wattPerSec+0x2>
    11ac:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <wattPerSec+0x3>
    11b0:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <wattPerSec>
    11b4:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <wattPerSec+0x1>
    11b8:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <wattPerSec+0x2>
    11bc:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <wattPerSec+0x3>
    11c0:	24 32       	cpi	r18, 0x24	; 36
    11c2:	31 05       	cpc	r19, r1
    11c4:	41 05       	cpc	r20, r1
    11c6:	51 05       	cpc	r21, r1
    11c8:	f0 f1       	brcs	.+124    	; 0x1246 <UpdateEnergyCalculation+0xec>
    11ca:	aa e0       	ldi	r26, 0x0A	; 10
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	0e 94 1f 13 	call	0x263e	; 0x263e <__muluhisi3>
    11d2:	24 e2       	ldi	r18, 0x24	; 36
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	0e 94 cf 12 	call	0x259e	; 0x259e <__udivmodsi4>
    11de:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <templ1+0x1>
    11e2:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <templ1>
    11e6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <PresentIntigratedMicroUnits>
    11ea:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <PresentIntigratedMicroUnits+0x1>
    11ee:	28 0f       	add	r18, r24
    11f0:	39 1f       	adc	r19, r25
    11f2:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <PresentIntigratedMicroUnits+0x1>
    11f6:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <PresentIntigratedMicroUnits>
    11fa:	21 31       	cpi	r18, 0x11	; 17
    11fc:	87 e2       	ldi	r24, 0x27	; 39
    11fe:	38 07       	cpc	r19, r24
    1200:	10 f1       	brcs	.+68     	; 0x1246 <UpdateEnergyCalculation+0xec>
    1202:	c9 01       	movw	r24, r18
    1204:	60 e1       	ldi	r22, 0x10	; 16
    1206:	77 e2       	ldi	r23, 0x27	; 39
    1208:	0e 94 bb 12 	call	0x2576	; 0x2576 <__udivmodhi4>
    120c:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <templ2+0x1>
    1210:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <templ2>
    1214:	40 ef       	ldi	r20, 0xF0	; 240
    1216:	58 ed       	ldi	r21, 0xD8	; 216
    1218:	64 9f       	mul	r22, r20
    121a:	c0 01       	movw	r24, r0
    121c:	65 9f       	mul	r22, r21
    121e:	90 0d       	add	r25, r0
    1220:	74 9f       	mul	r23, r20
    1222:	90 0d       	add	r25, r0
    1224:	11 24       	eor	r1, r1
    1226:	28 0f       	add	r18, r24
    1228:	39 1f       	adc	r19, r25
    122a:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <PresentIntigratedMicroUnits+0x1>
    122e:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <PresentIntigratedMicroUnits>
    1232:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <PresentIntigratedMiliUnits>
    1236:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    123a:	68 0f       	add	r22, r24
    123c:	79 1f       	adc	r23, r25
    123e:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1242:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <PresentIntigratedMiliUnits>
    1246:	08 95       	ret

00001248 <Interpret>:


int8_t Interpret(char *chstr, uint16_t size)
{
    1248:	2f 92       	push	r2
    124a:	3f 92       	push	r3
    124c:	4f 92       	push	r4
    124e:	5f 92       	push	r5
    1250:	6f 92       	push	r6
    1252:	7f 92       	push	r7
    1254:	8f 92       	push	r8
    1256:	9f 92       	push	r9
    1258:	af 92       	push	r10
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	c8 58       	subi	r28, 0x88	; 136
    1272:	d1 09       	sbc	r29, r1
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	2c 01       	movw	r4, r24
	uint16_t f_code = 0;
	uint16_t start_address = 0;
	uint16_t data_count = 0;
	uint16_t crcLocal=0;
	uint16_t crcRemote = 0;
	uint8_t  inData[25] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1280:	9e 01       	movw	r18, r28
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	59 01       	movw	r10, r18
    1288:	89 e1       	ldi	r24, 0x19	; 25
    128a:	d9 01       	movw	r26, r18
    128c:	1d 92       	st	X+, r1
    128e:	8a 95       	dec	r24
    1290:	e9 f7       	brne	.-6      	; 0x128c <Interpret+0x44>
		
	uint16_t crcTx = 0;
		
	char chDevId[5]={0,0,0,0,0};
    1292:	fe 01       	movw	r30, r28
    1294:	ea 58       	subi	r30, 0x8A	; 138
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	ef 96       	adiw	r28, 0x3f	; 63
    129a:	ff af       	std	Y+63, r31	; 0x3f
    129c:	ee af       	std	Y+62, r30	; 0x3e
    129e:	ef 97       	sbiw	r28, 0x3f	; 63
    12a0:	95 e0       	ldi	r25, 0x05	; 5
    12a2:	29 2f       	mov	r18, r25
    12a4:	11 92       	st	Z+, r1
    12a6:	2a 95       	dec	r18
    12a8:	e9 f7       	brne	.-6      	; 0x12a4 <Interpret+0x5c>
	char chFcode[5]={0,0,0,0,0};
    12aa:	3e 01       	movw	r6, r28
    12ac:	31 e7       	ldi	r19, 0x71	; 113
    12ae:	63 0e       	add	r6, r19
    12b0:	71 1c       	adc	r7, r1
    12b2:	d3 01       	movw	r26, r6
    12b4:	e9 2f       	mov	r30, r25
    12b6:	1d 92       	st	X+, r1
    12b8:	ea 95       	dec	r30
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <Interpret+0x6e>
	char chStartAddress[8]={0,0,0,0,0,0,0,0};
    12bc:	6e 01       	movw	r12, r28
    12be:	fe e5       	ldi	r31, 0x5E	; 94
    12c0:	cf 0e       	add	r12, r31
    12c2:	d1 1c       	adc	r13, r1
    12c4:	88 e0       	ldi	r24, 0x08	; 8
    12c6:	d6 01       	movw	r26, r12
    12c8:	e8 2f       	mov	r30, r24
    12ca:	1d 92       	st	X+, r1
    12cc:	ea 95       	dec	r30
    12ce:	e9 f7       	brne	.-6      	; 0x12ca <Interpret+0x82>
	char chDataCount[8]={0,0,0,0,0,0,0,0};
    12d0:	9e 01       	movw	r18, r28
    12d2:	2a 5a       	subi	r18, 0xAA	; 170
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	c1 58       	subi	r28, 0x81	; 129
    12d8:	df 4f       	sbci	r29, 0xFF	; 255
    12da:	39 83       	std	Y+1, r19	; 0x01
    12dc:	28 83       	st	Y, r18
    12de:	cf 57       	subi	r28, 0x7F	; 127
    12e0:	d0 40       	sbci	r29, 0x00	; 0
    12e2:	d9 01       	movw	r26, r18
    12e4:	1d 92       	st	X+, r1
    12e6:	8a 95       	dec	r24
    12e8:	e9 f7       	brne	.-6      	; 0x12e4 <Interpret+0x9c>
		
	char chDataNos[2]={0,0};
    12ea:	ec 96       	adiw	r28, 0x3c	; 60
    12ec:	1f ae       	std	Y+63, r1	; 0x3f
    12ee:	ec 97       	sbiw	r28, 0x3c	; 60
    12f0:	ed 96       	adiw	r28, 0x3d	; 61
    12f2:	1f ae       	std	Y+63, r1	; 0x3f
    12f4:	ed 97       	sbiw	r28, 0x3d	; 61
	uint8_t deci,unnit,licenseH=4,licenseL=210;
	char lisen[10]={0,0,0,0,0,0,0,0,0,0};
    12f6:	fe 01       	movw	r30, r28
    12f8:	e4 5b       	subi	r30, 0xB4	; 180
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	df 01       	movw	r26, r30
    1300:	28 2f       	mov	r18, r24
    1302:	1d 92       	st	X+, r1
    1304:	2a 95       	dec	r18
    1306:	e9 f7       	brne	.-6      	; 0x1302 <Interpret+0xba>
	uint16_t license=1234;
	
	char chNull[10]={0,0,0,0,0,0,0,0,0,0};
    1308:	1e 01       	movw	r2, r28
    130a:	32 e4       	ldi	r19, 0x42	; 66
    130c:	23 0e       	add	r2, r19
    130e:	31 1c       	adc	r3, r1
    1310:	d1 01       	movw	r26, r2
    1312:	e8 2f       	mov	r30, r24
    1314:	1d 92       	st	X+, r1
    1316:	ea 95       	dec	r30
    1318:	e9 f7       	brne	.-6      	; 0x1314 <Interpret+0xcc>
	char chCRC[10]={0,0,0,0,0,0,0,0,0,0};
    131a:	fe 01       	movw	r30, r28
    131c:	f8 96       	adiw	r30, 0x38	; 56
    131e:	df 01       	movw	r26, r30
    1320:	28 2f       	mov	r18, r24
    1322:	1d 92       	st	X+, r1
    1324:	2a 95       	dec	r18
    1326:	e9 f7       	brne	.-6      	; 0x1322 <Interpret+0xda>
	char chCRCremote[10]={0,0,0,0,0,0,0,0,0,0};
    1328:	7e 01       	movw	r14, r28
    132a:	3e e2       	ldi	r19, 0x2E	; 46
    132c:	e3 0e       	add	r14, r19
    132e:	f1 1c       	adc	r15, r1
    1330:	d7 01       	movw	r26, r14
    1332:	e8 2f       	mov	r30, r24
    1334:	1d 92       	st	X+, r1
    1336:	ea 95       	dec	r30
    1338:	e9 f7       	brne	.-6      	; 0x1334 <Interpret+0xec>
	char chByte01[5] = {0,0,0,0,0};
    133a:	fe 01       	movw	r30, r28
    133c:	e4 59       	subi	r30, 0x94	; 148
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	df 01       	movw	r26, r30
    1342:	1d 92       	st	X+, r1
    1344:	9a 95       	dec	r25
    1346:	e9 f7       	brne	.-6      	; 0x1342 <Interpret+0xfa>
	char chCRClocal[10] = {0,0,0,0,0,0,0,0,0,0};
    1348:	9e 01       	movw	r18, r28
    134a:	2c 5d       	subi	r18, 0xDC	; 220
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	cf 57       	subi	r28, 0x7F	; 127
    1350:	df 4f       	sbci	r29, 0xFF	; 255
    1352:	39 83       	std	Y+1, r19	; 0x01
    1354:	28 83       	st	Y, r18
    1356:	c1 58       	subi	r28, 0x81	; 129
    1358:	d0 40       	sbci	r29, 0x00	; 0
    135a:	d9 01       	movw	r26, r18
    135c:	28 2f       	mov	r18, r24
    135e:	1d 92       	st	X+, r1
    1360:	2a 95       	dec	r18
    1362:	e9 f7       	brne	.-6      	; 0x135e <Interpret+0x116>
	
	char chBattDigits[10]={0,0,0,0,0,0,0,0,0,0};
    1364:	9e 01       	movw	r18, r28
    1366:	26 5e       	subi	r18, 0xE6	; 230
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	d9 01       	movw	r26, r18
    136c:	1d 92       	st	X+, r1
    136e:	8a 95       	dec	r24
    1370:	e9 f7       	brne	.-6      	; 0x136c <Interpret+0x124>
	
	TIMESTAMP date_time;
	
	if (chstr[0] == ':')
    1372:	d2 01       	movw	r26, r4
    1374:	8c 91       	ld	r24, X
    1376:	8a 33       	cpi	r24, 0x3A	; 58
    1378:	09 f0       	breq	.+2      	; 0x137c <Interpret+0x134>
    137a:	61 c2       	rjmp	.+1218   	; 0x183e <Interpret+0x5f6>
	{
		if (size >= 17)
    137c:	61 31       	cpi	r22, 0x11	; 17
    137e:	71 05       	cpc	r23, r1
    1380:	08 f4       	brcc	.+2      	; 0x1384 <Interpret+0x13c>
    1382:	e7 c2       	rjmp	.+1486   	; 0x1952 <Interpret+0x70a>
    1384:	cc 57       	subi	r28, 0x7C	; 124
    1386:	df 4f       	sbci	r29, 0xFF	; 255
    1388:	b9 82       	std	Y+1, r11	; 0x01
    138a:	a8 82       	st	Y, r10
    138c:	c4 58       	subi	r28, 0x84	; 132
    138e:	d0 40       	sbci	r29, 0x00	; 0
    1390:	01 e0       	ldi	r16, 0x01	; 1
    1392:	10 e0       	ldi	r17, 0x00	; 0
		{
			
			for (local_idx=1; local_idx < (size-5); local_idx += 2)
    1394:	4b 01       	movw	r8, r22
    1396:	b5 e0       	ldi	r27, 0x05	; 5
    1398:	8b 1a       	sub	r8, r27
    139a:	91 08       	sbc	r9, r1
			{
				strncpy(chByte01, &chstr[local_idx], 2);
    139c:	cd 57       	subi	r28, 0x7D	; 125
    139e:	df 4f       	sbci	r29, 0xFF	; 255
    13a0:	e8 83       	st	Y, r30
    13a2:	c3 58       	subi	r28, 0x83	; 131
    13a4:	d0 40       	sbci	r29, 0x00	; 0
    13a6:	c8 57       	subi	r28, 0x78	; 120
    13a8:	df 4f       	sbci	r29, 0xFF	; 255
    13aa:	f8 83       	st	Y, r31
    13ac:	c8 58       	subi	r28, 0x88	; 136
    13ae:	d0 40       	sbci	r29, 0x00	; 0
    13b0:	b2 01       	movw	r22, r4
	if (chstr[0] == ':')
	{
		if (size >= 17)
		{
			
			for (local_idx=1; local_idx < (size-5); local_idx += 2)
    13b2:	08 15       	cp	r16, r8
    13b4:	19 05       	cpc	r17, r9
    13b6:	78 f5       	brcc	.+94     	; 0x1416 <Interpret+0x1ce>
			{
				strncpy(chByte01, &chstr[local_idx], 2);
    13b8:	60 0f       	add	r22, r16
    13ba:	71 1f       	adc	r23, r17
    13bc:	42 e0       	ldi	r20, 0x02	; 2
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	cd 57       	subi	r28, 0x7D	; 125
    13c2:	df 4f       	sbci	r29, 0xFF	; 255
    13c4:	88 81       	ld	r24, Y
    13c6:	c3 58       	subi	r28, 0x83	; 131
    13c8:	d0 40       	sbci	r29, 0x00	; 0
    13ca:	c8 57       	subi	r28, 0x78	; 120
    13cc:	df 4f       	sbci	r29, 0xFF	; 255
    13ce:	98 81       	ld	r25, Y
    13d0:	c8 58       	subi	r28, 0x88	; 136
    13d2:	d0 40       	sbci	r29, 0x00	; 0
    13d4:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
				inData[local_idx02] = (uint8_t)strtol(chByte01, &chNull, 16);
    13d8:	40 e1       	ldi	r20, 0x10	; 16
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	b1 01       	movw	r22, r2
    13de:	cd 57       	subi	r28, 0x7D	; 125
    13e0:	df 4f       	sbci	r29, 0xFF	; 255
    13e2:	88 81       	ld	r24, Y
    13e4:	c3 58       	subi	r28, 0x83	; 131
    13e6:	d0 40       	sbci	r29, 0x00	; 0
    13e8:	c8 57       	subi	r28, 0x78	; 120
    13ea:	df 4f       	sbci	r29, 0xFF	; 255
    13ec:	98 81       	ld	r25, Y
    13ee:	c8 58       	subi	r28, 0x88	; 136
    13f0:	d0 40       	sbci	r29, 0x00	; 0
    13f2:	0e 94 2a 13 	call	0x2654	; 0x2654 <strtol>
    13f6:	cc 57       	subi	r28, 0x7C	; 124
    13f8:	df 4f       	sbci	r29, 0xFF	; 255
    13fa:	e8 81       	ld	r30, Y
    13fc:	f9 81       	ldd	r31, Y+1	; 0x01
    13fe:	c4 58       	subi	r28, 0x84	; 132
    1400:	d0 40       	sbci	r29, 0x00	; 0
    1402:	61 93       	st	Z+, r22
    1404:	cc 57       	subi	r28, 0x7C	; 124
    1406:	df 4f       	sbci	r29, 0xFF	; 255
    1408:	f9 83       	std	Y+1, r31	; 0x01
    140a:	e8 83       	st	Y, r30
    140c:	c4 58       	subi	r28, 0x84	; 132
    140e:	d0 40       	sbci	r29, 0x00	; 0
	if (chstr[0] == ':')
	{
		if (size >= 17)
		{
			
			for (local_idx=1; local_idx < (size-5); local_idx += 2)
    1410:	0e 5f       	subi	r16, 0xFE	; 254
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	cd cf       	rjmp	.-102    	; 0x13b0 <Interpret+0x168>
				strncpy(chByte01, &chstr[local_idx], 2);
				inData[local_idx02] = (uint8_t)strtol(chByte01, &chNull, 16);
				local_idx02++;
			}
			
			strncpy(chCRCremote, &chstr[(size-5)], 4);
    1416:	68 0d       	add	r22, r8
    1418:	79 1d       	adc	r23, r9
    141a:	44 e0       	ldi	r20, 0x04	; 4
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	c7 01       	movw	r24, r14
    1420:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
			crcRemote = (uint16_t)strtol(chCRCremote, &chNull, 16);
    1424:	40 e1       	ldi	r20, 0x10	; 16
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	b1 01       	movw	r22, r2
    142a:	c7 01       	movw	r24, r14
    142c:	0e 94 2a 13 	call	0x2654	; 0x2654 <strtol>
			//crcRemote = ((crcRemote >> 8)|(crcRemote << 8));
			crcLocal = CRC16cal(inData, local_idx02);
    1430:	b4 01       	movw	r22, r8
    1432:	76 95       	lsr	r23
    1434:	67 95       	ror	r22
    1436:	c5 01       	movw	r24, r10
    1438:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CRC16cal>
			crcLocal = ((crcLocal >> 8)|(crcLocal << 8));
			
			sprintf(chCRClocal, "%04X", crcLocal);
    143c:	98 27       	eor	r25, r24
    143e:	89 27       	eor	r24, r25
    1440:	98 27       	eor	r25, r24
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	0a ed       	ldi	r16, 0xDA	; 218
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	1f 93       	push	r17
    144c:	0f 93       	push	r16
    144e:	ce 57       	subi	r28, 0x7E	; 126
    1450:	df 4f       	sbci	r29, 0xFF	; 255
    1452:	f8 81       	ld	r31, Y
    1454:	c2 58       	subi	r28, 0x82	; 130
    1456:	d0 40       	sbci	r29, 0x00	; 0
    1458:	ff 93       	push	r31
    145a:	cf 57       	subi	r28, 0x7F	; 127
    145c:	df 4f       	sbci	r29, 0xFF	; 255
    145e:	28 81       	ld	r18, Y
    1460:	c1 58       	subi	r28, 0x81	; 129
    1462:	d0 40       	sbci	r29, 0x00	; 0
    1464:	2f 93       	push	r18
    1466:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
			{
				lcdPrintData("N", 1);
				//return -2;
			}
*/			
			strncpy(chDevId, (const char*)&chstr[1], 2);
    146a:	42 e0       	ldi	r20, 0x02	; 2
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	b2 01       	movw	r22, r4
    1470:	6f 5f       	subi	r22, 0xFF	; 255
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	8a 58       	subi	r24, 0x8A	; 138
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
			dev_id = (uint16_t)strtol(chDevId, &chNull, 16);
    147e:	40 e1       	ldi	r20, 0x10	; 16
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	b1 01       	movw	r22, r2
    1484:	ce 01       	movw	r24, r28
    1486:	8a 58       	subi	r24, 0x8A	; 138
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	0e 94 2a 13 	call	0x2654	; 0x2654 <strtol>
    148e:	cc 57       	subi	r28, 0x7C	; 124
    1490:	df 4f       	sbci	r29, 0xFF	; 255
    1492:	68 83       	st	Y, r22
    1494:	79 83       	std	Y+1, r23	; 0x01
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	9b 83       	std	Y+3, r25	; 0x03
    149a:	c4 58       	subi	r28, 0x84	; 132
    149c:	d0 40       	sbci	r29, 0x00	; 0
			
			if (dev_id == 101)
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cc 57       	subi	r28, 0x7C	; 124
    14ac:	df 4f       	sbci	r29, 0xFF	; 255
    14ae:	88 81       	ld	r24, Y
    14b0:	99 81       	ldd	r25, Y+1	; 0x01
    14b2:	c4 58       	subi	r28, 0x84	; 132
    14b4:	d0 40       	sbci	r29, 0x00	; 0
    14b6:	85 36       	cpi	r24, 0x65	; 101
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f0       	breq	.+2      	; 0x14be <Interpret+0x276>
    14bc:	13 c2       	rjmp	.+1062   	; 0x18e4 <Interpret+0x69c>
			{
				strncpy(chFcode, (const char*)&chstr[3], 2);
    14be:	42 e0       	ldi	r20, 0x02	; 2
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	b2 01       	movw	r22, r4
    14c4:	6d 5f       	subi	r22, 0xFD	; 253
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	c3 01       	movw	r24, r6
    14ca:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
				f_code = (uint16_t)strtol(chFcode, &chNull, 16);
    14ce:	40 e1       	ldi	r20, 0x10	; 16
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	b1 01       	movw	r22, r2
    14d4:	c3 01       	movw	r24, r6
    14d6:	0e 94 2a 13 	call	0x2654	; 0x2654 <strtol>
    14da:	4b 01       	movw	r8, r22
    14dc:	5c 01       	movw	r10, r24
				
				if (f_code == 3)
    14de:	93 e0       	ldi	r25, 0x03	; 3
    14e0:	89 16       	cp	r8, r25
    14e2:	91 04       	cpc	r9, r1
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <Interpret+0x2a0>
    14e6:	fe c1       	rjmp	.+1020   	; 0x18e4 <Interpret+0x69c>
				{
					strncpy(chStartAddress, (const char*)&chstr[5], 4);
    14e8:	44 e0       	ldi	r20, 0x04	; 4
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	b2 01       	movw	r22, r4
    14ee:	6b 5f       	subi	r22, 0xFB	; 251
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	c6 01       	movw	r24, r12
    14f4:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
					start_address = (uint16_t)strtol(chStartAddress, &chNull, 16);
    14f8:	40 e1       	ldi	r20, 0x10	; 16
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	b1 01       	movw	r22, r2
    14fe:	c6 01       	movw	r24, r12
    1500:	0e 94 2a 13 	call	0x2654	; 0x2654 <strtol>
    1504:	6b 01       	movw	r12, r22
    1506:	7c 01       	movw	r14, r24
					
					if (start_address == 40001)
    1508:	61 34       	cpi	r22, 0x41	; 65
    150a:	7c 49       	sbci	r23, 0x9C	; 156
    150c:	09 f0       	breq	.+2      	; 0x1510 <Interpret+0x2c8>
    150e:	ea c1       	rjmp	.+980    	; 0x18e4 <Interpret+0x69c>
					{
						//ONLY 16 BIT ENERGY DATA WILL BE TRANSFERED.
						//strncpy(chDataCount, (const char*)&chstr[9], 4);						
						sprintf(chDataCount, "%04X", 1);
    1510:	1f 92       	push	r1
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8f 93       	push	r24
    1516:	1f 93       	push	r17
    1518:	0f 93       	push	r16
    151a:	c0 58       	subi	r28, 0x80	; 128
    151c:	df 4f       	sbci	r29, 0xFF	; 255
    151e:	b8 81       	ld	r27, Y
    1520:	c0 58       	subi	r28, 0x80	; 128
    1522:	d0 40       	sbci	r29, 0x00	; 0
    1524:	bf 93       	push	r27
    1526:	c1 58       	subi	r28, 0x81	; 129
    1528:	df 4f       	sbci	r29, 0xFF	; 255
    152a:	e8 81       	ld	r30, Y
    152c:	cf 57       	subi	r28, 0x7F	; 127
    152e:	d0 40       	sbci	r29, 0x00	; 0
    1530:	ef 93       	push	r30
    1532:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
						
						//data_count = 1; //(uint16_t)strtol(chDataCount, &chNull, 16);
						strncpy(chDataCount, (const char*)&chstr[9], 4);
    1536:	44 e0       	ldi	r20, 0x04	; 4
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	b2 01       	movw	r22, r4
    153c:	67 5f       	subi	r22, 0xF7	; 247
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	ce 01       	movw	r24, r28
    1542:	8a 5a       	subi	r24, 0xAA	; 170
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
						strncpy(chDataNos, (const char*)&chstr[11], 2);
    154a:	8e 01       	movw	r16, r28
    154c:	05 58       	subi	r16, 0x85	; 133
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	42 e0       	ldi	r20, 0x02	; 2
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	b2 01       	movw	r22, r4
    1556:	65 5f       	subi	r22, 0xF5	; 245
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	c8 01       	movw	r24, r16
    155c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strncpy>
						
						deci=chDataNos[0]-48;
						unnit=chDataNos[1]-48;
						
						chDataNos[1]=(unnit*2)+48;
    1560:	d8 01       	movw	r26, r16
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	8c 91       	ld	r24, X
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	88 0f       	add	r24, r24
    156a:	80 53       	subi	r24, 0x30	; 48
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	8c 93       	st	X, r24
						
						data_count = (uint16_t)strtol(chDataCount, &chNull, 16);
    1570:	40 e1       	ldi	r20, 0x10	; 16
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	b1 01       	movw	r22, r2
    1576:	ce 01       	movw	r24, r28
    1578:	8a 5a       	subi	r24, 0xAA	; 170
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	0e 94 2a 13 	call	0x2654	; 0x2654 <strtol>
    1580:	cd 57       	subi	r28, 0x7D	; 125
    1582:	df 4f       	sbci	r29, 0xFF	; 255
    1584:	68 83       	st	Y, r22
    1586:	c3 58       	subi	r28, 0x83	; 131
    1588:	d0 40       	sbci	r29, 0x00	; 0
    158a:	1b 01       	movw	r2, r22
						
						sprintf(chDataNos, "%02X", (data_count*2));
    158c:	cb 01       	movw	r24, r22
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	9f 93       	push	r25
    1594:	8f 93       	push	r24
    1596:	8f ed       	ldi	r24, 0xDF	; 223
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9f 93       	push	r25
    159c:	8f 93       	push	r24
    159e:	1f 93       	push	r17
    15a0:	0f 93       	push	r16
    15a2:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
						
						if (data_count <= 25)
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	fa e1       	ldi	r31, 0x1A	; 26
    15b2:	2f 16       	cp	r2, r31
    15b4:	31 04       	cpc	r3, r1
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <Interpret+0x372>
    15b8:	95 c1       	rjmp	.+810    	; 0x18e4 <Interpret+0x69c>
						{
							sbi(PORTD, PD3);
    15ba:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15bc:	2f ef       	ldi	r18, 0xFF	; 255
    15be:	31 ee       	ldi	r19, 0xE1	; 225
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	21 50       	subi	r18, 0x01	; 1
    15c4:	30 40       	sbci	r19, 0x00	; 0
    15c6:	80 40       	sbci	r24, 0x00	; 0
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <Interpret+0x37a>
    15ca:	00 c0       	rjmp	.+0      	; 0x15cc <Interpret+0x384>
    15cc:	00 00       	nop
							_delay_ms(100);
							
							ch_txData[0] = 0;
    15ce:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ch_txData>
							strncat(ch_txData, ":", 1);
    15d2:	61 e2       	ldi	r22, 0x21	; 33
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	84 e9       	ldi	r24, 0x94	; 148
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 50 14 	call	0x28a0	; 0x28a0 <strcat>
							strncat(ch_txData, chDevId, 2);
    15de:	42 e0       	ldi	r20, 0x02	; 2
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	be 01       	movw	r22, r28
    15e4:	6a 58       	subi	r22, 0x8A	; 138
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	84 e9       	ldi	r24, 0x94	; 148
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <strncat>
							strncat(ch_txData, chFcode, 2);
    15f0:	42 e0       	ldi	r20, 0x02	; 2
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	b3 01       	movw	r22, r6
    15f6:	84 e9       	ldi	r24, 0x94	; 148
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <strncat>
							//strncat(ch_txData, chStartAddress, 4);
							//strncat(ch_txData, chDataCount, 4);
							//strncat(ch_txData, chDataNos, 2);
							
							USART_TransmitString(ch_txData);
    15fe:	84 e9       	ldi	r24, 0x94	; 148
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 93 12 	call	0x2526	; 0x2526 <USART_TransmitString>
							
							ch_txData[0] = 0;
    1606:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ch_txData>
							strncat(ch_txData, chDataNos, 2);
    160a:	42 e0       	ldi	r20, 0x02	; 2
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	b8 01       	movw	r22, r16
    1610:	84 e9       	ldi	r24, 0x94	; 148
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <strncat>
							
							USART_TransmitString(ch_txData);
    1618:	84 e9       	ldi	r24, 0x94	; 148
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 93 12 	call	0x2526	; 0x2526 <USART_TransmitString>
							
							txDataNumBuffer[0] = dev_id;
    1620:	cc 57       	subi	r28, 0x7C	; 124
    1622:	df 4f       	sbci	r29, 0xFF	; 255
    1624:	98 81       	ld	r25, Y
    1626:	c4 58       	subi	r28, 0x84	; 132
    1628:	d0 40       	sbci	r29, 0x00	; 0
    162a:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <txDataNumBuffer>
							txDataNumBuffer[1] = f_code;
    162e:	80 92 2c 05 	sts	0x052C, r8	; 0x80052c <txDataNumBuffer+0x1>
							txDataNumBuffer[2] = (uint8_t)(start_address >> 8);
    1632:	8c e9       	ldi	r24, 0x9C	; 156
    1634:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <txDataNumBuffer+0x2>
							txDataNumBuffer[3] = (uint8_t)(start_address);
    1638:	c0 92 2e 05 	sts	0x052E, r12	; 0x80052e <txDataNumBuffer+0x3>
							txDataNumBuffer[4] = (uint8_t)(data_count >> 8);
    163c:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <txDataNumBuffer+0x4>
							txDataNumBuffer[5] = (uint8_t)(data_count);
    1640:	cd 57       	subi	r28, 0x7D	; 125
    1642:	df 4f       	sbci	r29, 0xFF	; 255
    1644:	a8 81       	ld	r26, Y
    1646:	c3 58       	subi	r28, 0x83	; 131
    1648:	d0 40       	sbci	r29, 0x00	; 0
    164a:	a0 93 30 05 	sts	0x0530, r26	; 0x800530 <txDataNumBuffer+0x5>
							
							local_idx02 = 6;
    164e:	06 e0       	ldi	r16, 0x06	; 6
    1650:	10 e0       	ldi	r17, 0x00	; 0
							
							for (local_idx=0;local_idx < data_count; local_idx++)
    1652:	a1 2c       	mov	r10, r1
    1654:	b1 2c       	mov	r11, r1
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(volt001);
									local_idx02++;
								}
								else if(local_idx==4){
									sprintf(chBattDigits, "%04X", curr001);
    1656:	3a ed       	ldi	r19, 0xDA	; 218
    1658:	c3 2e       	mov	r12, r19
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	d3 2e       	mov	r13, r19
    165e:	7e 01       	movw	r14, r28
    1660:	ba e1       	ldi	r27, 0x1A	; 26
    1662:	eb 0e       	add	r14, r27
    1664:	f1 1c       	adc	r15, r1
							txDataNumBuffer[4] = (uint8_t)(data_count >> 8);
							txDataNumBuffer[5] = (uint8_t)(data_count);
							
							local_idx02 = 6;
							
							for (local_idx=0;local_idx < data_count; local_idx++)
    1666:	a2 14       	cp	r10, r2
    1668:	b3 04       	cpc	r11, r3
    166a:	08 f0       	brcs	.+2      	; 0x166e <Interpret+0x426>
    166c:	a2 c0       	rjmp	.+324    	; 0x17b2 <Interpret+0x56a>
							{
								if(local_idx==0){
    166e:	a1 14       	cp	r10, r1
    1670:	b1 04       	cpc	r11, r1
    1672:	e9 f4       	brne	.+58     	; 0x16ae <Interpret+0x466>
									sprintf(chBattDigits, "%04X", (PresentIntigratedUnits >> 16));
    1674:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <PresentIntigratedUnits>
    1678:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <PresentIntigratedUnits+0x1>
    167c:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <PresentIntigratedUnits+0x2>
    1680:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <PresentIntigratedUnits+0x3>
    1684:	cd 01       	movw	r24, r26
    1686:	aa 27       	eor	r26, r26
    1688:	bb 27       	eor	r27, r27
    168a:	bf 93       	push	r27
    168c:	af 93       	push	r26
    168e:	9f 93       	push	r25
    1690:	8f 93       	push	r24
    1692:	df 92       	push	r13
    1694:	cf 92       	push	r12
    1696:	ff 92       	push	r15
    1698:	ef 92       	push	r14
    169a:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
									transmitString(chBattDigits);
    169e:	c7 01       	movw	r24, r14
    16a0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
									txDataNumBuffer[local_idx02] = (uint8_t)(PresentIntigratedUnits >> 24);
    16a4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <PresentIntigratedUnits+0x2>
    16a8:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <PresentIntigratedUnits+0x3>
    16ac:	1d c0       	rjmp	.+58     	; 0x16e8 <Interpret+0x4a0>
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(PresentIntigratedUnits >> 16);
									local_idx02++;
								}
								else if(local_idx==1){
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	af 16       	cp	r10, r31
    16b2:	b1 04       	cpc	r11, r1
    16b4:	31 f5       	brne	.+76     	; 0x1702 <Interpret+0x4ba>
									sprintf(chBattDigits, "%04X", PresentIntigratedUnits);
    16b6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <PresentIntigratedUnits+0x3>
    16ba:	8f 93       	push	r24
    16bc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <PresentIntigratedUnits+0x2>
    16c0:	8f 93       	push	r24
    16c2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <PresentIntigratedUnits+0x1>
    16c6:	8f 93       	push	r24
    16c8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <PresentIntigratedUnits>
    16cc:	8f 93       	push	r24
    16ce:	df 92       	push	r13
    16d0:	cf 92       	push	r12
    16d2:	ff 92       	push	r15
    16d4:	ef 92       	push	r14
    16d6:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
									transmitString(chBattDigits);
    16da:	c7 01       	movw	r24, r14
    16dc:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
									txDataNumBuffer[local_idx02] = (uint8_t)(PresentIntigratedUnits >> 8);
    16e0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <PresentIntigratedUnits>
    16e4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <PresentIntigratedUnits+0x1>
    16e8:	f8 01       	movw	r30, r16
    16ea:	e5 5d       	subi	r30, 0xD5	; 213
    16ec:	fa 4f       	sbci	r31, 0xFA	; 250
    16ee:	90 83       	st	Z, r25
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(PresentIntigratedUnits);
    16f0:	81 83       	std	Z+1, r24	; 0x01
									local_idx02++;
    16f2:	0e 5f       	subi	r16, 0xFE	; 254
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	54 c0       	rjmp	.+168    	; 0x17aa <Interpret+0x562>
								}
								else if(local_idx==2){
    1702:	32 e0       	ldi	r19, 0x02	; 2
    1704:	a3 16       	cp	r10, r19
    1706:	b1 04       	cpc	r11, r1
    1708:	a1 f4       	brne	.+40     	; 0x1732 <Interpret+0x4ea>
									sprintf(chBattDigits, "%04X", PresentIntigratedMiliUnits);
    170a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    170e:	8f 93       	push	r24
    1710:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <PresentIntigratedMiliUnits>
    1714:	8f 93       	push	r24
    1716:	df 92       	push	r13
    1718:	cf 92       	push	r12
    171a:	ff 92       	push	r15
    171c:	ef 92       	push	r14
    171e:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
									transmitString(chBattDigits);
    1722:	c7 01       	movw	r24, r14
    1724:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
									txDataNumBuffer[local_idx02] = (uint8_t)(PresentIntigratedMiliUnits >> 8);
    1728:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <PresentIntigratedMiliUnits>
    172c:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1730:	2f c0       	rjmp	.+94     	; 0x1790 <Interpret+0x548>
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(PresentIntigratedMiliUnits);
									local_idx02++;
								}
								else if(local_idx==3){
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	a8 16       	cp	r10, r24
    1736:	b1 04       	cpc	r11, r1
    1738:	a1 f4       	brne	.+40     	; 0x1762 <Interpret+0x51a>
									sprintf(chBattDigits, "%04X", volt001);
    173a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <volt001+0x1>
    173e:	8f 93       	push	r24
    1740:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <volt001>
    1744:	8f 93       	push	r24
    1746:	df 92       	push	r13
    1748:	cf 92       	push	r12
    174a:	ff 92       	push	r15
    174c:	ef 92       	push	r14
    174e:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
									transmitString(chBattDigits);
    1752:	c7 01       	movw	r24, r14
    1754:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
									txDataNumBuffer[local_idx02] = (uint8_t)(volt001 >> 8);
    1758:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <volt001>
    175c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <volt001+0x1>
    1760:	17 c0       	rjmp	.+46     	; 0x1790 <Interpret+0x548>
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(volt001);
									local_idx02++;
								}
								else if(local_idx==4){
    1762:	94 e0       	ldi	r25, 0x04	; 4
    1764:	a9 16       	cp	r10, r25
    1766:	b1 04       	cpc	r11, r1
    1768:	01 f5       	brne	.+64     	; 0x17aa <Interpret+0x562>
									sprintf(chBattDigits, "%04X", curr001);
    176a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <curr001+0x1>
    176e:	8f 93       	push	r24
    1770:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <curr001>
    1774:	8f 93       	push	r24
    1776:	df 92       	push	r13
    1778:	cf 92       	push	r12
    177a:	ff 92       	push	r15
    177c:	ef 92       	push	r14
    177e:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
									transmitString(chBattDigits);
    1782:	c7 01       	movw	r24, r14
    1784:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
									txDataNumBuffer[local_idx02] = (uint8_t)(curr001 >> 8);
    1788:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <curr001>
    178c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <curr001+0x1>
    1790:	f8 01       	movw	r30, r16
    1792:	e5 5d       	subi	r30, 0xD5	; 213
    1794:	fa 4f       	sbci	r31, 0xFA	; 250
    1796:	90 83       	st	Z, r25
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(curr001);
    1798:	81 83       	std	Z+1, r24	; 0x01
									local_idx02++;
    179a:	0e 5f       	subi	r16, 0xFE	; 254
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
							txDataNumBuffer[4] = (uint8_t)(data_count >> 8);
							txDataNumBuffer[5] = (uint8_t)(data_count);
							
							local_idx02 = 6;
							
							for (local_idx=0;local_idx < data_count; local_idx++)
    17aa:	af ef       	ldi	r26, 0xFF	; 255
    17ac:	aa 1a       	sub	r10, r26
    17ae:	ba 0a       	sbc	r11, r26
    17b0:	5a cf       	rjmp	.-332    	; 0x1666 <Interpret+0x41e>
									local_idx02++;
									txDataNumBuffer[local_idx02] = (uint8_t)(curr001);
									local_idx02++;
								}	
							}
							txDataNumBuffer[local_idx02] = (uint8_t)(licenseH); local_idx02=local_idx02+1;
    17b2:	f8 01       	movw	r30, r16
    17b4:	e5 5d       	subi	r30, 0xD5	; 213
    17b6:	fa 4f       	sbci	r31, 0xFA	; 250
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	c8 2e       	mov	r12, r24
    17bc:	c0 82       	st	Z, r12
							txDataNumBuffer[local_idx02] = (uint8_t)(licenseL); local_idx02=local_idx02+1;
    17be:	92 ed       	ldi	r25, 0xD2	; 210
    17c0:	d9 2e       	mov	r13, r25
    17c2:	d1 82       	std	Z+1, r13	; 0x01
							
							crcTx = CRC16cal(txDataNumBuffer, local_idx02);
    17c4:	b8 01       	movw	r22, r16
    17c6:	6e 5f       	subi	r22, 0xFE	; 254
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8b e2       	ldi	r24, 0x2B	; 43
    17cc:	95 e0       	ldi	r25, 0x05	; 5
    17ce:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CRC16cal>
							crcTx = ((crcTx >> 8)|(crcTx << 8));
							sprintf(chCRC, "%04X", crcTx);
    17d2:	98 27       	eor	r25, r24
    17d4:	89 27       	eor	r24, r25
    17d6:	98 27       	eor	r25, r24
    17d8:	9f 93       	push	r25
    17da:	8f 93       	push	r24
    17dc:	0a ed       	ldi	r16, 0xDA	; 218
    17de:	10 e0       	ldi	r17, 0x00	; 0
    17e0:	1f 93       	push	r17
    17e2:	0f 93       	push	r16
    17e4:	7e 01       	movw	r14, r28
    17e6:	b8 e3       	ldi	r27, 0x38	; 56
    17e8:	eb 0e       	add	r14, r27
    17ea:	f1 1c       	adc	r15, r1
    17ec:	ff 92       	push	r15
    17ee:	ef 92       	push	r14
    17f0:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
							//GetNDigitFromShort(0x8ACB, chCRC, 4);
							sprintf(lisen, "%04X", license);
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	1f 93       	push	r17
    17fa:	0f 93       	push	r16
    17fc:	8e 01       	movw	r16, r28
    17fe:	04 5b       	subi	r16, 0xB4	; 180
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	1f 93       	push	r17
    1804:	0f 93       	push	r16
    1806:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
							transmitString(lisen);
    180a:	c8 01       	movw	r24, r16
    180c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
							transmitString(chCRC);
    1810:	c7 01       	movw	r24, r14
    1812:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
							transmitString("\r\n");
    1816:	8d ea       	ldi	r24, 0xAD	; 173
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <transmitString>
    181e:	ef ef       	ldi	r30, 0xFF	; 255
    1820:	f1 ee       	ldi	r31, 0xE1	; 225
    1822:	24 e0       	ldi	r18, 0x04	; 4
    1824:	e1 50       	subi	r30, 0x01	; 1
    1826:	f0 40       	sbci	r31, 0x00	; 0
    1828:	20 40       	sbci	r18, 0x00	; 0
    182a:	e1 f7       	brne	.-8      	; 0x1824 <Interpret+0x5dc>
    182c:	00 c0       	rjmp	.+0      	; 0x182e <Interpret+0x5e6>
    182e:	00 00       	nop
							
							
							_delay_ms(100);
							cbi(PORTD, PD3);
    1830:	93 98       	cbi	0x12, 3	; 18
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	53 c0       	rjmp	.+166    	; 0x18e4 <Interpret+0x69c>
				}
				
			}
		}
	}
	else if (chstr[0] == 101)
    183e:	85 36       	cpi	r24, 0x65	; 101
    1840:	c9 f4       	brne	.+50     	; 0x1874 <Interpret+0x62c>
	{
		if (size == 9)
    1842:	69 30       	cpi	r22, 0x09	; 9
    1844:	71 05       	cpc	r23, r1
    1846:	09 f0       	breq	.+2      	; 0x184a <Interpret+0x602>
    1848:	84 c0       	rjmp	.+264    	; 0x1952 <Interpret+0x70a>
		{
			date_time.hour = chstr[1];
    184a:	d2 01       	movw	r26, r4
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	4c 91       	ld	r20, X
    1850:	11 97       	sbiw	r26, 0x01	; 1
			date_time.min = chstr[2];
    1852:	12 96       	adiw	r26, 0x02	; 2
    1854:	5c 91       	ld	r21, X
    1856:	12 97       	sbiw	r26, 0x02	; 2
			date_time.sec = chstr[3];
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	6c 91       	ld	r22, X
    185c:	13 97       	sbiw	r26, 0x03	; 3
			date_time.day = chstr[4];
			date_time.month = chstr[5];
			date_time.year = chstr[6];
    185e:	16 96       	adiw	r26, 0x06	; 6
    1860:	7c 91       	ld	r23, X
    1862:	16 97       	sbiw	r26, 0x06	; 6
			SetupClock(date_time);
    1864:	15 96       	adiw	r26, 0x05	; 5
    1866:	8c 91       	ld	r24, X
    1868:	15 97       	sbiw	r26, 0x05	; 5
    186a:	14 96       	adiw	r26, 0x04	; 4
    186c:	9c 91       	ld	r25, X
    186e:	0e 94 0f 10 	call	0x201e	; 0x201e <SetupClock>
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <Interpret+0x63c>
			return 1;
		}
	}
	else if (chstr[0] == 121)
    1874:	89 37       	cpi	r24, 0x79	; 121
    1876:	41 f4       	brne	.+16     	; 0x1888 <Interpret+0x640>
	{
		if (size == 3)
    1878:	63 30       	cpi	r22, 0x03	; 3
    187a:	71 05       	cpc	r23, r1
    187c:	09 f0       	breq	.+2      	; 0x1880 <Interpret+0x638>
    187e:	69 c0       	rjmp	.+210    	; 0x1952 <Interpret+0x70a>
		{
			//findFiles(GET_LIST, 0);
			ReadRtableAndTransmit();
    1880:	0e 94 4d 08 	call	0x109a	; 0x109a <ReadRtableAndTransmit>
			return 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	66 c0       	rjmp	.+204    	; 0x1954 <Interpret+0x70c>
		}
	}
	else if (chstr[0] == 123)
    1888:	8b 37       	cpi	r24, 0x7B	; 123
    188a:	59 f4       	brne	.+22     	; 0x18a2 <Interpret+0x65a>
	{
		if (size == 3)
    188c:	63 30       	cpi	r22, 0x03	; 3
    188e:	71 05       	cpc	r23, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <Interpret+0x64c>
    1892:	5f c0       	rjmp	.+190    	; 0x1952 <Interpret+0x70a>
		{
			setting.DataLoggingEnable = YES;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <setting+0x5>
    189c:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <setting+0x4>
			return 1;
    18a0:	59 c0       	rjmp	.+178    	; 0x1954 <Interpret+0x70c>
		}
	}
	else if (chstr[0] == 122)
    18a2:	8a 37       	cpi	r24, 0x7A	; 122
    18a4:	69 f4       	brne	.+26     	; 0x18c0 <Interpret+0x678>
	{
		if (size==3)
    18a6:	63 30       	cpi	r22, 0x03	; 3
    18a8:	71 05       	cpc	r23, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <Interpret+0x666>
    18ac:	52 c0       	rjmp	.+164    	; 0x1952 <Interpret+0x70a>
		{
			ReadRecordsAndTransmit(15, 1UL);
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	8f e0       	ldi	r24, 0x0F	; 15
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 53 07 	call	0xea6	; 0xea6 <ReadRecordsAndTransmit>
    18be:	e2 cf       	rjmp	.-60     	; 0x1884 <Interpret+0x63c>
			return 1;
		}
	}
	else if (chstr[0]==124)
    18c0:	8c 37       	cpi	r24, 0x7C	; 124
    18c2:	39 f4       	brne	.+14     	; 0x18d2 <Interpret+0x68a>
	{
		if (size==3)
    18c4:	63 30       	cpi	r22, 0x03	; 3
    18c6:	71 05       	cpc	r23, r1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <Interpret+0x684>
    18ca:	43 c0       	rjmp	.+134    	; 0x1952 <Interpret+0x70a>
		{
			ResetRecordCount();
    18cc:	0e 94 89 08 	call	0x1112	; 0x1112 <ResetRecordCount>
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <Interpret+0x69c>
		}
	}
	else if (chstr[0]==125)
    18d2:	8d 37       	cpi	r24, 0x7D	; 125
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <Interpret+0x69c>
	{
		if (size==3)
    18d6:	63 30       	cpi	r22, 0x03	; 3
    18d8:	71 05       	cpc	r23, r1
    18da:	d9 f5       	brne	.+118    	; 0x1952 <Interpret+0x70a>
		{
			setting.DataLoggingEnable = NO;
    18dc:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <setting+0x5>
    18e0:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <setting+0x4>
		if (size==3)
		{
			//memoryStatistics();
		}
	}
	if (chstr[0]==127)
    18e4:	f2 01       	movw	r30, r4
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 37       	cpi	r24, 0x7F	; 127
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <Interpret+0x6ae>
	{
		ReadRecordsAndTransmit(15, 2UL);
    18ec:	42 e0       	ldi	r20, 0x02	; 2
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <Interpret+0x6ba>
	}
	else if (chstr[0]==128)
    18f6:	80 38       	cpi	r24, 0x80	; 128
    18f8:	49 f4       	brne	.+18     	; 0x190c <Interpret+0x6c4>
	{
		ReadRecordsAndTransmit(15, 3UL);
    18fa:	43 e0       	ldi	r20, 0x03	; 3
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	8f e0       	ldi	r24, 0x0F	; 15
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 53 07 	call	0xea6	; 0xea6 <ReadRecordsAndTransmit>
    190a:	23 c0       	rjmp	.+70     	; 0x1952 <Interpret+0x70a>
	}
	else if (chstr[0]==132)
    190c:	84 38       	cpi	r24, 0x84	; 132
    190e:	51 f4       	brne	.+20     	; 0x1924 <Interpret+0x6dc>
	{
		SD_erase(0UL, 10);
    1910:	2a e0       	ldi	r18, 0x0A	; 10
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	cb 01       	movw	r24, r22
    191e:	0e 94 df 10 	call	0x21be	; 0x21be <SD_erase>
    1922:	17 c0       	rjmp	.+46     	; 0x1952 <Interpret+0x70a>
	}
	else if (chstr[0]==129)
    1924:	81 38       	cpi	r24, 0x81	; 129
    1926:	19 f4       	brne	.+6      	; 0x192e <Interpret+0x6e6>
	{
		ReadRecordsAndTransmitAll();
    1928:	0e 94 c8 07 	call	0xf90	; 0xf90 <ReadRecordsAndTransmitAll>
    192c:	12 c0       	rjmp	.+36     	; 0x1952 <Interpret+0x70a>
	}
	else if (chstr[0]==134)
    192e:	86 38       	cpi	r24, 0x86	; 134
    1930:	61 f4       	brne	.+24     	; 0x194a <Interpret+0x702>
	{
		strcpy_P(buffer, PSTR("data set for writting to the sd card single sector"));
    1932:	64 e5       	ldi	r22, 0x54	; 84
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	8a e1       	ldi	r24, 0x1A	; 26
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 49 14 	call	0x2892	; 0x2892 <strcpy_P>
		SD_writeSingleBlock(0UL);
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	cb 01       	movw	r24, r22
    1944:	0e 94 45 11 	call	0x228a	; 0x228a <SD_writeSingleBlock>
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <Interpret+0x70a>
	}
	else if (chstr[0] == 55)
    194a:	87 33       	cpi	r24, 0x37	; 55
    194c:	11 f4       	brne	.+4      	; 0x1952 <Interpret+0x70a>
	{
		while (1)
		{
			asm volatile ("nop\n");
    194e:	00 00       	nop
    1950:	fe cf       	rjmp	.-4      	; 0x194e <Interpret+0x706>
		}
	}
	
	return -1;
    1952:	8f ef       	ldi	r24, 0xFF	; 255
}
    1954:	c8 57       	subi	r28, 0x78	; 120
    1956:	df 4f       	sbci	r29, 0xFF	; 255
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	9f 90       	pop	r9
    1978:	8f 90       	pop	r8
    197a:	7f 90       	pop	r7
    197c:	6f 90       	pop	r6
    197e:	5f 90       	pop	r5
    1980:	4f 90       	pop	r4
    1982:	3f 90       	pop	r3
    1984:	2f 90       	pop	r2
    1986:	08 95       	ret

00001988 <main>:

//*************************** MAIN *******************************//
int main(void)
{
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	6b 97       	sbiw	r28, 0x1b	; 27
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	2f ef       	ldi	r18, 0xFF	; 255
    199e:	81 ee       	ldi	r24, 0xE1	; 225
    19a0:	94 e0       	ldi	r25, 0x04	; 4
    19a2:	21 50       	subi	r18, 0x01	; 1
    19a4:	80 40       	sbci	r24, 0x00	; 0
    19a6:	90 40       	sbci	r25, 0x00	; 0
    19a8:	e1 f7       	brne	.-8      	; 0x19a2 <main+0x1a>
    19aa:	00 c0       	rjmp	.+0      	; 0x19ac <main+0x24>
    19ac:	00 00       	nop
	
	uint8_t localidx001=0;

	_delay_ms(100);  //delay for VCC stabilization

	init_devices();
    19ae:	0e 94 b9 05 	call	0xb72	; 0xb72 <init_devices>
	
	MCP_GPIO_Init();
    19b2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <MCP_GPIO_Init>
	
	USART_Init(baud);
    19b6:	87 e6       	ldi	r24, 0x67	; 103
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 48 12 	call	0x2490	; 0x2490 <USART_Init>

	cardType = 0;
    19be:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <cardType>

	lcdInit();
    19c2:	0e 94 69 05 	call	0xad2	; 0xad2 <lcdInit>
	delay_ms(10);
    19c6:	8a e0       	ldi	r24, 0x0A	; 10
    19c8:	0e 94 56 04 	call	0x8ac	; 0x8ac <delay_ms>
	////<MOD>CheckFaultSetting();
	////<MOD>GetLoopedSettings(&setting);
	SetupAdc(ADC_MODE_NOMRAL_FREE);
    19cc:	85 e6       	ldi	r24, 0x65	; 101
    19ce:	0e 94 63 00 	call	0xc6	; 0xc6 <SetupAdc>
	StartAdc();
    19d2:	0e 94 6e 00 	call	0xdc	; 0xdc <StartAdc>
	lcdGotoXY(0,0);
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 95 05 	call	0xb2a	; 0xb2a <lcdGotoXY>
	lcdPrintData("DIGITIZE 0x00 ......", 20);
    19de:	64 e1       	ldi	r22, 0x14	; 20
    19e0:	84 ee       	ldi	r24, 0xE4	; 228
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
		
	INIT_IO;
    19e8:	d4 98       	cbi	0x1a, 4	; 26
    19ea:	dc 9a       	sbi	0x1b, 4	; 27
    19ec:	d5 98       	cbi	0x1a, 5	; 26
    19ee:	dd 9a       	sbi	0x1b, 5	; 27
    19f0:	d6 98       	cbi	0x1a, 6	; 26
    19f2:	de 9a       	sbi	0x1b, 6	; 27
    19f4:	d7 98       	cbi	0x1a, 7	; 26
    19f6:	df 9a       	sbi	0x1b, 7	; 27
    19f8:	c4 98       	cbi	0x18, 4	; 24
    19fa:	bc 9a       	sbi	0x17, 4	; 23
    19fc:	c5 9a       	sbi	0x18, 5	; 24
    19fe:	bd 9a       	sbi	0x17, 5	; 23
    1a00:	c6 9a       	sbi	0x18, 6	; 24
    1a02:	be 98       	cbi	0x17, 6	; 23
    1a04:	c7 9a       	sbi	0x18, 7	; 24
    1a06:	bf 9a       	sbi	0x17, 7	; 23
    1a08:	ba 98       	cbi	0x17, 2	; 23
    1a0a:	c2 9a       	sbi	0x18, 2	; 24
    1a0c:	bb 98       	cbi	0x17, 3	; 23
    1a0e:	c3 9a       	sbi	0x18, 3	; 24
    1a10:	93 98       	cbi	0x12, 3	; 18
    1a12:	8b 9a       	sbi	0x11, 3	; 17
	
	TIMESTAMP date_time;
		
	RestoreBuffer((unsigned char*)&calibvalues, sizeof(CALIBVALUES));
    1a14:	66 e0       	ldi	r22, 0x06	; 6
    1a16:	83 e7       	ldi	r24, 0x73	; 115
    1a18:	95 e0       	ldi	r25, 0x05	; 5
    1a1a:	0e 94 41 07 	call	0xe82	; 0xe82 <RestoreBuffer>
	
	if (calibvalues.calib_volt_001 >= 0XAAAA)
    1a1e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <calibvalues>
    1a22:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <calibvalues+0x1>
    1a26:	8a 3a       	cpi	r24, 0xAA	; 170
    1a28:	9a 4a       	sbci	r25, 0xAA	; 170
    1a2a:	b8 f0       	brcs	.+46     	; 0x1a5a <main+0xd2>
	{
		calibvalues.calib_volt_001 = 472;
    1a2c:	88 ed       	ldi	r24, 0xD8	; 216
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <calibvalues+0x1>
    1a34:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <calibvalues>
		calibvalues.calib_curr_001 = 818;
    1a38:	82 e3       	ldi	r24, 0x32	; 50
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <calibvalues+0x3>
    1a40:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <calibvalues+0x2>
		calibvalues.curr_adc_offset001 = 2033;//2044
    1a44:	81 ef       	ldi	r24, 0xF1	; 241
    1a46:	97 e0       	ldi	r25, 0x07	; 7
    1a48:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <calibvalues+0x5>
    1a4c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <calibvalues+0x4>
		StoreBuffer((unsigned char*)&calibvalues, sizeof(CALIBVALUES));
    1a50:	66 e0       	ldi	r22, 0x06	; 6
    1a52:	83 e7       	ldi	r24, 0x73	; 115
    1a54:	95 e0       	ldi	r25, 0x05	; 5
    1a56:	0e 94 3b 07 	call	0xe76	; 0xe76 <StoreBuffer>
	}
	
	PresentIntigratedUnits = GetLastUnit();
    1a5a:	0e 94 93 08 	call	0x1126	; 0x1126 <GetLastUnit>
    1a5e:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <PresentIntigratedUnits>
    1a62:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <PresentIntigratedUnits+0x1>
    1a66:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <PresentIntigratedUnits+0x2>
    1a6a:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <PresentIntigratedUnits+0x3>

	if(PresentIntigratedUnits > 0xAAAAFFFF)
    1a6e:	61 15       	cp	r22, r1
    1a70:	71 05       	cpc	r23, r1
    1a72:	8b 4a       	sbci	r24, 0xAB	; 171
    1a74:	9a 4a       	sbci	r25, 0xAA	; 170
    1a76:	40 f0       	brcs	.+16     	; 0x1a88 <main+0x100>
	{
		PresentIntigratedUnits = 0;
    1a78:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <PresentIntigratedUnits>
    1a7c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <PresentIntigratedUnits+0x1>
    1a80:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <PresentIntigratedUnits+0x2>
    1a84:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <PresentIntigratedUnits+0x3>
	}
	
	PresentIntigratedMiliUnits = eeprom_read_word((const uint16_t*)40);
    1a88:	88 e2       	ldi	r24, 0x28	; 40
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 75 17 	call	0x2eea	; 0x2eea <eeprom_read_word>
    1a90:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1a94:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <PresentIntigratedMiliUnits>
	
	if (PresentIntigratedMiliUnits > 0xAAAA)
    1a98:	8b 3a       	cpi	r24, 0xAB	; 171
    1a9a:	9a 4a       	sbci	r25, 0xAA	; 170
    1a9c:	20 f0       	brcs	.+8      	; 0x1aa6 <main+0x11e>
	{
		PresentIntigratedMiliUnits = 0;
    1a9e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1aa2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <PresentIntigratedMiliUnits>
	}
		
	sei();
    1aa6:	78 94       	sei
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    1aa8:	9f e0       	ldi	r25, 0x0F	; 15
    1aaa:	88 e1       	ldi	r24, 0x18	; 24
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	a8 95       	wdr
    1ab2:	81 bd       	out	0x21, r24	; 33
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	91 bd       	out	0x21, r25	; 33
	
	wdt_enable(WDTO_2S);
	
	lcdClear();
    1ab8:	0e 94 92 05 	call	0xb24	; 0xb24 <lcdClear>
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	99 ef       	ldi	r25, 0xF9	; 249
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	81 50       	subi	r24, 0x01	; 1
    1ac4:	90 40       	sbci	r25, 0x00	; 0
    1ac6:	20 40       	sbci	r18, 0x00	; 0
    1ac8:	e1 f7       	brne	.-8      	; 0x1ac2 <main+0x13a>
    1aca:	00 c0       	rjmp	.+0      	; 0x1acc <main+0x144>
    1acc:	00 00       	nop
		lcdGotoXY(0,1);
		lcdPrintData("I-FAC:", 6);
		lcdPrintData(chnum02, 4);
		*/
		_delay_ms(20);
		wdt_reset();
    1ace:	a8 95       	wdr
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	99 ef       	ldi	r25, 0xF9	; 249
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	90 40       	sbci	r25, 0x00	; 0
    1ada:	20 40       	sbci	r18, 0x00	; 0
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <main+0x14e>
    1ade:	00 c0       	rjmp	.+0      	; 0x1ae0 <main+0x158>
    1ae0:	00 00       	nop
    1ae2:	a8 95       	wdr
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	99 ef       	ldi	r25, 0xF9	; 249
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	81 50       	subi	r24, 0x01	; 1
    1aec:	90 40       	sbci	r25, 0x00	; 0
    1aee:	20 40       	sbci	r18, 0x00	; 0
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <main+0x162>
    1af2:	00 c0       	rjmp	.+0      	; 0x1af4 <main+0x16c>
    1af4:	00 00       	nop
    1af6:	a8 95       	wdr
	date_time.month = 6;
	date_time.year = 17;
	SetupClock(date_time);
	*/
	
	lcdClear();
    1af8:	0e 94 92 05 	call	0xb24	; 0xb24 <lcdClear>
				
				mcp_adc02_acq_count++;
			}
			else
			{
				mcp_temp2 = mcp_adc02_sum / 10l;
    1afc:	0a e0       	ldi	r16, 0x0A	; 10
    1afe:	10 e0       	ldi	r17, 0x00	; 0
	
	lcdClear();

	while(1)
	{
		cbi(PORTD, PD3);
    1b00:	93 98       	cbi	0x12, 3	; 18
		if (SecondTickInt == 1)
    1b02:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <SecondTickInt>
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <main+0x184>
    1b0a:	4f c1       	rjmp	.+670    	; 0x1daa <main+0x422>
		{
			
			SecondTickInt = 0;
    1b0c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <SecondTickInt>
			
			//GetNDigitFromShort(adc_main, chadc01, 4);
			
			
			if (PrimarySecCount < 10)
    1b10:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <PrimarySecCount>
    1b14:	8a 30       	cpi	r24, 0x0A	; 10
    1b16:	30 f4       	brcc	.+12     	; 0x1b24 <main+0x19c>
			{
				PrimarySecCount++;
    1b18:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <PrimarySecCount>
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <PrimarySecCount>
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <main+0x1a0>
			}
			else
			{
				PrimarySecCount=0;
    1b24:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <PrimarySecCount>
				
			}
			
			mcp_adc_channel01 = MCP_Read(1);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MCP_Read>
    1b2e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <mcp_adc_channel01+0x1>
    1b32:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <mcp_adc_channel01>
			mcp_adc_channel01 = MCP_Read(1);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MCP_Read>
    1b3c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <mcp_adc_channel01+0x1>
    1b40:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <mcp_adc_channel01>
			
			//lcdGotoXY(0,1);
			//lcdPrintData("Energy::", 8);
			
			if (mcp_adc01_acq_count < 10)
    1b44:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <mcp_adc01_acq_count>
    1b48:	2a 30       	cpi	r18, 0x0A	; 10
    1b4a:	80 f4       	brcc	.+32     	; 0x1b6c <main+0x1e4>
			{
				mcp_adc01_sum += mcp_adc_channel01;
    1b4c:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <mcp_adc01_sum>
    1b50:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <mcp_adc01_sum+0x1>
    1b54:	82 0f       	add	r24, r18
    1b56:	93 1f       	adc	r25, r19
    1b58:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <mcp_adc01_sum+0x1>
    1b5c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <mcp_adc01_sum>
				mcp_adc01_acq_count++;
    1b60:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <mcp_adc01_acq_count>
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mcp_adc01_acq_count>
    1b6a:	22 c0       	rjmp	.+68     	; 0x1bb0 <main+0x228>
				//volt001 = (mcp_adc_channel01 * 100l) / calibvalues.calib_volt_001; //(adc_channel1 * 100) / calibvalues.calib_volt_001;
			}
			else
			{
				mcp_adc_channel01 = mcp_adc01_sum / 10;
    1b6c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <mcp_adc01_sum>
    1b70:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <mcp_adc01_sum+0x1>
    1b74:	b8 01       	movw	r22, r16
    1b76:	0e 94 bb 12 	call	0x2576	; 0x2576 <__udivmodhi4>
    1b7a:	9b 01       	movw	r18, r22
    1b7c:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <mcp_adc_channel01+0x1>
    1b80:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <mcp_adc_channel01>
				volt001 = (mcp_adc_channel01 * 100l) / calibvalues.calib_volt_001; //(adc_channel1 * 100) / calibvalues.calib_volt_001;
    1b84:	a4 e6       	ldi	r26, 0x64	; 100
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	0e 94 10 13 	call	0x2620	; 0x2620 <__umulhisi3>
    1b8c:	20 91 73 05 	lds	r18, 0x0573	; 0x800573 <calibvalues>
    1b90:	30 91 74 05 	lds	r19, 0x0574	; 0x800574 <calibvalues+0x1>
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divmodsi4>
    1b9c:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <volt001+0x1>
    1ba0:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <volt001>
				mcp_adc01_acq_count = 0;
    1ba4:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <mcp_adc01_acq_count>
				mcp_adc01_sum = 0;
    1ba8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <mcp_adc01_sum+0x1>
    1bac:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <mcp_adc01_sum>
			}
			
			mcp_adc_temp = MCP_Read(0);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MCP_Read>
    1bb6:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <mcp_adc_temp+0x1>
    1bba:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <mcp_adc_temp>
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	99 ef       	ldi	r25, 0xF9	; 249
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	90 40       	sbci	r25, 0x00	; 0
    1bc8:	20 40       	sbci	r18, 0x00	; 0
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <main+0x23c>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <main+0x246>
    1bce:	00 00       	nop
			_delay_ms(20);
			
			//mcp_adc_channel02 = MCP_Read(0);
			
			if (mcp_adc02_acq_count < 10)
    1bd0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <mcp_adc02_acq_count>
    1bd4:	8a 30       	cpi	r24, 0x0A	; 10
    1bd6:	d8 f4       	brcc	.+54     	; 0x1c0e <main+0x286>
			{
				//mcp_adc_temp = MCP_Read(0);
				mcp_adc_temp = MCP_Read(0);
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MCP_Read>
    1bde:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <mcp_adc_temp+0x1>
    1be2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <mcp_adc_temp>
				mcp_adc02_sum += mcp_adc_temp;
    1be6:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <mcp_adc_temp>
    1bea:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <mcp_adc_temp+0x1>
    1bee:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <mcp_adc02_sum>
    1bf2:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <mcp_adc02_sum+0x1>
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <mcp_adc02_sum+0x1>
    1bfe:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <mcp_adc02_sum>
				
				mcp_adc02_acq_count++;
    1c02:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <mcp_adc02_acq_count>
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <mcp_adc02_acq_count>
    1c0c:	11 c0       	rjmp	.+34     	; 0x1c30 <main+0x2a8>
			}
			else
			{
				mcp_temp2 = mcp_adc02_sum / 10l;
    1c0e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <mcp_adc02_sum>
    1c12:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <mcp_adc02_sum+0x1>
    1c16:	b8 01       	movw	r22, r16
    1c18:	0e 94 bb 12 	call	0x2576	; 0x2576 <__udivmodhi4>
    1c1c:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <mcp_temp2+0x1>
    1c20:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <mcp_temp2>
				//mcp_adc_channel02 = mcp_adc_temp;
				mcp_adc02_acq_count = 0;
    1c24:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <mcp_adc02_acq_count>
				mcp_adc02_sum = 0l;
    1c28:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <mcp_adc02_sum+0x1>
    1c2c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <mcp_adc02_sum>
			}
			
			mcp_adc_channel02 = mcp_temp2;
    1c30:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <mcp_temp2>
    1c34:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <mcp_temp2+0x1>
    1c38:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <mcp_adc_channel02+0x1>
    1c3c:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <mcp_adc_channel02>
			mcp_adc_channel03 = mcp_adc_channel02;
    1c40:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <mcp_adc_channel03+0x1>
    1c44:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <mcp_adc_channel03>
			
			if (mcp_adc_channel02 > 0)
    1c48:	21 15       	cp	r18, r1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	39 f0       	breq	.+14     	; 0x1c5c <main+0x2d4>
			{
				
				if (mcp_adc_channel02 < calibvalues.curr_adc_offset001)
    1c4e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <calibvalues+0x4>
    1c52:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <calibvalues+0x5>
    1c56:	28 17       	cp	r18, r24
    1c58:	39 07       	cpc	r19, r25
    1c5a:	28 f4       	brcc	.+10     	; 0x1c66 <main+0x2de>
				{
					curr001 = 0;
    1c5c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <curr001+0x1>
    1c60:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <curr001>
    1c64:	16 c0       	rjmp	.+44     	; 0x1c92 <main+0x30a>
				}
				else
				{
					mcp_adc_channel02 -= calibvalues.curr_adc_offset001;
    1c66:	28 1b       	sub	r18, r24
    1c68:	39 0b       	sbc	r19, r25
    1c6a:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <mcp_adc_channel02+0x1>
    1c6e:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <mcp_adc_channel02>
					curr001 = (mcp_adc_channel02 *1000l) / calibvalues.calib_curr_001;
    1c72:	a8 ee       	ldi	r26, 0xE8	; 232
    1c74:	b3 e0       	ldi	r27, 0x03	; 3
    1c76:	0e 94 10 13 	call	0x2620	; 0x2620 <__umulhisi3>
    1c7a:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <calibvalues+0x2>
    1c7e:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <calibvalues+0x3>
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__divmodsi4>
    1c8a:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <curr001+0x1>
    1c8e:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <curr001>
			else
			{
				curr001 = 0;
			}
			
			lcdGotoXY(0,0);
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	0e 94 95 05 	call	0xb2a	; 0xb2a <lcdGotoXY>
			lcdPrintData("  DC ENERGY METER   ", 20);
    1c9a:	64 e1       	ldi	r22, 0x14	; 20
    1c9c:	89 ef       	ldi	r24, 0xF9	; 249
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			
			//curr001 = adc_channel2;
			//volt001 = adc_channel1;
			lcdGotoXY(0,2);
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	0e 94 95 05 	call	0xb2a	; 0xb2a <lcdGotoXY>
			GetNDigitFromShort(volt001, chVolt001, 3);
    1cac:	43 e0       	ldi	r20, 0x03	; 3
    1cae:	be 01       	movw	r22, r28
    1cb0:	6f 5e       	subi	r22, 0xEF	; 239
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <volt001>
    1cb8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <volt001+0x1>
    1cbc:	0e 94 73 06 	call	0xce6	; 0xce6 <GetNDigitFromShort>
			lcdPrintData("VOLT :",6);
    1cc0:	66 e0       	ldi	r22, 0x06	; 6
    1cc2:	8e e0       	ldi	r24, 0x0E	; 14
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData(chVolt001, 2);
    1cca:	62 e0       	ldi	r22, 0x02	; 2
    1ccc:	ce 01       	movw	r24, r28
    1cce:	41 96       	adiw	r24, 0x11	; 17
    1cd0:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData(".", 1);
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	87 ef       	ldi	r24, 0xF7	; 247
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData(&chVolt001[2], 1);
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	43 96       	adiw	r24, 0x13	; 19
    1ce4:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData("          ",10);
    1ce8:	6a e0       	ldi	r22, 0x0A	; 10
    1cea:	8f ec       	ldi	r24, 0xCF	; 207
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			
			lcdGotoXY(0, 3);
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	0e 94 95 05 	call	0xb2a	; 0xb2a <lcdGotoXY>
			lcdPrintData("CURR :",6);
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	85 e1       	ldi	r24, 0x15	; 21
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			GetNDigitFromShort(curr001, chCurr001, 3);
    1d04:	43 e0       	ldi	r20, 0x03	; 3
    1d06:	be 01       	movw	r22, r28
    1d08:	66 5f       	subi	r22, 0xF6	; 246
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <curr001>
    1d10:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <curr001+0x1>
    1d14:	0e 94 73 06 	call	0xce6	; 0xce6 <GetNDigitFromShort>
			lcdPrintData(chCurr001, 2);
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	0a 96       	adiw	r24, 0x0a	; 10
    1d1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData(".", 1);
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	87 ef       	ldi	r24, 0xF7	; 247
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData(&chCurr001[2], 1);
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	ce 01       	movw	r24, r28
    1d30:	0c 96       	adiw	r24, 0x0c	; 12
    1d32:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData("          ",10);
    1d36:	6a e0       	ldi	r22, 0x0A	; 10
    1d38:	8f ec       	ldi	r24, 0xCF	; 207
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			//lcdGotoXY(11, 3);
			//lcdPrintData("AD:",3);
			//GetNDigitFromShort(mcp_adc_channel03, chnum02, 4);
			//lcdPrintData(chnum02, 4);
			
			lcdGotoXY(0,1);
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	0e 94 95 05 	call	0xb2a	; 0xb2a <lcdGotoXY>
			lcdPrintData("KWH  :", 6);
    1d48:	66 e0       	ldi	r22, 0x06	; 6
    1d4a:	8c e1       	ldi	r24, 0x1C	; 28
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			//GetNDigitFromShort(PresentIntigratedUnits, chEnergy, 5);
			//sprintf(chEnergy, "%05d", PresentIntigratedUnits);
			GetNDigitFromu32(PresentIntigratedUnits, chEnergy, 5);
    1d52:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <PresentIntigratedUnits>
    1d56:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <PresentIntigratedUnits+0x1>
    1d5a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <PresentIntigratedUnits+0x2>
    1d5e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <PresentIntigratedUnits+0x3>
    1d62:	25 e0       	ldi	r18, 0x05	; 5
    1d64:	ae 01       	movw	r20, r28
    1d66:	4f 5f       	subi	r20, 0xFF	; 255
    1d68:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6a:	0e 94 d6 06 	call	0xdac	; 0xdac <GetNDigitFromu32>
			lcdPrintData(chEnergy, 5);
    1d6e:	65 e0       	ldi	r22, 0x05	; 5
    1d70:	ce 01       	movw	r24, r28
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			GetNDigitFromShort(PresentIntigratedMiliUnits, chEnergy, 2);
    1d78:	42 e0       	ldi	r20, 0x02	; 2
    1d7a:	be 01       	movw	r22, r28
    1d7c:	6f 5f       	subi	r22, 0xFF	; 255
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <PresentIntigratedMiliUnits>
    1d84:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1d88:	0e 94 73 06 	call	0xce6	; 0xce6 <GetNDigitFromShort>
			lcdPrintData(".", 1);
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	87 ef       	ldi	r24, 0xF7	; 247
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData(chEnergy, 2);
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	ce 01       	movw	r24, r28
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdPrintData("    ", 4);
    1da0:	64 e0       	ldi	r22, 0x04	; 4
    1da2:	85 ed       	ldi	r24, 0xD5	; 213
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
			lcdGotoXY(11, 3);
			lcdPrintData(chSecCounter, 4);
			*/
		}
		
		if (T2TickInt002 == 1)
    1daa:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <T2TickInt002>
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	11 f4       	brne	.+4      	; 0x1db6 <main+0x42e>
		{
			T2TickInt002 = 0;
    1db2:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <T2TickInt002>
		}
		
		if (PresentIntigratedMiliUnits >= 100)
    1db6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <PresentIntigratedMiliUnits>
    1dba:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1dbe:	84 36       	cpi	r24, 0x64	; 100
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	00 f1       	brcs	.+64     	; 0x1e04 <main+0x47c>
		{
			PresentIntigratedUnits++;
    1dc4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <PresentIntigratedUnits>
    1dc8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <PresentIntigratedUnits+0x1>
    1dcc:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <PresentIntigratedUnits+0x2>
    1dd0:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <PresentIntigratedUnits+0x3>
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	b1 1d       	adc	r27, r1
    1dda:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <PresentIntigratedUnits>
    1dde:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <PresentIntigratedUnits+0x1>
    1de2:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <PresentIntigratedUnits+0x2>
    1de6:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <PresentIntigratedUnits+0x3>
    1dea:	88 8f       	std	Y+24, r24	; 0x18
    1dec:	99 8f       	std	Y+25, r25	; 0x19
    1dee:	aa 8f       	std	Y+26, r26	; 0x1a
    1df0:	bb 8f       	std	Y+27, r27	; 0x1b
	return Dat;
}

void SetLastUnit(uint32_t Dat)
{
	StoreEnergyReading((char *)&Dat, 4);
    1df2:	64 e0       	ldi	r22, 0x04	; 4
    1df4:	ce 01       	movw	r24, r28
    1df6:	48 96       	adiw	r24, 0x18	; 24
    1df8:	0e 94 47 07 	call	0xe8e	; 0xe8e <StoreEnergyReading>
		
		if (PresentIntigratedMiliUnits >= 100)
		{
			PresentIntigratedUnits++;
			SetLastUnit(PresentIntigratedUnits);
			PresentIntigratedMiliUnits = 0;
    1dfc:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <PresentIntigratedMiliUnits+0x1>
    1e00:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <PresentIntigratedMiliUnits>
		}
		
		UpdateEnergyCalculation();
    1e04:	0e 94 ad 08 	call	0x115a	; 0x115a <UpdateEnergyCalculation>
		
		btnid = GetPressedButtonId();
    1e08:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GetPressedButtonId>

		if (btnid > 0)
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <main+0x48a>
    1e10:	55 c0       	rjmp	.+170    	; 0x1ebc <main+0x534>
		{
			if (btnid == 1)
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	a9 f1       	breq	.+106    	; 0x1e80 <main+0x4f8>
				//SetAndShowU16(&calibvalues.curr_adc_offset001, "OFSET:");
				//StoreBuffer((unsigned char*)&calibvalues, sizeof(CALIBVALUES));
				_delay_ms(200);
			}
			
			if (btnid == 2)
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	d9 f5       	brne	.+118    	; 0x1e90 <main+0x508>
			{
				SetAndShowU16(&calibvalues.calib_curr_001, "I-FAC:");
    1e1a:	63 e2       	ldi	r22, 0x23	; 35
    1e1c:	71 e0       	ldi	r23, 0x01	; 1
    1e1e:	85 e7       	ldi	r24, 0x75	; 117
    1e20:	95 e0       	ldi	r25, 0x05	; 5
    1e22:	0e 94 8d 11 	call	0x231a	; 0x231a <SetAndShowU16>
				StoreBuffer((unsigned char*)&calibvalues, sizeof(CALIBVALUES));
    1e26:	66 e0       	ldi	r22, 0x06	; 6
    1e28:	83 e7       	ldi	r24, 0x73	; 115
    1e2a:	95 e0       	ldi	r25, 0x05	; 5
    1e2c:	0e 94 3b 07 	call	0xe76	; 0xe76 <StoreBuffer>
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	93 ec       	ldi	r25, 0xC3	; 195
    1e34:	29 e0       	ldi	r18, 0x09	; 9
    1e36:	81 50       	subi	r24, 0x01	; 1
    1e38:	90 40       	sbci	r25, 0x00	; 0
    1e3a:	20 40       	sbci	r18, 0x00	; 0
    1e3c:	e1 f7       	brne	.-8      	; 0x1e36 <main+0x4ae>
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <main+0x4b8>
    1e40:	00 00       	nop
				_delay_ms(200);
				
				SetAndShowU16(&calibvalues.calib_volt_001, "V-FAC:");
    1e42:	6a e2       	ldi	r22, 0x2A	; 42
    1e44:	71 e0       	ldi	r23, 0x01	; 1
    1e46:	83 e7       	ldi	r24, 0x73	; 115
    1e48:	95 e0       	ldi	r25, 0x05	; 5
    1e4a:	0e 94 8d 11 	call	0x231a	; 0x231a <SetAndShowU16>
				StoreBuffer((unsigned char*)&calibvalues, sizeof(CALIBVALUES));
    1e4e:	66 e0       	ldi	r22, 0x06	; 6
    1e50:	83 e7       	ldi	r24, 0x73	; 115
    1e52:	95 e0       	ldi	r25, 0x05	; 5
    1e54:	0e 94 3b 07 	call	0xe76	; 0xe76 <StoreBuffer>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	93 ec       	ldi	r25, 0xC3	; 195
    1e5c:	29 e0       	ldi	r18, 0x09	; 9
    1e5e:	81 50       	subi	r24, 0x01	; 1
    1e60:	90 40       	sbci	r25, 0x00	; 0
    1e62:	20 40       	sbci	r18, 0x00	; 0
    1e64:	e1 f7       	brne	.-8      	; 0x1e5e <main+0x4d6>
    1e66:	00 c0       	rjmp	.+0      	; 0x1e68 <main+0x4e0>
    1e68:	00 00       	nop
				_delay_ms(200);
				
				SetAndShowU16(&calibvalues.curr_adc_offset001, "OFSET:");
    1e6a:	61 e3       	ldi	r22, 0x31	; 49
    1e6c:	71 e0       	ldi	r23, 0x01	; 1
    1e6e:	87 e7       	ldi	r24, 0x77	; 119
    1e70:	95 e0       	ldi	r25, 0x05	; 5
    1e72:	0e 94 8d 11 	call	0x231a	; 0x231a <SetAndShowU16>
				StoreBuffer((unsigned char*)&calibvalues, sizeof(CALIBVALUES));
    1e76:	66 e0       	ldi	r22, 0x06	; 6
    1e78:	83 e7       	ldi	r24, 0x73	; 115
    1e7a:	95 e0       	ldi	r25, 0x05	; 5
    1e7c:	0e 94 3b 07 	call	0xe76	; 0xe76 <StoreBuffer>
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	93 ec       	ldi	r25, 0xC3	; 195
    1e84:	29 e0       	ldi	r18, 0x09	; 9
    1e86:	81 50       	subi	r24, 0x01	; 1
    1e88:	90 40       	sbci	r25, 0x00	; 0
    1e8a:	20 40       	sbci	r18, 0x00	; 0
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <main+0x4fe>
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <main+0x530>
				_delay_ms(200);
			}
			
			if (btnid == 3)
    1e90:	83 30       	cpi	r24, 0x03	; 3
    1e92:	49 f4       	brne	.+18     	; 0x1ea6 <main+0x51e>
			{
				sec_counter = 0;
    1e94:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <sec_counter>
    1e98:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <sec_counter+0x1>
    1e9c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <sec_counter+0x2>
    1ea0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <sec_counter+0x3>
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <main+0x522>
				_delay_ms(50);
			}
			
			if (btnid == 4)
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	49 f4       	brne	.+18     	; 0x1ebc <main+0x534>
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	90 e7       	ldi	r25, 0x70	; 112
    1eae:	22 e0       	ldi	r18, 0x02	; 2
    1eb0:	81 50       	subi	r24, 0x01	; 1
    1eb2:	90 40       	sbci	r25, 0x00	; 0
    1eb4:	20 40       	sbci	r18, 0x00	; 0
    1eb6:	e1 f7       	brne	.-8      	; 0x1eb0 <main+0x528>
    1eb8:	00 c0       	rjmp	.+0      	; 0x1eba <main+0x532>
    1eba:	00 00       	nop
			}
			
			
		}
		
		if (rxComplete == 1)
    1ebc:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <rxComplete>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	91 f4       	brne	.+36     	; 0x1ee8 <main+0x560>
		{
			rxSize = ReadRxRawBuffer(chuart01);
    1ec4:	8a e7       	ldi	r24, 0x7A	; 122
    1ec6:	95 e0       	ldi	r25, 0x05	; 5
    1ec8:	0e 94 12 12 	call	0x2424	; 0x2424 <ReadRxRawBuffer>
    1ecc:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rxSize>
			if (rxSize > 0)
    1ed0:	88 23       	and	r24, r24
    1ed2:	51 f0       	breq	.+20     	; 0x1ee8 <main+0x560>
			{
				chuart01[rxSize] = 0;
    1ed4:	68 2f       	mov	r22, r24
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	fb 01       	movw	r30, r22
    1eda:	e6 58       	subi	r30, 0x86	; 134
    1edc:	fa 4f       	sbci	r31, 0xFA	; 250
    1ede:	10 82       	st	Z, r1
				
				//USART_TransmitString("DATA\r\n");
				//USART_TransmitString(chuart01);
				//USART_TransmitString("\r\n");
				
				if (Interpret(chuart01, rxSize) == 1)
    1ee0:	8a e7       	ldi	r24, 0x7A	; 122
    1ee2:	95 e0       	ldi	r25, 0x05	; 5
    1ee4:	0e 94 24 09 	call	0x1248	; 0x1248 <Interpret>
					;//USART_TransmitString("ERROR\r\n");
				}
			}
		}
		
		wdt_reset();
    1ee8:	a8 95       	wdr
		
	}
    1eea:	0a ce       	rjmp	.-1004   	; 0x1b00 <main+0x178>

00001eec <MCP_GPIO_Init>:
#include "global.h"
#include "MCP2303soft.h"

void MCP_GPIO_Init(void)
{
	sbi(MCP_SPI_DDR, MCP_SS_PIN1);
    1eec:	bc 9a       	sbi	0x17, 4	; 23
	sbi(MCP_SPI_DDR, MCP_SCK_PIN);
    1eee:	bf 9a       	sbi	0x17, 7	; 23
	cbi(MCP_SPI_DDR, MCP_DOUT_PIN);
    1ef0:	be 98       	cbi	0x17, 6	; 23
	sbi(MCP_SPI_DDR, MCP_DIN_PIN);
    1ef2:	bd 9a       	sbi	0x17, 5	; 23
	
	sbi(MCP_SPI_PORT, MCP_SS_PIN1);
    1ef4:	c4 9a       	sbi	0x18, 4	; 24
	cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1ef6:	c7 98       	cbi	0x18, 7	; 24
	cbi(MCP_SPI_PORT, MCP_DIN_PIN);
    1ef8:	c5 98       	cbi	0x18, 5	; 24
    1efa:	08 95       	ret

00001efc <MCP_Read>:
}

uint16_t MCP_Read(uint8_t chno)
{
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	c8 2f       	mov	r28, r24
	uint8_t _clk_count;
	
	uint16_t _data=0;
	
	cbi(MCP_SPI_PORT, MCP_SS_PIN1);
    1f04:	c4 98       	cbi	0x18, 4	; 24
	
	__delay_cycle(5);
    1f06:	65 e0       	ldi	r22, 0x05	; 5
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	sbi(MCP_SPI_PORT, MCP_DIN_PIN);
    1f12:	c5 9a       	sbi	0x18, 5	; 24
	
	__delay_cycle(5);
    1f14:	65 e0       	ldi	r22, 0x05	; 5
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	sbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1f20:	c7 9a       	sbi	0x18, 7	; 24
	
	__delay_cycle(5);
    1f22:	65 e0       	ldi	r22, 0x05	; 5
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1f2e:	c7 98       	cbi	0x18, 7	; 24
	
	__delay_cycle(5);
    1f30:	65 e0       	ldi	r22, 0x05	; 5
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	
	sbi(MCP_SPI_PORT, MCP_DIN_PIN);
    1f3c:	c5 9a       	sbi	0x18, 5	; 24
	__delay_cycle(5);
    1f3e:	65 e0       	ldi	r22, 0x05	; 5
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	sbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1f4a:	c7 9a       	sbi	0x18, 7	; 24
	__delay_cycle(5);
    1f4c:	65 e0       	ldi	r22, 0x05	; 5
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1f58:	c7 98       	cbi	0x18, 7	; 24
	__delay_cycle(5);
    1f5a:	65 e0       	ldi	r22, 0x05	; 5
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	if (chno == 0)
    1f66:	c1 11       	cpse	r28, r1
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <MCP_Read+0x72>
	{
		cbi(MCP_SPI_PORT, MCP_DIN_PIN);
    1f6a:	c5 98       	cbi	0x18, 5	; 24
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <MCP_Read+0x74>
	}
	else
	{
		sbi(MCP_SPI_PORT, MCP_DIN_PIN);
    1f6e:	c5 9a       	sbi	0x18, 5	; 24
	}
	__delay_cycle(5);
    1f70:	65 e0       	ldi	r22, 0x05	; 5
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	sbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1f7c:	c7 9a       	sbi	0x18, 7	; 24
	__delay_cycle(5);
    1f7e:	65 e0       	ldi	r22, 0x05	; 5
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1f8a:	c7 98       	cbi	0x18, 7	; 24
	__delay_cycle(5);
    1f8c:	65 e0       	ldi	r22, 0x05	; 5
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	sbi(MCP_SPI_PORT, MCP_DIN_PIN);
    1f98:	c5 9a       	sbi	0x18, 5	; 24
	__delay_cycle(5);
    1f9a:	65 e0       	ldi	r22, 0x05	; 5
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	sbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1fa6:	c7 9a       	sbi	0x18, 7	; 24
	__delay_cycle(5);
    1fa8:	65 e0       	ldi	r22, 0x05	; 5
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1fb4:	c7 98       	cbi	0x18, 7	; 24
	__delay_cycle(5);
    1fb6:	65 e0       	ldi	r22, 0x05	; 5
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
	
	
		sbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1fc2:	c7 9a       	sbi	0x18, 7	; 24
		__delay_cycle(5);
    1fc4:	65 e0       	ldi	r22, 0x05	; 5
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
		cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1fd0:	c7 98       	cbi	0x18, 7	; 24
		__delay_cycle(5);
    1fd2:	65 e0       	ldi	r22, 0x05	; 5
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>

uint16_t MCP_Read(uint8_t chno)
{
	uint8_t _clk_count;
	
	uint16_t _data=0;
    1fde:	c0 e0       	ldi	r28, 0x00	; 0
    1fe0:	d0 e0       	ldi	r29, 0x00	; 0
		__delay_cycle(5);
		cbi(MCP_SPI_PORT, MCP_SCK_PIN);
		__delay_cycle(5);
		
	
	for (_clk_count=0 ;_clk_count < 12; _clk_count++)
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
	{
		sbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1fe4:	c7 9a       	sbi	0x18, 7	; 24
		__delay_cycle(5);
    1fe6:	65 e0       	ldi	r22, 0x05	; 5
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
		
		if (PINB & (BV(MCP_DOUT_PIN)))
    1ff2:	b6 99       	sbic	0x16, 6	; 22
		{
			_data |= 1;
    1ff4:	c1 60       	ori	r28, 0x01	; 1
		}
		
		if (_clk_count < 11)
    1ff6:	1b 30       	cpi	r17, 0x0B	; 11
    1ff8:	11 f0       	breq	.+4      	; 0x1ffe <MCP_Read+0x102>
		{
			_data <<= 1;
    1ffa:	cc 0f       	add	r28, r28
    1ffc:	dd 1f       	adc	r29, r29
		}
		
		cbi(MCP_SPI_PORT, MCP_SCK_PIN);
    1ffe:	c7 98       	cbi	0x18, 7	; 24
		__delay_cycle(5);
    2000:	65 e0       	ldi	r22, 0x05	; 5
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 43 04 	call	0x886	; 0x886 <__delay_cycle>
		__delay_cycle(5);
		cbi(MCP_SPI_PORT, MCP_SCK_PIN);
		__delay_cycle(5);
		
	
	for (_clk_count=0 ;_clk_count < 12; _clk_count++)
    200c:	1f 5f       	subi	r17, 0xFF	; 255
    200e:	1c 30       	cpi	r17, 0x0C	; 12
    2010:	49 f7       	brne	.-46     	; 0x1fe4 <MCP_Read+0xe8>
		
		cbi(MCP_SPI_PORT, MCP_SCK_PIN);
		__delay_cycle(5);
	}
	
	sbi(MCP_SPI_PORT, MCP_SS_PIN1);
    2012:	c4 9a       	sbi	0x18, 4	; 24
	
	return _data;
	
}
    2014:	ce 01       	movw	r24, r28
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	08 95       	ret

0000201e <SetupClock>:
	tsmp->year = year;
	
}

void SetupClock(TIMESTAMP tsmp)
{
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	00 d0       	rcall	.+0      	; 0x2030 <SetupClock+0x12>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <SetupClock+0x14>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <SetupClock+0x16>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	d4 2e       	mov	r13, r20
    203a:	c5 2e       	mov	r12, r21
    203c:	07 2f       	mov	r16, r23
    203e:	f8 2e       	mov	r15, r24
    2040:	e9 2e       	mov	r14, r25

	unsigned char month = (((tsmp.month/10) << 4) | (tsmp.month%10));

	unsigned char year = (((tsmp.year/10) << 4) | (tsmp.year%10));
	
	DS1307Write(0x00, sec);
    2042:	1a e0       	ldi	r17, 0x0A	; 10
    2044:	86 2f       	mov	r24, r22
    2046:	61 2f       	mov	r22, r17
    2048:	0e 94 af 12 	call	0x255e	; 0x255e <__udivmodqi4>
    204c:	69 2f       	mov	r22, r25
    204e:	20 e1       	ldi	r18, 0x10	; 16
    2050:	82 9f       	mul	r24, r18
    2052:	c0 01       	movw	r24, r0
    2054:	11 24       	eor	r1, r1
    2056:	68 2b       	or	r22, r24
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 26 04 	call	0x84c	; 0x84c <DS1307Write>
	DS1307Write(0x01, min);
    205e:	8c 2d       	mov	r24, r12
    2060:	61 2f       	mov	r22, r17
    2062:	0e 94 af 12 	call	0x255e	; 0x255e <__udivmodqi4>
    2066:	69 2f       	mov	r22, r25
    2068:	20 e1       	ldi	r18, 0x10	; 16
    206a:	82 9f       	mul	r24, r18
    206c:	c0 01       	movw	r24, r0
    206e:	11 24       	eor	r1, r1
    2070:	68 2b       	or	r22, r24
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0e 94 26 04 	call	0x84c	; 0x84c <DS1307Write>
	DS1307Write(0x02, hour);
    2078:	8d 2d       	mov	r24, r13
    207a:	61 2f       	mov	r22, r17
    207c:	0e 94 af 12 	call	0x255e	; 0x255e <__udivmodqi4>
    2080:	69 2f       	mov	r22, r25
    2082:	20 e1       	ldi	r18, 0x10	; 16
    2084:	82 9f       	mul	r24, r18
    2086:	c0 01       	movw	r24, r0
    2088:	11 24       	eor	r1, r1
    208a:	68 2b       	or	r22, r24
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	0e 94 26 04 	call	0x84c	; 0x84c <DS1307Write>
	DS1307Write(0x04, day);
    2092:	8e 2d       	mov	r24, r14
    2094:	61 2f       	mov	r22, r17
    2096:	0e 94 af 12 	call	0x255e	; 0x255e <__udivmodqi4>
    209a:	69 2f       	mov	r22, r25
    209c:	20 e1       	ldi	r18, 0x10	; 16
    209e:	82 9f       	mul	r24, r18
    20a0:	c0 01       	movw	r24, r0
    20a2:	11 24       	eor	r1, r1
    20a4:	68 2b       	or	r22, r24
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	0e 94 26 04 	call	0x84c	; 0x84c <DS1307Write>
	DS1307Write(0x05, month);
    20ac:	8f 2d       	mov	r24, r15
    20ae:	61 2f       	mov	r22, r17
    20b0:	0e 94 af 12 	call	0x255e	; 0x255e <__udivmodqi4>
    20b4:	69 2f       	mov	r22, r25
    20b6:	20 e1       	ldi	r18, 0x10	; 16
    20b8:	82 9f       	mul	r24, r18
    20ba:	c0 01       	movw	r24, r0
    20bc:	11 24       	eor	r1, r1
    20be:	68 2b       	or	r22, r24
    20c0:	85 e0       	ldi	r24, 0x05	; 5
    20c2:	0e 94 26 04 	call	0x84c	; 0x84c <DS1307Write>
	DS1307Write(0x06, year);
    20c6:	80 2f       	mov	r24, r16
    20c8:	61 2f       	mov	r22, r17
    20ca:	0e 94 af 12 	call	0x255e	; 0x255e <__udivmodqi4>
    20ce:	69 2f       	mov	r22, r25
    20d0:	20 e1       	ldi	r18, 0x10	; 16
    20d2:	82 9f       	mul	r24, r18
    20d4:	c0 01       	movw	r24, r0
    20d6:	11 24       	eor	r1, r1
    20d8:	68 2b       	or	r22, r24
    20da:	86 e0       	ldi	r24, 0x06	; 6
	WriteRtcByte(0x02, hour);
	WriteRtcByte(0x04, day);
	WriteRtcByte(0x05, month);
	WriteRtcByte(0x06, year);
	*/
}
    20dc:	26 96       	adiw	r28, 0x06	; 6
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	ef 90       	pop	r14
    20f4:	df 90       	pop	r13
    20f6:	cf 90       	pop	r12
	DS1307Write(0x00, sec);
	DS1307Write(0x01, min);
	DS1307Write(0x02, hour);
	DS1307Write(0x04, day);
	DS1307Write(0x05, month);
	DS1307Write(0x06, year);
    20f8:	0c 94 26 04 	jmp	0x84c	; 0x84c <DS1307Write>

000020fc <SD_sendCommand>:
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	c8 2f       	mov	r28, r24
    210a:	6a 01       	movw	r12, r20
    210c:	7b 01       	movw	r14, r22
    210e:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <SDHC_flag>
    2112:	81 11       	cpse	r24, r1
    2114:	13 c0       	rjmp	.+38     	; 0x213c <SD_sendCommand+0x40>
    2116:	8f ee       	ldi	r24, 0xEF	; 239
    2118:	8c 0f       	add	r24, r28
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	40 f0       	brcs	.+16     	; 0x212e <SD_sendCommand+0x32>
    211e:	88 ee       	ldi	r24, 0xE8	; 232
    2120:	8c 0f       	add	r24, r28
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	20 f0       	brcs	.+8      	; 0x212e <SD_sendCommand+0x32>
    2126:	80 ee       	ldi	r24, 0xE0	; 224
    2128:	8c 0f       	add	r24, r28
    212a:	82 30       	cpi	r24, 0x02	; 2
    212c:	38 f4       	brcc	.+14     	; 0x213c <SD_sendCommand+0x40>
    212e:	89 e0       	ldi	r24, 0x09	; 9
    2130:	cc 0c       	add	r12, r12
    2132:	dd 1c       	adc	r13, r13
    2134:	ee 1c       	adc	r14, r14
    2136:	ff 1c       	adc	r15, r15
    2138:	8a 95       	dec	r24
    213a:	d1 f7       	brne	.-12     	; 0x2130 <SD_sendCommand+0x34>
    213c:	c4 98       	cbi	0x18, 4	; 24
    213e:	8c 2f       	mov	r24, r28
    2140:	80 64       	ori	r24, 0x40	; 64
    2142:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
    2146:	8f 2d       	mov	r24, r15
    2148:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
    214c:	8e 2d       	mov	r24, r14
    214e:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
    2152:	8d 2d       	mov	r24, r13
    2154:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
    2158:	8c 2d       	mov	r24, r12
    215a:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
    215e:	c8 30       	cpi	r28, 0x08	; 8
    2160:	11 f4       	brne	.+4      	; 0x2166 <SD_sendCommand+0x6a>
    2162:	87 e8       	ldi	r24, 0x87	; 135
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <SD_sendCommand+0x6c>
    2166:	85 e9       	ldi	r24, 0x95	; 149
    2168:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
    216c:	f1 2c       	mov	r15, r1
    216e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    2172:	d8 2f       	mov	r29, r24
    2174:	8f 3f       	cpi	r24, 0xFF	; 255
    2176:	21 f4       	brne	.+8      	; 0x2180 <SD_sendCommand+0x84>
    2178:	fa 94       	dec	r15
    217a:	f1 10       	cpse	r15, r1
    217c:	f8 cf       	rjmp	.-16     	; 0x216e <SD_sendCommand+0x72>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <SD_sendCommand+0xac>
    2180:	81 11       	cpse	r24, r1
    2182:	12 c0       	rjmp	.+36     	; 0x21a8 <SD_sendCommand+0xac>
    2184:	ca 33       	cpi	r28, 0x3A	; 58
    2186:	81 f4       	brne	.+32     	; 0x21a8 <SD_sendCommand+0xac>
    2188:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    218c:	86 ff       	sbrs	r24, 6
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <SD_sendCommand+0x9c>
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <SDHC_flag>
    2196:	02 c0       	rjmp	.+4      	; 0x219c <SD_sendCommand+0xa0>
    2198:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <SDHC_flag>
    219c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    21a0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    21a4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    21a8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    21ac:	c4 9a       	sbi	0x18, 4	; 24
    21ae:	8d 2f       	mov	r24, r29
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	df 90       	pop	r13
    21ba:	cf 90       	pop	r12
    21bc:	08 95       	ret

000021be <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    21be:	8f 92       	push	r8
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	6b 01       	movw	r12, r22
    21d0:	7c 01       	movw	r14, r24
    21d2:	49 01       	movw	r8, r18
    21d4:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    21d6:	ab 01       	movw	r20, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	80 e2       	ldi	r24, 0x20	; 32
    21dc:	0e 94 7e 10 	call	0x20fc	; 0x20fc <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    21e0:	81 11       	cpse	r24, r1
    21e2:	1d c0       	rjmp	.+58     	; 0x221e <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    21e4:	b5 01       	movw	r22, r10
    21e6:	a4 01       	movw	r20, r8
    21e8:	41 50       	subi	r20, 0x01	; 1
    21ea:	51 09       	sbc	r21, r1
    21ec:	61 09       	sbc	r22, r1
    21ee:	71 09       	sbc	r23, r1
    21f0:	4c 0d       	add	r20, r12
    21f2:	5d 1d       	adc	r21, r13
    21f4:	6e 1d       	adc	r22, r14
    21f6:	7f 1d       	adc	r23, r15
    21f8:	81 e2       	ldi	r24, 0x21	; 33
    21fa:	0e 94 7e 10 	call	0x20fc	; 0x20fc <SD_sendCommand>
if(response != 0x00)
    21fe:	81 11       	cpse	r24, r1
    2200:	0e c0       	rjmp	.+28     	; 0x221e <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	ba 01       	movw	r22, r20
    2208:	86 e2       	ldi	r24, 0x26	; 38
if(response != 0x00)
  return response;

return 0; //normal return
}
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	cf 90       	pop	r12
    2212:	bf 90       	pop	r11
    2214:	af 90       	pop	r10
    2216:	9f 90       	pop	r9
    2218:	8f 90       	pop	r8

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
if(response != 0x00)
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    221a:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	df 90       	pop	r13
    2224:	cf 90       	pop	r12
    2226:	bf 90       	pop	r11
    2228:	af 90       	pop	r10
    222a:	9f 90       	pop	r9
    222c:	8f 90       	pop	r8
    222e:	08 95       	ret

00002230 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	ab 01       	movw	r20, r22
    2236:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    2238:	81 e1       	ldi	r24, 0x11	; 17
    223a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    223e:	81 11       	cpse	r24, r1
    2240:	21 c0       	rjmp	.+66     	; 0x2284 <SD_readSingleBlock+0x54>

SD_CS_ASSERT;
    2242:	c4 98       	cbi	0x18, 4	; 24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2244:	c0 e0       	ldi	r28, 0x00	; 0
    2246:	d0 e0       	ldi	r29, 0x00	; 0
    2248:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    224c:	8e 3f       	cpi	r24, 0xFE	; 254
    224e:	29 f0       	breq	.+10     	; 0x225a <SD_readSingleBlock+0x2a>
    2250:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2252:	d1 f7       	brne	.-12     	; 0x2248 <SD_readSingleBlock+0x18>
    2254:	c4 9a       	sbi	0x18, 4	; 24
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	15 c0       	rjmp	.+42     	; 0x2284 <SD_readSingleBlock+0x54>
    225a:	c0 e0       	ldi	r28, 0x00	; 0
    225c:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    225e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    2262:	fe 01       	movw	r30, r28
    2264:	e6 5e       	subi	r30, 0xE6	; 230
    2266:	fc 4f       	sbci	r31, 0xFC	; 252
    2268:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    226a:	21 96       	adiw	r28, 0x01	; 1
    226c:	c1 15       	cp	r28, r1
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	d8 07       	cpc	r29, r24
    2272:	a9 f7       	brne	.-22     	; 0x225e <SD_readSingleBlock+0x2e>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2274:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
SPI_receive();
    2278:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    227c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
SD_CS_DEASSERT;
    2280:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    2282:	80 e0       	ldi	r24, 0x00	; 0
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	ab 01       	movw	r20, r22
    2290:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2292:	88 e1       	ldi	r24, 0x18	; 24
    2294:	0e 94 7e 10 	call	0x20fc	; 0x20fc <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2298:	81 11       	cpse	r24, r1
    229a:	3c c0       	rjmp	.+120    	; 0x2314 <SD_writeSingleBlock+0x8a>

SD_CS_ASSERT;
    229c:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    229e:	8e ef       	ldi	r24, 0xFE	; 254
    22a0:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    22a4:	c0 e0       	ldi	r28, 0x00	; 0
    22a6:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    22a8:	fe 01       	movw	r30, r28
    22aa:	e6 5e       	subi	r30, 0xE6	; 230
    22ac:	fc 4f       	sbci	r31, 0xFC	; 252
    22ae:	80 81       	ld	r24, Z
    22b0:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    22b4:	21 96       	adiw	r28, 0x01	; 1
    22b6:	c1 15       	cp	r28, r1
    22b8:	22 e0       	ldi	r18, 0x02	; 2
    22ba:	d2 07       	cpc	r29, r18
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
SPI_transmit(0xff);
    22c4:	8f ef       	ldi	r24, 0xFF	; 255
    22c6:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>

response = SPI_receive();
    22ca:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    22ce:	98 2f       	mov	r25, r24
    22d0:	9f 71       	andi	r25, 0x1F	; 31
    22d2:	95 30       	cpi	r25, 0x05	; 5
    22d4:	11 f0       	breq	.+4      	; 0x22da <SD_writeSingleBlock+0x50>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    22d6:	c4 9a       	sbi	0x18, 4	; 24
  return response;
    22d8:	1d c0       	rjmp	.+58     	; 0x2314 <SD_writeSingleBlock+0x8a>
    22da:	c0 e0       	ldi	r28, 0x00	; 0
    22dc:	d0 e0       	ldi	r29, 0x00	; 0
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    22de:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    22e2:	81 11       	cpse	r24, r1
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <SD_writeSingleBlock+0x62>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    22e6:	21 96       	adiw	r28, 0x01	; 1
    22e8:	d1 f7       	brne	.-12     	; 0x22de <SD_writeSingleBlock+0x54>
    22ea:	06 c0       	rjmp	.+12     	; 0x22f8 <SD_writeSingleBlock+0x6e>

SD_CS_DEASSERT;
    22ec:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	0e 94 ed 11 	call	0x23da	; 0x23da <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    22f4:	c4 98       	cbi	0x18, 4	; 24

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    22f6:	08 c0       	rjmp	.+16     	; 0x2308 <SD_writeSingleBlock+0x7e>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    22f8:	c4 9a       	sbi	0x18, 4	; 24
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	0b c0       	rjmp	.+22     	; 0x2314 <SD_writeSingleBlock+0x8a>
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	21 96       	adiw	r28, 0x01	; 1
    2304:	c9 f3       	breq	.-14     	; 0x22f8 <SD_writeSingleBlock+0x6e>
    2306:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2308:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <SPI_receive>
    230c:	88 23       	and	r24, r24
    230e:	b9 f3       	breq	.-18     	; 0x22fe <SD_writeSingleBlock+0x74>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    2310:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    2312:	80 e0       	ldi	r24, 0x00	; 0
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	08 95       	ret

0000231a <SetAndShowU16>:
char	chUival[8];
static uint8_t btnid=0;
static uint16_t PreValueU16 = 0;

uint16_t SetAndShowU16(uint16_t *iVal, char *chStr)
{
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	ec 01       	movw	r28, r24
    2324:	8b 01       	movw	r16, r22
	StrLen = strlen(chStr);
    2326:	fb 01       	movw	r30, r22
    2328:	01 90       	ld	r0, Z+
    232a:	00 20       	and	r0, r0
    232c:	e9 f7       	brne	.-6      	; 0x2328 <SetAndShowU16+0xe>
    232e:	31 97       	sbiw	r30, 0x01	; 1
    2330:	e6 1b       	sub	r30, r22
    2332:	f7 0b       	sbc	r31, r23
    2334:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <StrLen>
	
	lcdClear();
    2338:	0e 94 92 05 	call	0xb24	; 0xb24 <lcdClear>
	
	PreValueU16 = (*iVal);
    233c:	88 81       	ld	r24, Y
    233e:	99 81       	ldd	r25, Y+1	; 0x01
    2340:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <PreValueU16+0x1>
    2344:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <PreValueU16>
	
	while (1)
	{
		lcdGotoXY(0, 1);
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	0e 94 95 05 	call	0xb2a	; 0xb2a <lcdGotoXY>
		GetNDigitFromShort(*iVal, chUival, 4);
    2350:	44 e0       	ldi	r20, 0x04	; 4
    2352:	60 e9       	ldi	r22, 0x90	; 144
    2354:	75 e0       	ldi	r23, 0x05	; 5
    2356:	88 81       	ld	r24, Y
    2358:	99 81       	ldd	r25, Y+1	; 0x01
    235a:	0e 94 73 06 	call	0xce6	; 0xce6 <GetNDigitFromShort>
		lcdPrintData(chStr, StrLen);
    235e:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <StrLen>
    2362:	c8 01       	movw	r24, r16
    2364:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
		lcdPrintData(chUival, 4);
    2368:	64 e0       	ldi	r22, 0x04	; 4
    236a:	80 e9       	ldi	r24, 0x90	; 144
    236c:	95 e0       	ldi	r25, 0x05	; 5
    236e:	0e 94 a3 05 	call	0xb46	; 0xb46 <lcdPrintData>
		
		btnid = GetPressedButtonId();
    2372:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <GetPressedButtonId>
		if (btnid > 0)
    2376:	88 23       	and	r24, r24
    2378:	f1 f0       	breq	.+60     	; 0x23b6 <SetAndShowU16+0x9c>
		{
			if (btnid == 3)
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	31 f4       	brne	.+12     	; 0x238a <SetAndShowU16+0x70>
			{
				if ((*iVal) < 32768)
    237e:	88 81       	ld	r24, Y
    2380:	99 81       	ldd	r25, Y+1	; 0x01
    2382:	97 fd       	sbrc	r25, 7
    2384:	18 c0       	rjmp	.+48     	; 0x23b6 <SetAndShowU16+0x9c>
				{
					(*iVal)++;
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	08 c0       	rjmp	.+16     	; 0x239a <SetAndShowU16+0x80>
				}
			}
			else if (btnid == 4)
    238a:	84 30       	cpi	r24, 0x04	; 4
    238c:	49 f4       	brne	.+18     	; 0x23a0 <SetAndShowU16+0x86>
			{
				if (*iVal > 1)
    238e:	88 81       	ld	r24, Y
    2390:	99 81       	ldd	r25, Y+1	; 0x01
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	91 05       	cpc	r25, r1
    2396:	78 f0       	brcs	.+30     	; 0x23b6 <SetAndShowU16+0x9c>
				{
					(*iVal)--;
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	99 83       	std	Y+1, r25	; 0x01
    239c:	88 83       	st	Y, r24
    239e:	0b c0       	rjmp	.+22     	; 0x23b6 <SetAndShowU16+0x9c>
				}
			}
			else if (btnid == 1)
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	39 f4       	brne	.+14     	; 0x23b2 <SetAndShowU16+0x98>
			{
				(*iVal) = PreValueU16;
    23a4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <PreValueU16>
    23a8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <PreValueU16+0x1>
    23ac:	99 83       	std	Y+1, r25	; 0x01
    23ae:	88 83       	st	Y, r24
				return 0;
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <SetAndShowU16+0xb2>
			}
			else if (btnid == 2)
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	59 f0       	breq	.+22     	; 0x23cc <SetAndShowU16+0xb2>
    23b6:	2f ef       	ldi	r18, 0xFF	; 255
    23b8:	83 ec       	ldi	r24, 0xC3	; 195
    23ba:	99 e0       	ldi	r25, 0x09	; 9
    23bc:	21 50       	subi	r18, 0x01	; 1
    23be:	80 40       	sbci	r24, 0x00	; 0
    23c0:	90 40       	sbci	r25, 0x00	; 0
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <SetAndShowU16+0xa2>
    23c4:	00 c0       	rjmp	.+0      	; 0x23c6 <SetAndShowU16+0xac>
    23c6:	00 00       	nop
				return 0;
			}
		}
		
		_delay_ms(200);
		wdt_reset();
    23c8:	a8 95       	wdr
		
	}
    23ca:	be cf       	rjmp	.-132    	; 0x2348 <SetAndShowU16+0x2e>
	
	return 0;
	
}
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	08 95       	ret

000023da <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    23da:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    23dc:	77 9b       	sbis	0x0e, 7	; 14
    23de:	fe cf       	rjmp	.-4      	; 0x23dc <SPI_transmit+0x2>
data = SPDR;
    23e0:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    23e2:	08 95       	ret

000023e4 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    23e8:	77 9b       	sbis	0x0e, 7	; 14
    23ea:	fe cf       	rjmp	.-4      	; 0x23e8 <SPI_receive+0x4>
data = SPDR;
    23ec:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    23ee:	08 95       	ret

000023f0 <transmitByte>:
  while (pgm_read_byte(&(*string)))
   transmitByte(pgm_read_byte(&(*string++)));
   
   //_delay_ms(100);
   //cbi(PORTD, PD2);
}
    23f0:	5d 9b       	sbis	0x0b, 5	; 11
    23f2:	fe cf       	rjmp	.-4      	; 0x23f0 <transmitByte>
    23f4:	8c b9       	out	0x0c, r24	; 12
    23f6:	08 95       	ret

000023f8 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	ec 01       	movw	r28, r24
	//sbi(PORTD, PD2);
	//_delay_ms(100);
  while (*string)
    23fe:	89 91       	ld	r24, Y+
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <transmitString+0x12>
   transmitByte(*string++);
    2404:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <transmitByte>
    2408:	fa cf       	rjmp	.-12     	; 0x23fe <transmitString+0x6>
   
  //_delay_ms(20);
  //cbi(PORTD, PD2);
}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <__vector_15>:
}

void ClearRxRawBuffer(void)
{
	rxrawbufferidx=0;
	rxBufferValid = 0;
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	0f 90       	pop	r0
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	0f 90       	pop	r0
    2420:	1f 90       	pop	r1
    2422:	18 95       	reti

00002424 <ReadRxRawBuffer>:
    2424:	ac 01       	movw	r20, r24
    2426:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <rxrawbufferidx>
    242a:	88 23       	and	r24, r24
    242c:	a9 f0       	breq	.+42     	; 0x2458 <ReadRxRawBuffer+0x34>
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <rxrawbufferidx>
    2434:	98 17       	cp	r25, r24
    2436:	60 f4       	brcc	.+24     	; 0x2450 <ReadRxRawBuffer+0x2c>
    2438:	29 2f       	mov	r18, r25
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	f9 01       	movw	r30, r18
    243e:	e8 56       	subi	r30, 0x68	; 104
    2440:	fa 4f       	sbci	r31, 0xFA	; 250
    2442:	80 81       	ld	r24, Z
    2444:	fa 01       	movw	r30, r20
    2446:	e2 0f       	add	r30, r18
    2448:	f3 1f       	adc	r31, r19
    244a:	80 83       	st	Z, r24
    244c:	9f 5f       	subi	r25, 0xFF	; 255
    244e:	f0 cf       	rjmp	.-32     	; 0x2430 <ReadRxRawBuffer+0xc>
    2450:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <rxrawbufferidx>
    2454:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <rxBufferValid>
    2458:	08 95       	ret

0000245a <RxWatchdogCountUpCycle>:
}

void RxWatchdogCountUpCycle()
{
	if (rxBufferValid == 1)
    245a:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <rxBufferValid>
    245e:	21 30       	cpi	r18, 0x01	; 1
    2460:	81 f4       	brne	.+32     	; 0x2482 <RxWatchdogCountUpCycle+0x28>
	{
		if (rxWatchDogCounter < 50)
    2462:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <rxWatchDogCounter>
    2466:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <rxWatchDogCounter+0x1>
    246a:	82 33       	cpi	r24, 0x32	; 50
    246c:	91 05       	cpc	r25, r1
    246e:	30 f4       	brcc	.+12     	; 0x247c <RxWatchdogCountUpCycle+0x22>
		{
			rxWatchDogCounter++;
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rxWatchDogCounter+0x1>
    2476:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rxWatchDogCounter>
    247a:	08 95       	ret
		}
		else
		{
			rxComplete = 1;
    247c:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <rxComplete>
    2480:	08 95       	ret
		}
	}
	else
	{
		rxWatchDogCounter = 0;
    2482:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <rxWatchDogCounter+0x1>
    2486:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <rxWatchDogCounter>
		rxComplete = 0;
    248a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <rxComplete>
    248e:	08 95       	ret

00002490 <USART_Init>:
	}
}

void USART_Init(unsigned int baud)
{
	UBRRH = (unsigned char)(baud>>8);
    2490:	90 bd       	out	0x20, r25	; 32

	UBRRL = (unsigned char)baud;
    2492:	89 b9       	out	0x09, r24	; 9

	//UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
	
	UCSRB = (1<<TXEN)|(1<<RXEN)|(1<<RXCIE); //|(1<<TXCIE)
    2494:	88 e9       	ldi	r24, 0x98	; 152
    2496:	8a b9       	out	0x0a, r24	; 10

	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    2498:	8e e8       	ldi	r24, 0x8E	; 142
    249a:	80 bd       	out	0x20, r24	; 32
    249c:	08 95       	ret

0000249e <USART_Receive>:
}

char USART_Receive(void)
{
	while(!(UCSRA & (1<<RXC)))
    249e:	5f 9b       	sbis	0x0b, 7	; 11
    24a0:	fe cf       	rjmp	.-4      	; 0x249e <USART_Receive>
	;
	return UDR;
    24a2:	8c b1       	in	r24, 0x0c	; 12
}
    24a4:	08 95       	ret

000024a6 <__vector_13>:
/************************************************************************/
/*	When reading rx, If rx buffer count is larger than 20 then reset the 
	buffer                                                              */
/************************************************************************/
ISR(USART_RXC_vect)
{
    24a6:	1f 92       	push	r1
    24a8:	0f 92       	push	r0
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	0f 92       	push	r0
    24ae:	11 24       	eor	r1, r1
    24b0:	2f 93       	push	r18
    24b2:	3f 93       	push	r19
    24b4:	4f 93       	push	r20
    24b6:	5f 93       	push	r21
    24b8:	6f 93       	push	r22
    24ba:	7f 93       	push	r23
    24bc:	8f 93       	push	r24
    24be:	9f 93       	push	r25
    24c0:	af 93       	push	r26
    24c2:	bf 93       	push	r27
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	ef 93       	push	r30
    24ca:	ff 93       	push	r31
	
	if (rxrawbufferidx > 19)
    24cc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <rxrawbufferidx>
    24d0:	84 31       	cpi	r24, 0x14	; 20
    24d2:	10 f0       	brcs	.+4      	; 0x24d8 <__vector_13+0x32>
	{
		rxrawbufferidx = 0;
    24d4:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <rxrawbufferidx>
	}
	
	rxrawbuffer[rxrawbufferidx] = USART_Receive();
    24d8:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <rxrawbufferidx>
    24dc:	d0 e0       	ldi	r29, 0x00	; 0
    24de:	0e 94 4f 12 	call	0x249e	; 0x249e <USART_Receive>
    24e2:	c8 56       	subi	r28, 0x68	; 104
    24e4:	da 4f       	sbci	r29, 0xFA	; 250
    24e6:	88 83       	st	Y, r24
	rxrawbufferidx++;
    24e8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <rxrawbufferidx>
    24ec:	8f 5f       	subi	r24, 0xFF	; 255
    24ee:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <rxrawbufferidx>
	rxBufferValid = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <rxBufferValid>
	
}
    24f8:	ff 91       	pop	r31
    24fa:	ef 91       	pop	r30
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	bf 91       	pop	r27
    2502:	af 91       	pop	r26
    2504:	9f 91       	pop	r25
    2506:	8f 91       	pop	r24
    2508:	7f 91       	pop	r23
    250a:	6f 91       	pop	r22
    250c:	5f 91       	pop	r21
    250e:	4f 91       	pop	r20
    2510:	3f 91       	pop	r19
    2512:	2f 91       	pop	r18
    2514:	0f 90       	pop	r0
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	0f 90       	pop	r0
    251a:	1f 90       	pop	r1
    251c:	18 95       	reti

0000251e <USART_transmit>:
	return UDR;
}

void USART_transmit(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    251e:	5d 9b       	sbis	0x0b, 5	; 11
    2520:	fe cf       	rjmp	.-4      	; 0x251e <USART_transmit>
	;

	UDR = data;
    2522:	8c b9       	out	0x0c, r24	; 12
    2524:	08 95       	ret

00002526 <USART_TransmitString>:
}

void USART_TransmitString(char *dat)
{
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
	unsigned char size = strlen((const char*)dat);
    252e:	fc 01       	movw	r30, r24
    2530:	01 90       	ld	r0, Z+
    2532:	00 20       	and	r0, r0
    2534:	e9 f7       	brne	.-6      	; 0x2530 <USART_TransmitString+0xa>
    2536:	31 97       	sbiw	r30, 0x01	; 1
    2538:	ce 2f       	mov	r28, r30
    253a:	c8 1b       	sub	r28, r24
    253c:	d8 2f       	mov	r29, r24

	unsigned char i = 0;

	for(i=0;i<size;i++)
    253e:	8c 01       	movw	r16, r24
    2540:	80 2f       	mov	r24, r16
    2542:	8d 1b       	sub	r24, r29
    2544:	8c 17       	cp	r24, r28
    2546:	30 f4       	brcc	.+12     	; 0x2554 <USART_TransmitString+0x2e>
	{
		USART_transmit(dat[i]);
    2548:	f8 01       	movw	r30, r16
    254a:	81 91       	ld	r24, Z+
    254c:	8f 01       	movw	r16, r30
    254e:	0e 94 8f 12 	call	0x251e	; 0x251e <USART_transmit>
    2552:	f6 cf       	rjmp	.-20     	; 0x2540 <USART_TransmitString+0x1a>
	}
}
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	08 95       	ret

0000255e <__udivmodqi4>:
    255e:	99 1b       	sub	r25, r25
    2560:	79 e0       	ldi	r23, 0x09	; 9
    2562:	04 c0       	rjmp	.+8      	; 0x256c <__udivmodqi4_ep>

00002564 <__udivmodqi4_loop>:
    2564:	99 1f       	adc	r25, r25
    2566:	96 17       	cp	r25, r22
    2568:	08 f0       	brcs	.+2      	; 0x256c <__udivmodqi4_ep>
    256a:	96 1b       	sub	r25, r22

0000256c <__udivmodqi4_ep>:
    256c:	88 1f       	adc	r24, r24
    256e:	7a 95       	dec	r23
    2570:	c9 f7       	brne	.-14     	; 0x2564 <__udivmodqi4_loop>
    2572:	80 95       	com	r24
    2574:	08 95       	ret

00002576 <__udivmodhi4>:
    2576:	aa 1b       	sub	r26, r26
    2578:	bb 1b       	sub	r27, r27
    257a:	51 e1       	ldi	r21, 0x11	; 17
    257c:	07 c0       	rjmp	.+14     	; 0x258c <__udivmodhi4_ep>

0000257e <__udivmodhi4_loop>:
    257e:	aa 1f       	adc	r26, r26
    2580:	bb 1f       	adc	r27, r27
    2582:	a6 17       	cp	r26, r22
    2584:	b7 07       	cpc	r27, r23
    2586:	10 f0       	brcs	.+4      	; 0x258c <__udivmodhi4_ep>
    2588:	a6 1b       	sub	r26, r22
    258a:	b7 0b       	sbc	r27, r23

0000258c <__udivmodhi4_ep>:
    258c:	88 1f       	adc	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	5a 95       	dec	r21
    2592:	a9 f7       	brne	.-22     	; 0x257e <__udivmodhi4_loop>
    2594:	80 95       	com	r24
    2596:	90 95       	com	r25
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	08 95       	ret

0000259e <__udivmodsi4>:
    259e:	a1 e2       	ldi	r26, 0x21	; 33
    25a0:	1a 2e       	mov	r1, r26
    25a2:	aa 1b       	sub	r26, r26
    25a4:	bb 1b       	sub	r27, r27
    25a6:	fd 01       	movw	r30, r26
    25a8:	0d c0       	rjmp	.+26     	; 0x25c4 <__udivmodsi4_ep>

000025aa <__udivmodsi4_loop>:
    25aa:	aa 1f       	adc	r26, r26
    25ac:	bb 1f       	adc	r27, r27
    25ae:	ee 1f       	adc	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	a2 17       	cp	r26, r18
    25b4:	b3 07       	cpc	r27, r19
    25b6:	e4 07       	cpc	r30, r20
    25b8:	f5 07       	cpc	r31, r21
    25ba:	20 f0       	brcs	.+8      	; 0x25c4 <__udivmodsi4_ep>
    25bc:	a2 1b       	sub	r26, r18
    25be:	b3 0b       	sbc	r27, r19
    25c0:	e4 0b       	sbc	r30, r20
    25c2:	f5 0b       	sbc	r31, r21

000025c4 <__udivmodsi4_ep>:
    25c4:	66 1f       	adc	r22, r22
    25c6:	77 1f       	adc	r23, r23
    25c8:	88 1f       	adc	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	1a 94       	dec	r1
    25ce:	69 f7       	brne	.-38     	; 0x25aa <__udivmodsi4_loop>
    25d0:	60 95       	com	r22
    25d2:	70 95       	com	r23
    25d4:	80 95       	com	r24
    25d6:	90 95       	com	r25
    25d8:	9b 01       	movw	r18, r22
    25da:	ac 01       	movw	r20, r24
    25dc:	bd 01       	movw	r22, r26
    25de:	cf 01       	movw	r24, r30
    25e0:	08 95       	ret

000025e2 <__divmodsi4>:
    25e2:	05 2e       	mov	r0, r21
    25e4:	97 fb       	bst	r25, 7
    25e6:	1e f4       	brtc	.+6      	; 0x25ee <__divmodsi4+0xc>
    25e8:	00 94       	com	r0
    25ea:	0e 94 08 13 	call	0x2610	; 0x2610 <__negsi2>
    25ee:	57 fd       	sbrc	r21, 7
    25f0:	07 d0       	rcall	.+14     	; 0x2600 <__divmodsi4_neg2>
    25f2:	0e 94 cf 12 	call	0x259e	; 0x259e <__udivmodsi4>
    25f6:	07 fc       	sbrc	r0, 7
    25f8:	03 d0       	rcall	.+6      	; 0x2600 <__divmodsi4_neg2>
    25fa:	4e f4       	brtc	.+18     	; 0x260e <__divmodsi4_exit>
    25fc:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__negsi2>

00002600 <__divmodsi4_neg2>:
    2600:	50 95       	com	r21
    2602:	40 95       	com	r20
    2604:	30 95       	com	r19
    2606:	21 95       	neg	r18
    2608:	3f 4f       	sbci	r19, 0xFF	; 255
    260a:	4f 4f       	sbci	r20, 0xFF	; 255
    260c:	5f 4f       	sbci	r21, 0xFF	; 255

0000260e <__divmodsi4_exit>:
    260e:	08 95       	ret

00002610 <__negsi2>:
    2610:	90 95       	com	r25
    2612:	80 95       	com	r24
    2614:	70 95       	com	r23
    2616:	61 95       	neg	r22
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	8f 4f       	sbci	r24, 0xFF	; 255
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	08 95       	ret

00002620 <__umulhisi3>:
    2620:	a2 9f       	mul	r26, r18
    2622:	b0 01       	movw	r22, r0
    2624:	b3 9f       	mul	r27, r19
    2626:	c0 01       	movw	r24, r0
    2628:	a3 9f       	mul	r26, r19
    262a:	70 0d       	add	r23, r0
    262c:	81 1d       	adc	r24, r1
    262e:	11 24       	eor	r1, r1
    2630:	91 1d       	adc	r25, r1
    2632:	b2 9f       	mul	r27, r18
    2634:	70 0d       	add	r23, r0
    2636:	81 1d       	adc	r24, r1
    2638:	11 24       	eor	r1, r1
    263a:	91 1d       	adc	r25, r1
    263c:	08 95       	ret

0000263e <__muluhisi3>:
    263e:	0e 94 10 13 	call	0x2620	; 0x2620 <__umulhisi3>
    2642:	a5 9f       	mul	r26, r21
    2644:	90 0d       	add	r25, r0
    2646:	b4 9f       	mul	r27, r20
    2648:	90 0d       	add	r25, r0
    264a:	a4 9f       	mul	r26, r20
    264c:	80 0d       	add	r24, r0
    264e:	91 1d       	adc	r25, r1
    2650:	11 24       	eor	r1, r1
    2652:	08 95       	ret

00002654 <strtol>:
    2654:	a0 e0       	ldi	r26, 0x00	; 0
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e0 e3       	ldi	r30, 0x30	; 48
    265a:	f3 e1       	ldi	r31, 0x13	; 19
    265c:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x2>
    2660:	5c 01       	movw	r10, r24
    2662:	6b 01       	movw	r12, r22
    2664:	7a 01       	movw	r14, r20
    2666:	61 15       	cp	r22, r1
    2668:	71 05       	cpc	r23, r1
    266a:	19 f0       	breq	.+6      	; 0x2672 <strtol+0x1e>
    266c:	fb 01       	movw	r30, r22
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	e1 14       	cp	r14, r1
    2674:	f1 04       	cpc	r15, r1
    2676:	29 f0       	breq	.+10     	; 0x2682 <strtol+0x2e>
    2678:	c7 01       	movw	r24, r14
    267a:	02 97       	sbiw	r24, 0x02	; 2
    267c:	83 97       	sbiw	r24, 0x23	; 35
    267e:	08 f0       	brcs	.+2      	; 0x2682 <strtol+0x2e>
    2680:	e5 c0       	rjmp	.+458    	; 0x284c <strtol+0x1f8>
    2682:	e5 01       	movw	r28, r10
    2684:	21 96       	adiw	r28, 0x01	; 1
    2686:	f5 01       	movw	r30, r10
    2688:	10 81       	ld	r17, Z
    268a:	81 2f       	mov	r24, r17
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 40 14 	call	0x2880	; 0x2880 <isspace>
    2692:	89 2b       	or	r24, r25
    2694:	11 f0       	breq	.+4      	; 0x269a <strtol+0x46>
    2696:	5e 01       	movw	r10, r28
    2698:	f4 cf       	rjmp	.-24     	; 0x2682 <strtol+0x2e>
    269a:	1d 32       	cpi	r17, 0x2D	; 45
    269c:	29 f4       	brne	.+10     	; 0x26a8 <strtol+0x54>
    269e:	21 96       	adiw	r28, 0x01	; 1
    26a0:	f5 01       	movw	r30, r10
    26a2:	11 81       	ldd	r17, Z+1	; 0x01
    26a4:	01 e0       	ldi	r16, 0x01	; 1
    26a6:	07 c0       	rjmp	.+14     	; 0x26b6 <strtol+0x62>
    26a8:	1b 32       	cpi	r17, 0x2B	; 43
    26aa:	21 f4       	brne	.+8      	; 0x26b4 <strtol+0x60>
    26ac:	e5 01       	movw	r28, r10
    26ae:	22 96       	adiw	r28, 0x02	; 2
    26b0:	f5 01       	movw	r30, r10
    26b2:	11 81       	ldd	r17, Z+1	; 0x01
    26b4:	00 e0       	ldi	r16, 0x00	; 0
    26b6:	e1 14       	cp	r14, r1
    26b8:	f1 04       	cpc	r15, r1
    26ba:	09 f1       	breq	.+66     	; 0x26fe <strtol+0xaa>
    26bc:	f0 e1       	ldi	r31, 0x10	; 16
    26be:	ef 16       	cp	r14, r31
    26c0:	f1 04       	cpc	r15, r1
    26c2:	29 f4       	brne	.+10     	; 0x26ce <strtol+0x7a>
    26c4:	3f c0       	rjmp	.+126    	; 0x2744 <strtol+0xf0>
    26c6:	10 e3       	ldi	r17, 0x30	; 48
    26c8:	e1 14       	cp	r14, r1
    26ca:	f1 04       	cpc	r15, r1
    26cc:	21 f1       	breq	.+72     	; 0x2716 <strtol+0xc2>
    26ce:	28 e0       	ldi	r18, 0x08	; 8
    26d0:	e2 16       	cp	r14, r18
    26d2:	f1 04       	cpc	r15, r1
    26d4:	01 f1       	breq	.+64     	; 0x2716 <strtol+0xc2>
    26d6:	54 f4       	brge	.+20     	; 0x26ec <strtol+0x98>
    26d8:	e2 e0       	ldi	r30, 0x02	; 2
    26da:	ee 16       	cp	r14, r30
    26dc:	f1 04       	cpc	r15, r1
    26de:	21 f5       	brne	.+72     	; 0x2728 <strtol+0xd4>
    26e0:	81 2c       	mov	r8, r1
    26e2:	91 2c       	mov	r9, r1
    26e4:	a1 2c       	mov	r10, r1
    26e6:	b0 e4       	ldi	r27, 0x40	; 64
    26e8:	bb 2e       	mov	r11, r27
    26ea:	3e c0       	rjmp	.+124    	; 0x2768 <strtol+0x114>
    26ec:	fa e0       	ldi	r31, 0x0A	; 10
    26ee:	ef 16       	cp	r14, r31
    26f0:	f1 04       	cpc	r15, r1
    26f2:	39 f0       	breq	.+14     	; 0x2702 <strtol+0xae>
    26f4:	20 e1       	ldi	r18, 0x10	; 16
    26f6:	e2 16       	cp	r14, r18
    26f8:	f1 04       	cpc	r15, r1
    26fa:	b1 f4       	brne	.+44     	; 0x2728 <strtol+0xd4>
    26fc:	30 c0       	rjmp	.+96     	; 0x275e <strtol+0x10a>
    26fe:	10 33       	cpi	r17, 0x30	; 48
    2700:	19 f1       	breq	.+70     	; 0x2748 <strtol+0xf4>
    2702:	fa e0       	ldi	r31, 0x0A	; 10
    2704:	ef 2e       	mov	r14, r31
    2706:	f1 2c       	mov	r15, r1
    2708:	ac ec       	ldi	r26, 0xCC	; 204
    270a:	8a 2e       	mov	r8, r26
    270c:	98 2c       	mov	r9, r8
    270e:	a8 2c       	mov	r10, r8
    2710:	ac e0       	ldi	r26, 0x0C	; 12
    2712:	ba 2e       	mov	r11, r26
    2714:	29 c0       	rjmp	.+82     	; 0x2768 <strtol+0x114>
    2716:	78 e0       	ldi	r23, 0x08	; 8
    2718:	e7 2e       	mov	r14, r23
    271a:	f1 2c       	mov	r15, r1
    271c:	81 2c       	mov	r8, r1
    271e:	91 2c       	mov	r9, r1
    2720:	a1 2c       	mov	r10, r1
    2722:	e0 e1       	ldi	r30, 0x10	; 16
    2724:	be 2e       	mov	r11, r30
    2726:	20 c0       	rjmp	.+64     	; 0x2768 <strtol+0x114>
    2728:	60 e0       	ldi	r22, 0x00	; 0
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e8       	ldi	r25, 0x80	; 128
    2730:	97 01       	movw	r18, r14
    2732:	0f 2c       	mov	r0, r15
    2734:	00 0c       	add	r0, r0
    2736:	44 0b       	sbc	r20, r20
    2738:	55 0b       	sbc	r21, r21
    273a:	0e 94 cf 12 	call	0x259e	; 0x259e <__udivmodsi4>
    273e:	49 01       	movw	r8, r18
    2740:	5a 01       	movw	r10, r20
    2742:	12 c0       	rjmp	.+36     	; 0x2768 <strtol+0x114>
    2744:	10 33       	cpi	r17, 0x30	; 48
    2746:	59 f4       	brne	.+22     	; 0x275e <strtol+0x10a>
    2748:	88 81       	ld	r24, Y
    274a:	8f 7d       	andi	r24, 0xDF	; 223
    274c:	88 35       	cpi	r24, 0x58	; 88
    274e:	09 f0       	breq	.+2      	; 0x2752 <strtol+0xfe>
    2750:	ba cf       	rjmp	.-140    	; 0x26c6 <strtol+0x72>
    2752:	19 81       	ldd	r17, Y+1	; 0x01
    2754:	22 96       	adiw	r28, 0x02	; 2
    2756:	02 60       	ori	r16, 0x02	; 2
    2758:	80 e1       	ldi	r24, 0x10	; 16
    275a:	e8 2e       	mov	r14, r24
    275c:	f1 2c       	mov	r15, r1
    275e:	81 2c       	mov	r8, r1
    2760:	91 2c       	mov	r9, r1
    2762:	a1 2c       	mov	r10, r1
    2764:	68 e0       	ldi	r22, 0x08	; 8
    2766:	b6 2e       	mov	r11, r22
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	cb 01       	movw	r24, r22
    2770:	27 01       	movw	r4, r14
    2772:	0f 2c       	mov	r0, r15
    2774:	00 0c       	add	r0, r0
    2776:	66 08       	sbc	r6, r6
    2778:	77 08       	sbc	r7, r7
    277a:	fe 01       	movw	r30, r28
    277c:	50 ed       	ldi	r21, 0xD0	; 208
    277e:	35 2e       	mov	r3, r21
    2780:	31 0e       	add	r3, r17
    2782:	29 e0       	ldi	r18, 0x09	; 9
    2784:	23 15       	cp	r18, r3
    2786:	70 f4       	brcc	.+28     	; 0x27a4 <strtol+0x150>
    2788:	2f eb       	ldi	r18, 0xBF	; 191
    278a:	21 0f       	add	r18, r17
    278c:	2a 31       	cpi	r18, 0x1A	; 26
    278e:	18 f4       	brcc	.+6      	; 0x2796 <strtol+0x142>
    2790:	39 ec       	ldi	r19, 0xC9	; 201
    2792:	33 2e       	mov	r3, r19
    2794:	06 c0       	rjmp	.+12     	; 0x27a2 <strtol+0x14e>
    2796:	2f e9       	ldi	r18, 0x9F	; 159
    2798:	21 0f       	add	r18, r17
    279a:	2a 31       	cpi	r18, 0x1A	; 26
    279c:	18 f5       	brcc	.+70     	; 0x27e4 <strtol+0x190>
    279e:	29 ea       	ldi	r18, 0xA9	; 169
    27a0:	32 2e       	mov	r3, r18
    27a2:	31 0e       	add	r3, r17
    27a4:	23 2d       	mov	r18, r3
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	2e 15       	cp	r18, r14
    27aa:	3f 05       	cpc	r19, r15
    27ac:	dc f4       	brge	.+54     	; 0x27e4 <strtol+0x190>
    27ae:	47 fd       	sbrc	r20, 7
    27b0:	16 c0       	rjmp	.+44     	; 0x27de <strtol+0x18a>
    27b2:	86 16       	cp	r8, r22
    27b4:	97 06       	cpc	r9, r23
    27b6:	a8 06       	cpc	r10, r24
    27b8:	b9 06       	cpc	r11, r25
    27ba:	70 f0       	brcs	.+28     	; 0x27d8 <strtol+0x184>
    27bc:	a3 01       	movw	r20, r6
    27be:	92 01       	movw	r18, r4
    27c0:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__mulsi3>
    27c4:	63 0d       	add	r22, r3
    27c6:	71 1d       	adc	r23, r1
    27c8:	81 1d       	adc	r24, r1
    27ca:	91 1d       	adc	r25, r1
    27cc:	61 30       	cpi	r22, 0x01	; 1
    27ce:	71 05       	cpc	r23, r1
    27d0:	81 05       	cpc	r24, r1
    27d2:	20 e8       	ldi	r18, 0x80	; 128
    27d4:	92 07       	cpc	r25, r18
    27d6:	10 f0       	brcs	.+4      	; 0x27dc <strtol+0x188>
    27d8:	4f ef       	ldi	r20, 0xFF	; 255
    27da:	01 c0       	rjmp	.+2      	; 0x27de <strtol+0x18a>
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	21 96       	adiw	r28, 0x01	; 1
    27e0:	10 81       	ld	r17, Z
    27e2:	cb cf       	rjmp	.-106    	; 0x277a <strtol+0x126>
    27e4:	20 2f       	mov	r18, r16
    27e6:	21 70       	andi	r18, 0x01	; 1
    27e8:	c1 14       	cp	r12, r1
    27ea:	d1 04       	cpc	r13, r1
    27ec:	71 f0       	breq	.+28     	; 0x280a <strtol+0x1b6>
    27ee:	44 23       	and	r20, r20
    27f0:	29 f0       	breq	.+10     	; 0x27fc <strtol+0x1a8>
    27f2:	21 97       	sbiw	r28, 0x01	; 1
    27f4:	f6 01       	movw	r30, r12
    27f6:	d1 83       	std	Z+1, r29	; 0x01
    27f8:	c0 83       	st	Z, r28
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <strtol+0x1b6>
    27fc:	01 ff       	sbrs	r16, 1
    27fe:	19 c0       	rjmp	.+50     	; 0x2832 <strtol+0x1de>
    2800:	22 97       	sbiw	r28, 0x02	; 2
    2802:	f6 01       	movw	r30, r12
    2804:	d1 83       	std	Z+1, r29	; 0x01
    2806:	c0 83       	st	Z, r28
    2808:	14 c0       	rjmp	.+40     	; 0x2832 <strtol+0x1de>
    280a:	47 ff       	sbrs	r20, 7
    280c:	12 c0       	rjmp	.+36     	; 0x2832 <strtol+0x1de>
    280e:	22 23       	and	r18, r18
    2810:	29 f0       	breq	.+10     	; 0x281c <strtol+0x1c8>
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e8       	ldi	r25, 0x80	; 128
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <strtol+0x1d0>
    281c:	6f ef       	ldi	r22, 0xFF	; 255
    281e:	7f ef       	ldi	r23, 0xFF	; 255
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	9f e7       	ldi	r25, 0x7F	; 127
    2824:	22 e2       	ldi	r18, 0x22	; 34
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <errno+0x1>
    282c:	20 93 ac 05 	sts	0x05AC, r18	; 0x8005ac <errno>
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <strtol+0x1f0>
    2832:	22 23       	and	r18, r18
    2834:	81 f0       	breq	.+32     	; 0x2856 <strtol+0x202>
    2836:	90 95       	com	r25
    2838:	80 95       	com	r24
    283a:	70 95       	com	r23
    283c:	61 95       	neg	r22
    283e:	7f 4f       	sbci	r23, 0xFF	; 255
    2840:	8f 4f       	sbci	r24, 0xFF	; 255
    2842:	9f 4f       	sbci	r25, 0xFF	; 255
    2844:	46 2f       	mov	r20, r22
    2846:	37 2f       	mov	r19, r23
    2848:	28 2f       	mov	r18, r24
    284a:	12 c0       	rjmp	.+36     	; 0x2870 <strtol+0x21c>
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0d c0       	rjmp	.+26     	; 0x2870 <strtol+0x21c>
    2856:	97 ff       	sbrs	r25, 7
    2858:	f5 cf       	rjmp	.-22     	; 0x2844 <strtol+0x1f0>
    285a:	82 e2       	ldi	r24, 0x22	; 34
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <errno+0x1>
    2862:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <errno>
    2866:	6f ef       	ldi	r22, 0xFF	; 255
    2868:	7f ef       	ldi	r23, 0xFF	; 255
    286a:	8f ef       	ldi	r24, 0xFF	; 255
    286c:	9f e7       	ldi	r25, 0x7F	; 127
    286e:	ea cf       	rjmp	.-44     	; 0x2844 <strtol+0x1f0>
    2870:	64 2f       	mov	r22, r20
    2872:	73 2f       	mov	r23, r19
    2874:	82 2f       	mov	r24, r18
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	e1 e1       	ldi	r30, 0x11	; 17
    287c:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x2>

00002880 <isspace>:
    2880:	91 11       	cpse	r25, r1
    2882:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__ctype_isfalse>
    2886:	80 32       	cpi	r24, 0x20	; 32
    2888:	19 f0       	breq	.+6      	; 0x2890 <isspace+0x10>
    288a:	89 50       	subi	r24, 0x09	; 9
    288c:	85 50       	subi	r24, 0x05	; 5
    288e:	c8 f7       	brcc	.-14     	; 0x2882 <isspace+0x2>
    2890:	08 95       	ret

00002892 <strcpy_P>:
    2892:	fb 01       	movw	r30, r22
    2894:	dc 01       	movw	r26, r24
    2896:	05 90       	lpm	r0, Z+
    2898:	0d 92       	st	X+, r0
    289a:	00 20       	and	r0, r0
    289c:	e1 f7       	brne	.-8      	; 0x2896 <strcpy_P+0x4>
    289e:	08 95       	ret

000028a0 <strcat>:
    28a0:	fb 01       	movw	r30, r22
    28a2:	dc 01       	movw	r26, r24
    28a4:	0d 90       	ld	r0, X+
    28a6:	00 20       	and	r0, r0
    28a8:	e9 f7       	brne	.-6      	; 0x28a4 <strcat+0x4>
    28aa:	11 97       	sbiw	r26, 0x01	; 1
    28ac:	01 90       	ld	r0, Z+
    28ae:	0d 92       	st	X+, r0
    28b0:	00 20       	and	r0, r0
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <strcat+0xc>
    28b4:	08 95       	ret

000028b6 <strncat>:
    28b6:	fb 01       	movw	r30, r22
    28b8:	dc 01       	movw	r26, r24
    28ba:	0d 90       	ld	r0, X+
    28bc:	00 20       	and	r0, r0
    28be:	e9 f7       	brne	.-6      	; 0x28ba <strncat+0x4>
    28c0:	11 97       	sbiw	r26, 0x01	; 1
    28c2:	41 50       	subi	r20, 0x01	; 1
    28c4:	50 40       	sbci	r21, 0x00	; 0
    28c6:	28 f0       	brcs	.+10     	; 0x28d2 <strncat+0x1c>
    28c8:	01 90       	ld	r0, Z+
    28ca:	00 20       	and	r0, r0
    28cc:	0d 92       	st	X+, r0
    28ce:	c9 f7       	brne	.-14     	; 0x28c2 <strncat+0xc>
    28d0:	08 95       	ret
    28d2:	1c 92       	st	X, r1
    28d4:	08 95       	ret

000028d6 <strncpy>:
    28d6:	fb 01       	movw	r30, r22
    28d8:	dc 01       	movw	r26, r24
    28da:	41 50       	subi	r20, 0x01	; 1
    28dc:	50 40       	sbci	r21, 0x00	; 0
    28de:	48 f0       	brcs	.+18     	; 0x28f2 <strncpy+0x1c>
    28e0:	01 90       	ld	r0, Z+
    28e2:	0d 92       	st	X+, r0
    28e4:	00 20       	and	r0, r0
    28e6:	c9 f7       	brne	.-14     	; 0x28da <strncpy+0x4>
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <strncpy+0x16>
    28ea:	1d 92       	st	X+, r1
    28ec:	41 50       	subi	r20, 0x01	; 1
    28ee:	50 40       	sbci	r21, 0x00	; 0
    28f0:	e0 f7       	brcc	.-8      	; 0x28ea <strncpy+0x14>
    28f2:	08 95       	ret

000028f4 <__itoa_ncheck>:
    28f4:	bb 27       	eor	r27, r27
    28f6:	4a 30       	cpi	r20, 0x0A	; 10
    28f8:	31 f4       	brne	.+12     	; 0x2906 <__itoa_ncheck+0x12>
    28fa:	99 23       	and	r25, r25
    28fc:	22 f4       	brpl	.+8      	; 0x2906 <__itoa_ncheck+0x12>
    28fe:	bd e2       	ldi	r27, 0x2D	; 45
    2900:	90 95       	com	r25
    2902:	81 95       	neg	r24
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	0c 94 86 14 	jmp	0x290c	; 0x290c <__utoa_common>

0000290a <__utoa_ncheck>:
    290a:	bb 27       	eor	r27, r27

0000290c <__utoa_common>:
    290c:	fb 01       	movw	r30, r22
    290e:	55 27       	eor	r21, r21
    2910:	aa 27       	eor	r26, r26
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	aa 1f       	adc	r26, r26
    2918:	a4 17       	cp	r26, r20
    291a:	10 f0       	brcs	.+4      	; 0x2920 <__utoa_common+0x14>
    291c:	a4 1b       	sub	r26, r20
    291e:	83 95       	inc	r24
    2920:	50 51       	subi	r21, 0x10	; 16
    2922:	b9 f7       	brne	.-18     	; 0x2912 <__utoa_common+0x6>
    2924:	a0 5d       	subi	r26, 0xD0	; 208
    2926:	aa 33       	cpi	r26, 0x3A	; 58
    2928:	08 f0       	brcs	.+2      	; 0x292c <__utoa_common+0x20>
    292a:	a9 5d       	subi	r26, 0xD9	; 217
    292c:	a1 93       	st	Z+, r26
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	79 f7       	brne	.-34     	; 0x2910 <__utoa_common+0x4>
    2932:	b1 11       	cpse	r27, r1
    2934:	b1 93       	st	Z+, r27
    2936:	11 92       	st	Z+, r1
    2938:	cb 01       	movw	r24, r22
    293a:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <strrev>

0000293e <sprintf>:
    293e:	ae e0       	ldi	r26, 0x0E	; 14
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e5 ea       	ldi	r30, 0xA5	; 165
    2944:	f4 e1       	ldi	r31, 0x14	; 20
    2946:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x1c>
    294a:	0d 89       	ldd	r16, Y+21	; 0x15
    294c:	1e 89       	ldd	r17, Y+22	; 0x16
    294e:	86 e0       	ldi	r24, 0x06	; 6
    2950:	8c 83       	std	Y+4, r24	; 0x04
    2952:	1a 83       	std	Y+2, r17	; 0x02
    2954:	09 83       	std	Y+1, r16	; 0x01
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	9f e7       	ldi	r25, 0x7F	; 127
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	ae 01       	movw	r20, r28
    2960:	47 5e       	subi	r20, 0xE7	; 231
    2962:	5f 4f       	sbci	r21, 0xFF	; 255
    2964:	6f 89       	ldd	r22, Y+23	; 0x17
    2966:	78 8d       	ldd	r23, Y+24	; 0x18
    2968:	ce 01       	movw	r24, r28
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	0e 94 c1 14 	call	0x2982	; 0x2982 <vfprintf>
    2970:	ef 81       	ldd	r30, Y+7	; 0x07
    2972:	f8 85       	ldd	r31, Y+8	; 0x08
    2974:	e0 0f       	add	r30, r16
    2976:	f1 1f       	adc	r31, r17
    2978:	10 82       	st	Z, r1
    297a:	2e 96       	adiw	r28, 0x0e	; 14
    297c:	e4 e0       	ldi	r30, 0x04	; 4
    297e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x1c>

00002982 <vfprintf>:
    2982:	ab e0       	ldi	r26, 0x0B	; 11
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e7 ec       	ldi	r30, 0xC7	; 199
    2988:	f4 e1       	ldi	r31, 0x14	; 20
    298a:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__prologue_saves__>
    298e:	6c 01       	movw	r12, r24
    2990:	7b 01       	movw	r14, r22
    2992:	8a 01       	movw	r16, r20
    2994:	fc 01       	movw	r30, r24
    2996:	17 82       	std	Z+7, r1	; 0x07
    2998:	16 82       	std	Z+6, r1	; 0x06
    299a:	83 81       	ldd	r24, Z+3	; 0x03
    299c:	81 ff       	sbrs	r24, 1
    299e:	cc c1       	rjmp	.+920    	; 0x2d38 <vfprintf+0x3b6>
    29a0:	ce 01       	movw	r24, r28
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	3c 01       	movw	r6, r24
    29a6:	f6 01       	movw	r30, r12
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	f7 01       	movw	r30, r14
    29ac:	93 fd       	sbrc	r25, 3
    29ae:	85 91       	lpm	r24, Z+
    29b0:	93 ff       	sbrs	r25, 3
    29b2:	81 91       	ld	r24, Z+
    29b4:	7f 01       	movw	r14, r30
    29b6:	88 23       	and	r24, r24
    29b8:	09 f4       	brne	.+2      	; 0x29bc <vfprintf+0x3a>
    29ba:	ba c1       	rjmp	.+884    	; 0x2d30 <vfprintf+0x3ae>
    29bc:	85 32       	cpi	r24, 0x25	; 37
    29be:	39 f4       	brne	.+14     	; 0x29ce <vfprintf+0x4c>
    29c0:	93 fd       	sbrc	r25, 3
    29c2:	85 91       	lpm	r24, Z+
    29c4:	93 ff       	sbrs	r25, 3
    29c6:	81 91       	ld	r24, Z+
    29c8:	7f 01       	movw	r14, r30
    29ca:	85 32       	cpi	r24, 0x25	; 37
    29cc:	29 f4       	brne	.+10     	; 0x29d8 <vfprintf+0x56>
    29ce:	b6 01       	movw	r22, r12
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    29d6:	e7 cf       	rjmp	.-50     	; 0x29a6 <vfprintf+0x24>
    29d8:	91 2c       	mov	r9, r1
    29da:	21 2c       	mov	r2, r1
    29dc:	31 2c       	mov	r3, r1
    29de:	ff e1       	ldi	r31, 0x1F	; 31
    29e0:	f3 15       	cp	r31, r3
    29e2:	d8 f0       	brcs	.+54     	; 0x2a1a <vfprintf+0x98>
    29e4:	8b 32       	cpi	r24, 0x2B	; 43
    29e6:	79 f0       	breq	.+30     	; 0x2a06 <vfprintf+0x84>
    29e8:	38 f4       	brcc	.+14     	; 0x29f8 <vfprintf+0x76>
    29ea:	80 32       	cpi	r24, 0x20	; 32
    29ec:	79 f0       	breq	.+30     	; 0x2a0c <vfprintf+0x8a>
    29ee:	83 32       	cpi	r24, 0x23	; 35
    29f0:	a1 f4       	brne	.+40     	; 0x2a1a <vfprintf+0x98>
    29f2:	23 2d       	mov	r18, r3
    29f4:	20 61       	ori	r18, 0x10	; 16
    29f6:	1d c0       	rjmp	.+58     	; 0x2a32 <vfprintf+0xb0>
    29f8:	8d 32       	cpi	r24, 0x2D	; 45
    29fa:	61 f0       	breq	.+24     	; 0x2a14 <vfprintf+0x92>
    29fc:	80 33       	cpi	r24, 0x30	; 48
    29fe:	69 f4       	brne	.+26     	; 0x2a1a <vfprintf+0x98>
    2a00:	23 2d       	mov	r18, r3
    2a02:	21 60       	ori	r18, 0x01	; 1
    2a04:	16 c0       	rjmp	.+44     	; 0x2a32 <vfprintf+0xb0>
    2a06:	83 2d       	mov	r24, r3
    2a08:	82 60       	ori	r24, 0x02	; 2
    2a0a:	38 2e       	mov	r3, r24
    2a0c:	e3 2d       	mov	r30, r3
    2a0e:	e4 60       	ori	r30, 0x04	; 4
    2a10:	3e 2e       	mov	r3, r30
    2a12:	2a c0       	rjmp	.+84     	; 0x2a68 <vfprintf+0xe6>
    2a14:	f3 2d       	mov	r31, r3
    2a16:	f8 60       	ori	r31, 0x08	; 8
    2a18:	1d c0       	rjmp	.+58     	; 0x2a54 <vfprintf+0xd2>
    2a1a:	37 fc       	sbrc	r3, 7
    2a1c:	2d c0       	rjmp	.+90     	; 0x2a78 <vfprintf+0xf6>
    2a1e:	20 ed       	ldi	r18, 0xD0	; 208
    2a20:	28 0f       	add	r18, r24
    2a22:	2a 30       	cpi	r18, 0x0A	; 10
    2a24:	40 f0       	brcs	.+16     	; 0x2a36 <vfprintf+0xb4>
    2a26:	8e 32       	cpi	r24, 0x2E	; 46
    2a28:	b9 f4       	brne	.+46     	; 0x2a58 <vfprintf+0xd6>
    2a2a:	36 fc       	sbrc	r3, 6
    2a2c:	81 c1       	rjmp	.+770    	; 0x2d30 <vfprintf+0x3ae>
    2a2e:	23 2d       	mov	r18, r3
    2a30:	20 64       	ori	r18, 0x40	; 64
    2a32:	32 2e       	mov	r3, r18
    2a34:	19 c0       	rjmp	.+50     	; 0x2a68 <vfprintf+0xe6>
    2a36:	36 fe       	sbrs	r3, 6
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <vfprintf+0xc4>
    2a3a:	8a e0       	ldi	r24, 0x0A	; 10
    2a3c:	98 9e       	mul	r9, r24
    2a3e:	20 0d       	add	r18, r0
    2a40:	11 24       	eor	r1, r1
    2a42:	92 2e       	mov	r9, r18
    2a44:	11 c0       	rjmp	.+34     	; 0x2a68 <vfprintf+0xe6>
    2a46:	ea e0       	ldi	r30, 0x0A	; 10
    2a48:	2e 9e       	mul	r2, r30
    2a4a:	20 0d       	add	r18, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	22 2e       	mov	r2, r18
    2a50:	f3 2d       	mov	r31, r3
    2a52:	f0 62       	ori	r31, 0x20	; 32
    2a54:	3f 2e       	mov	r3, r31
    2a56:	08 c0       	rjmp	.+16     	; 0x2a68 <vfprintf+0xe6>
    2a58:	8c 36       	cpi	r24, 0x6C	; 108
    2a5a:	21 f4       	brne	.+8      	; 0x2a64 <vfprintf+0xe2>
    2a5c:	83 2d       	mov	r24, r3
    2a5e:	80 68       	ori	r24, 0x80	; 128
    2a60:	38 2e       	mov	r3, r24
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <vfprintf+0xe6>
    2a64:	88 36       	cpi	r24, 0x68	; 104
    2a66:	41 f4       	brne	.+16     	; 0x2a78 <vfprintf+0xf6>
    2a68:	f7 01       	movw	r30, r14
    2a6a:	93 fd       	sbrc	r25, 3
    2a6c:	85 91       	lpm	r24, Z+
    2a6e:	93 ff       	sbrs	r25, 3
    2a70:	81 91       	ld	r24, Z+
    2a72:	7f 01       	movw	r14, r30
    2a74:	81 11       	cpse	r24, r1
    2a76:	b3 cf       	rjmp	.-154    	; 0x29de <vfprintf+0x5c>
    2a78:	98 2f       	mov	r25, r24
    2a7a:	9f 7d       	andi	r25, 0xDF	; 223
    2a7c:	95 54       	subi	r25, 0x45	; 69
    2a7e:	93 30       	cpi	r25, 0x03	; 3
    2a80:	28 f4       	brcc	.+10     	; 0x2a8c <vfprintf+0x10a>
    2a82:	0c 5f       	subi	r16, 0xFC	; 252
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	9f e3       	ldi	r25, 0x3F	; 63
    2a88:	99 83       	std	Y+1, r25	; 0x01
    2a8a:	0d c0       	rjmp	.+26     	; 0x2aa6 <vfprintf+0x124>
    2a8c:	83 36       	cpi	r24, 0x63	; 99
    2a8e:	31 f0       	breq	.+12     	; 0x2a9c <vfprintf+0x11a>
    2a90:	83 37       	cpi	r24, 0x73	; 115
    2a92:	71 f0       	breq	.+28     	; 0x2ab0 <vfprintf+0x12e>
    2a94:	83 35       	cpi	r24, 0x53	; 83
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <vfprintf+0x118>
    2a98:	59 c0       	rjmp	.+178    	; 0x2b4c <vfprintf+0x1ca>
    2a9a:	21 c0       	rjmp	.+66     	; 0x2ade <vfprintf+0x15c>
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	80 81       	ld	r24, Z
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	0e 5f       	subi	r16, 0xFE	; 254
    2aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa6:	88 24       	eor	r8, r8
    2aa8:	83 94       	inc	r8
    2aaa:	91 2c       	mov	r9, r1
    2aac:	53 01       	movw	r10, r6
    2aae:	13 c0       	rjmp	.+38     	; 0x2ad6 <vfprintf+0x154>
    2ab0:	28 01       	movw	r4, r16
    2ab2:	f2 e0       	ldi	r31, 0x02	; 2
    2ab4:	4f 0e       	add	r4, r31
    2ab6:	51 1c       	adc	r5, r1
    2ab8:	f8 01       	movw	r30, r16
    2aba:	a0 80       	ld	r10, Z
    2abc:	b1 80       	ldd	r11, Z+1	; 0x01
    2abe:	36 fe       	sbrs	r3, 6
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <vfprintf+0x146>
    2ac2:	69 2d       	mov	r22, r9
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <vfprintf+0x14a>
    2ac8:	6f ef       	ldi	r22, 0xFF	; 255
    2aca:	7f ef       	ldi	r23, 0xFF	; 255
    2acc:	c5 01       	movw	r24, r10
    2ace:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <strnlen>
    2ad2:	4c 01       	movw	r8, r24
    2ad4:	82 01       	movw	r16, r4
    2ad6:	f3 2d       	mov	r31, r3
    2ad8:	ff 77       	andi	r31, 0x7F	; 127
    2ada:	3f 2e       	mov	r3, r31
    2adc:	16 c0       	rjmp	.+44     	; 0x2b0a <vfprintf+0x188>
    2ade:	28 01       	movw	r4, r16
    2ae0:	22 e0       	ldi	r18, 0x02	; 2
    2ae2:	42 0e       	add	r4, r18
    2ae4:	51 1c       	adc	r5, r1
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	a0 80       	ld	r10, Z
    2aea:	b1 80       	ldd	r11, Z+1	; 0x01
    2aec:	36 fe       	sbrs	r3, 6
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <vfprintf+0x174>
    2af0:	69 2d       	mov	r22, r9
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <vfprintf+0x178>
    2af6:	6f ef       	ldi	r22, 0xFF	; 255
    2af8:	7f ef       	ldi	r23, 0xFF	; 255
    2afa:	c5 01       	movw	r24, r10
    2afc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <strnlen_P>
    2b00:	4c 01       	movw	r8, r24
    2b02:	f3 2d       	mov	r31, r3
    2b04:	f0 68       	ori	r31, 0x80	; 128
    2b06:	3f 2e       	mov	r3, r31
    2b08:	82 01       	movw	r16, r4
    2b0a:	33 fc       	sbrc	r3, 3
    2b0c:	1b c0       	rjmp	.+54     	; 0x2b44 <vfprintf+0x1c2>
    2b0e:	82 2d       	mov	r24, r2
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	88 16       	cp	r8, r24
    2b14:	99 06       	cpc	r9, r25
    2b16:	b0 f4       	brcc	.+44     	; 0x2b44 <vfprintf+0x1c2>
    2b18:	b6 01       	movw	r22, r12
    2b1a:	80 e2       	ldi	r24, 0x20	; 32
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2b22:	2a 94       	dec	r2
    2b24:	f4 cf       	rjmp	.-24     	; 0x2b0e <vfprintf+0x18c>
    2b26:	f5 01       	movw	r30, r10
    2b28:	37 fc       	sbrc	r3, 7
    2b2a:	85 91       	lpm	r24, Z+
    2b2c:	37 fe       	sbrs	r3, 7
    2b2e:	81 91       	ld	r24, Z+
    2b30:	5f 01       	movw	r10, r30
    2b32:	b6 01       	movw	r22, r12
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2b3a:	21 10       	cpse	r2, r1
    2b3c:	2a 94       	dec	r2
    2b3e:	21 e0       	ldi	r18, 0x01	; 1
    2b40:	82 1a       	sub	r8, r18
    2b42:	91 08       	sbc	r9, r1
    2b44:	81 14       	cp	r8, r1
    2b46:	91 04       	cpc	r9, r1
    2b48:	71 f7       	brne	.-36     	; 0x2b26 <vfprintf+0x1a4>
    2b4a:	e8 c0       	rjmp	.+464    	; 0x2d1c <vfprintf+0x39a>
    2b4c:	84 36       	cpi	r24, 0x64	; 100
    2b4e:	11 f0       	breq	.+4      	; 0x2b54 <vfprintf+0x1d2>
    2b50:	89 36       	cpi	r24, 0x69	; 105
    2b52:	41 f5       	brne	.+80     	; 0x2ba4 <vfprintf+0x222>
    2b54:	f8 01       	movw	r30, r16
    2b56:	37 fe       	sbrs	r3, 7
    2b58:	07 c0       	rjmp	.+14     	; 0x2b68 <vfprintf+0x1e6>
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	0c 5f       	subi	r16, 0xFC	; 252
    2b64:	1f 4f       	sbci	r17, 0xFF	; 255
    2b66:	08 c0       	rjmp	.+16     	; 0x2b78 <vfprintf+0x1f6>
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	07 2e       	mov	r0, r23
    2b6e:	00 0c       	add	r0, r0
    2b70:	88 0b       	sbc	r24, r24
    2b72:	99 0b       	sbc	r25, r25
    2b74:	0e 5f       	subi	r16, 0xFE	; 254
    2b76:	1f 4f       	sbci	r17, 0xFF	; 255
    2b78:	f3 2d       	mov	r31, r3
    2b7a:	ff 76       	andi	r31, 0x6F	; 111
    2b7c:	3f 2e       	mov	r3, r31
    2b7e:	97 ff       	sbrs	r25, 7
    2b80:	09 c0       	rjmp	.+18     	; 0x2b94 <vfprintf+0x212>
    2b82:	90 95       	com	r25
    2b84:	80 95       	com	r24
    2b86:	70 95       	com	r23
    2b88:	61 95       	neg	r22
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	f0 68       	ori	r31, 0x80	; 128
    2b92:	3f 2e       	mov	r3, r31
    2b94:	2a e0       	ldi	r18, 0x0A	; 10
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	a3 01       	movw	r20, r6
    2b9a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__ultoa_invert>
    2b9e:	88 2e       	mov	r8, r24
    2ba0:	86 18       	sub	r8, r6
    2ba2:	45 c0       	rjmp	.+138    	; 0x2c2e <vfprintf+0x2ac>
    2ba4:	85 37       	cpi	r24, 0x75	; 117
    2ba6:	31 f4       	brne	.+12     	; 0x2bb4 <vfprintf+0x232>
    2ba8:	23 2d       	mov	r18, r3
    2baa:	2f 7e       	andi	r18, 0xEF	; 239
    2bac:	b2 2e       	mov	r11, r18
    2bae:	2a e0       	ldi	r18, 0x0A	; 10
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	25 c0       	rjmp	.+74     	; 0x2bfe <vfprintf+0x27c>
    2bb4:	93 2d       	mov	r25, r3
    2bb6:	99 7f       	andi	r25, 0xF9	; 249
    2bb8:	b9 2e       	mov	r11, r25
    2bba:	8f 36       	cpi	r24, 0x6F	; 111
    2bbc:	c1 f0       	breq	.+48     	; 0x2bee <vfprintf+0x26c>
    2bbe:	18 f4       	brcc	.+6      	; 0x2bc6 <vfprintf+0x244>
    2bc0:	88 35       	cpi	r24, 0x58	; 88
    2bc2:	79 f0       	breq	.+30     	; 0x2be2 <vfprintf+0x260>
    2bc4:	b5 c0       	rjmp	.+362    	; 0x2d30 <vfprintf+0x3ae>
    2bc6:	80 37       	cpi	r24, 0x70	; 112
    2bc8:	19 f0       	breq	.+6      	; 0x2bd0 <vfprintf+0x24e>
    2bca:	88 37       	cpi	r24, 0x78	; 120
    2bcc:	21 f0       	breq	.+8      	; 0x2bd6 <vfprintf+0x254>
    2bce:	b0 c0       	rjmp	.+352    	; 0x2d30 <vfprintf+0x3ae>
    2bd0:	e9 2f       	mov	r30, r25
    2bd2:	e0 61       	ori	r30, 0x10	; 16
    2bd4:	be 2e       	mov	r11, r30
    2bd6:	b4 fe       	sbrs	r11, 4
    2bd8:	0d c0       	rjmp	.+26     	; 0x2bf4 <vfprintf+0x272>
    2bda:	fb 2d       	mov	r31, r11
    2bdc:	f4 60       	ori	r31, 0x04	; 4
    2bde:	bf 2e       	mov	r11, r31
    2be0:	09 c0       	rjmp	.+18     	; 0x2bf4 <vfprintf+0x272>
    2be2:	34 fe       	sbrs	r3, 4
    2be4:	0a c0       	rjmp	.+20     	; 0x2bfa <vfprintf+0x278>
    2be6:	29 2f       	mov	r18, r25
    2be8:	26 60       	ori	r18, 0x06	; 6
    2bea:	b2 2e       	mov	r11, r18
    2bec:	06 c0       	rjmp	.+12     	; 0x2bfa <vfprintf+0x278>
    2bee:	28 e0       	ldi	r18, 0x08	; 8
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <vfprintf+0x27c>
    2bf4:	20 e1       	ldi	r18, 0x10	; 16
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <vfprintf+0x27c>
    2bfa:	20 e1       	ldi	r18, 0x10	; 16
    2bfc:	32 e0       	ldi	r19, 0x02	; 2
    2bfe:	f8 01       	movw	r30, r16
    2c00:	b7 fe       	sbrs	r11, 7
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <vfprintf+0x290>
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	0c 5f       	subi	r16, 0xFC	; 252
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	06 c0       	rjmp	.+12     	; 0x2c1e <vfprintf+0x29c>
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	0e 5f       	subi	r16, 0xFE	; 254
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	a3 01       	movw	r20, r6
    2c20:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__ultoa_invert>
    2c24:	88 2e       	mov	r8, r24
    2c26:	86 18       	sub	r8, r6
    2c28:	fb 2d       	mov	r31, r11
    2c2a:	ff 77       	andi	r31, 0x7F	; 127
    2c2c:	3f 2e       	mov	r3, r31
    2c2e:	36 fe       	sbrs	r3, 6
    2c30:	0d c0       	rjmp	.+26     	; 0x2c4c <vfprintf+0x2ca>
    2c32:	23 2d       	mov	r18, r3
    2c34:	2e 7f       	andi	r18, 0xFE	; 254
    2c36:	a2 2e       	mov	r10, r18
    2c38:	89 14       	cp	r8, r9
    2c3a:	58 f4       	brcc	.+22     	; 0x2c52 <vfprintf+0x2d0>
    2c3c:	34 fe       	sbrs	r3, 4
    2c3e:	0b c0       	rjmp	.+22     	; 0x2c56 <vfprintf+0x2d4>
    2c40:	32 fc       	sbrc	r3, 2
    2c42:	09 c0       	rjmp	.+18     	; 0x2c56 <vfprintf+0x2d4>
    2c44:	83 2d       	mov	r24, r3
    2c46:	8e 7e       	andi	r24, 0xEE	; 238
    2c48:	a8 2e       	mov	r10, r24
    2c4a:	05 c0       	rjmp	.+10     	; 0x2c56 <vfprintf+0x2d4>
    2c4c:	b8 2c       	mov	r11, r8
    2c4e:	a3 2c       	mov	r10, r3
    2c50:	03 c0       	rjmp	.+6      	; 0x2c58 <vfprintf+0x2d6>
    2c52:	b8 2c       	mov	r11, r8
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <vfprintf+0x2d6>
    2c56:	b9 2c       	mov	r11, r9
    2c58:	a4 fe       	sbrs	r10, 4
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <vfprintf+0x2f8>
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e8 0d       	add	r30, r8
    2c60:	f1 1d       	adc	r31, r1
    2c62:	80 81       	ld	r24, Z
    2c64:	80 33       	cpi	r24, 0x30	; 48
    2c66:	21 f4       	brne	.+8      	; 0x2c70 <vfprintf+0x2ee>
    2c68:	9a 2d       	mov	r25, r10
    2c6a:	99 7e       	andi	r25, 0xE9	; 233
    2c6c:	a9 2e       	mov	r10, r25
    2c6e:	09 c0       	rjmp	.+18     	; 0x2c82 <vfprintf+0x300>
    2c70:	a2 fe       	sbrs	r10, 2
    2c72:	06 c0       	rjmp	.+12     	; 0x2c80 <vfprintf+0x2fe>
    2c74:	b3 94       	inc	r11
    2c76:	b3 94       	inc	r11
    2c78:	04 c0       	rjmp	.+8      	; 0x2c82 <vfprintf+0x300>
    2c7a:	8a 2d       	mov	r24, r10
    2c7c:	86 78       	andi	r24, 0x86	; 134
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <vfprintf+0x300>
    2c80:	b3 94       	inc	r11
    2c82:	a3 fc       	sbrc	r10, 3
    2c84:	11 c0       	rjmp	.+34     	; 0x2ca8 <vfprintf+0x326>
    2c86:	a0 fe       	sbrs	r10, 0
    2c88:	06 c0       	rjmp	.+12     	; 0x2c96 <vfprintf+0x314>
    2c8a:	b2 14       	cp	r11, r2
    2c8c:	88 f4       	brcc	.+34     	; 0x2cb0 <vfprintf+0x32e>
    2c8e:	28 0c       	add	r2, r8
    2c90:	92 2c       	mov	r9, r2
    2c92:	9b 18       	sub	r9, r11
    2c94:	0e c0       	rjmp	.+28     	; 0x2cb2 <vfprintf+0x330>
    2c96:	b2 14       	cp	r11, r2
    2c98:	60 f4       	brcc	.+24     	; 0x2cb2 <vfprintf+0x330>
    2c9a:	b6 01       	movw	r22, r12
    2c9c:	80 e2       	ldi	r24, 0x20	; 32
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2ca4:	b3 94       	inc	r11
    2ca6:	f7 cf       	rjmp	.-18     	; 0x2c96 <vfprintf+0x314>
    2ca8:	b2 14       	cp	r11, r2
    2caa:	18 f4       	brcc	.+6      	; 0x2cb2 <vfprintf+0x330>
    2cac:	2b 18       	sub	r2, r11
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <vfprintf+0x332>
    2cb0:	98 2c       	mov	r9, r8
    2cb2:	21 2c       	mov	r2, r1
    2cb4:	a4 fe       	sbrs	r10, 4
    2cb6:	10 c0       	rjmp	.+32     	; 0x2cd8 <vfprintf+0x356>
    2cb8:	b6 01       	movw	r22, r12
    2cba:	80 e3       	ldi	r24, 0x30	; 48
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2cc2:	a2 fe       	sbrs	r10, 2
    2cc4:	17 c0       	rjmp	.+46     	; 0x2cf4 <vfprintf+0x372>
    2cc6:	a1 fc       	sbrc	r10, 1
    2cc8:	03 c0       	rjmp	.+6      	; 0x2cd0 <vfprintf+0x34e>
    2cca:	88 e7       	ldi	r24, 0x78	; 120
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <vfprintf+0x352>
    2cd0:	88 e5       	ldi	r24, 0x58	; 88
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	b6 01       	movw	r22, r12
    2cd6:	0c c0       	rjmp	.+24     	; 0x2cf0 <vfprintf+0x36e>
    2cd8:	8a 2d       	mov	r24, r10
    2cda:	86 78       	andi	r24, 0x86	; 134
    2cdc:	59 f0       	breq	.+22     	; 0x2cf4 <vfprintf+0x372>
    2cde:	a1 fe       	sbrs	r10, 1
    2ce0:	02 c0       	rjmp	.+4      	; 0x2ce6 <vfprintf+0x364>
    2ce2:	8b e2       	ldi	r24, 0x2B	; 43
    2ce4:	01 c0       	rjmp	.+2      	; 0x2ce8 <vfprintf+0x366>
    2ce6:	80 e2       	ldi	r24, 0x20	; 32
    2ce8:	a7 fc       	sbrc	r10, 7
    2cea:	8d e2       	ldi	r24, 0x2D	; 45
    2cec:	b6 01       	movw	r22, r12
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2cf4:	89 14       	cp	r8, r9
    2cf6:	38 f4       	brcc	.+14     	; 0x2d06 <vfprintf+0x384>
    2cf8:	b6 01       	movw	r22, r12
    2cfa:	80 e3       	ldi	r24, 0x30	; 48
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2d02:	9a 94       	dec	r9
    2d04:	f7 cf       	rjmp	.-18     	; 0x2cf4 <vfprintf+0x372>
    2d06:	8a 94       	dec	r8
    2d08:	f3 01       	movw	r30, r6
    2d0a:	e8 0d       	add	r30, r8
    2d0c:	f1 1d       	adc	r31, r1
    2d0e:	80 81       	ld	r24, Z
    2d10:	b6 01       	movw	r22, r12
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2d18:	81 10       	cpse	r8, r1
    2d1a:	f5 cf       	rjmp	.-22     	; 0x2d06 <vfprintf+0x384>
    2d1c:	22 20       	and	r2, r2
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <vfprintf+0x3a0>
    2d20:	42 ce       	rjmp	.-892    	; 0x29a6 <vfprintf+0x24>
    2d22:	b6 01       	movw	r22, r12
    2d24:	80 e2       	ldi	r24, 0x20	; 32
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <fputc>
    2d2c:	2a 94       	dec	r2
    2d2e:	f6 cf       	rjmp	.-20     	; 0x2d1c <vfprintf+0x39a>
    2d30:	f6 01       	movw	r30, r12
    2d32:	86 81       	ldd	r24, Z+6	; 0x06
    2d34:	97 81       	ldd	r25, Z+7	; 0x07
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <vfprintf+0x3ba>
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	9f ef       	ldi	r25, 0xFF	; 255
    2d3c:	2b 96       	adiw	r28, 0x0b	; 11
    2d3e:	e2 e1       	ldi	r30, 0x12	; 18
    2d40:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__epilogue_restores__>

00002d44 <__ctype_isfalse>:
    2d44:	99 27       	eor	r25, r25
    2d46:	88 27       	eor	r24, r24

00002d48 <__ctype_istrue>:
    2d48:	08 95       	ret

00002d4a <strnlen_P>:
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	05 90       	lpm	r0, Z+
    2d4e:	61 50       	subi	r22, 0x01	; 1
    2d50:	70 40       	sbci	r23, 0x00	; 0
    2d52:	01 10       	cpse	r0, r1
    2d54:	d8 f7       	brcc	.-10     	; 0x2d4c <strnlen_P+0x2>
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	8e 0f       	add	r24, r30
    2d5c:	9f 1f       	adc	r25, r31
    2d5e:	08 95       	ret

00002d60 <strnlen>:
    2d60:	fc 01       	movw	r30, r24
    2d62:	61 50       	subi	r22, 0x01	; 1
    2d64:	70 40       	sbci	r23, 0x00	; 0
    2d66:	01 90       	ld	r0, Z+
    2d68:	01 10       	cpse	r0, r1
    2d6a:	d8 f7       	brcc	.-10     	; 0x2d62 <strnlen+0x2>
    2d6c:	80 95       	com	r24
    2d6e:	90 95       	com	r25
    2d70:	8e 0f       	add	r24, r30
    2d72:	9f 1f       	adc	r25, r31
    2d74:	08 95       	ret

00002d76 <strrev>:
    2d76:	dc 01       	movw	r26, r24
    2d78:	fc 01       	movw	r30, r24
    2d7a:	67 2f       	mov	r22, r23
    2d7c:	71 91       	ld	r23, Z+
    2d7e:	77 23       	and	r23, r23
    2d80:	e1 f7       	brne	.-8      	; 0x2d7a <strrev+0x4>
    2d82:	32 97       	sbiw	r30, 0x02	; 2
    2d84:	04 c0       	rjmp	.+8      	; 0x2d8e <strrev+0x18>
    2d86:	7c 91       	ld	r23, X
    2d88:	6d 93       	st	X+, r22
    2d8a:	70 83       	st	Z, r23
    2d8c:	62 91       	ld	r22, -Z
    2d8e:	ae 17       	cp	r26, r30
    2d90:	bf 07       	cpc	r27, r31
    2d92:	c8 f3       	brcs	.-14     	; 0x2d86 <strrev+0x10>
    2d94:	08 95       	ret

00002d96 <fputc>:
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	fb 01       	movw	r30, r22
    2da0:	23 81       	ldd	r18, Z+3	; 0x03
    2da2:	21 fd       	sbrc	r18, 1
    2da4:	03 c0       	rjmp	.+6      	; 0x2dac <fputc+0x16>
    2da6:	8f ef       	ldi	r24, 0xFF	; 255
    2da8:	9f ef       	ldi	r25, 0xFF	; 255
    2daa:	2c c0       	rjmp	.+88     	; 0x2e04 <fputc+0x6e>
    2dac:	22 ff       	sbrs	r18, 2
    2dae:	16 c0       	rjmp	.+44     	; 0x2ddc <fputc+0x46>
    2db0:	46 81       	ldd	r20, Z+6	; 0x06
    2db2:	57 81       	ldd	r21, Z+7	; 0x07
    2db4:	24 81       	ldd	r18, Z+4	; 0x04
    2db6:	35 81       	ldd	r19, Z+5	; 0x05
    2db8:	42 17       	cp	r20, r18
    2dba:	53 07       	cpc	r21, r19
    2dbc:	44 f4       	brge	.+16     	; 0x2dce <fputc+0x38>
    2dbe:	a0 81       	ld	r26, Z
    2dc0:	b1 81       	ldd	r27, Z+1	; 0x01
    2dc2:	9d 01       	movw	r18, r26
    2dc4:	2f 5f       	subi	r18, 0xFF	; 255
    2dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc8:	31 83       	std	Z+1, r19	; 0x01
    2dca:	20 83       	st	Z, r18
    2dcc:	8c 93       	st	X, r24
    2dce:	26 81       	ldd	r18, Z+6	; 0x06
    2dd0:	37 81       	ldd	r19, Z+7	; 0x07
    2dd2:	2f 5f       	subi	r18, 0xFF	; 255
    2dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd6:	37 83       	std	Z+7, r19	; 0x07
    2dd8:	26 83       	std	Z+6, r18	; 0x06
    2dda:	14 c0       	rjmp	.+40     	; 0x2e04 <fputc+0x6e>
    2ddc:	8b 01       	movw	r16, r22
    2dde:	ec 01       	movw	r28, r24
    2de0:	fb 01       	movw	r30, r22
    2de2:	00 84       	ldd	r0, Z+8	; 0x08
    2de4:	f1 85       	ldd	r31, Z+9	; 0x09
    2de6:	e0 2d       	mov	r30, r0
    2de8:	09 95       	icall
    2dea:	89 2b       	or	r24, r25
    2dec:	e1 f6       	brne	.-72     	; 0x2da6 <fputc+0x10>
    2dee:	d8 01       	movw	r26, r16
    2df0:	16 96       	adiw	r26, 0x06	; 6
    2df2:	8d 91       	ld	r24, X+
    2df4:	9c 91       	ld	r25, X
    2df6:	17 97       	sbiw	r26, 0x07	; 7
    2df8:	01 96       	adiw	r24, 0x01	; 1
    2dfa:	17 96       	adiw	r26, 0x07	; 7
    2dfc:	9c 93       	st	X, r25
    2dfe:	8e 93       	st	-X, r24
    2e00:	16 97       	sbiw	r26, 0x06	; 6
    2e02:	ce 01       	movw	r24, r28
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <__ultoa_invert>:
    2e0e:	fa 01       	movw	r30, r20
    2e10:	aa 27       	eor	r26, r26
    2e12:	28 30       	cpi	r18, 0x08	; 8
    2e14:	51 f1       	breq	.+84     	; 0x2e6a <__ultoa_invert+0x5c>
    2e16:	20 31       	cpi	r18, 0x10	; 16
    2e18:	81 f1       	breq	.+96     	; 0x2e7a <__ultoa_invert+0x6c>
    2e1a:	e8 94       	clt
    2e1c:	6f 93       	push	r22
    2e1e:	6e 7f       	andi	r22, 0xFE	; 254
    2e20:	6e 5f       	subi	r22, 0xFE	; 254
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	8f 4f       	sbci	r24, 0xFF	; 255
    2e26:	9f 4f       	sbci	r25, 0xFF	; 255
    2e28:	af 4f       	sbci	r26, 0xFF	; 255
    2e2a:	b1 e0       	ldi	r27, 0x01	; 1
    2e2c:	3e d0       	rcall	.+124    	; 0x2eaa <__ultoa_invert+0x9c>
    2e2e:	b4 e0       	ldi	r27, 0x04	; 4
    2e30:	3c d0       	rcall	.+120    	; 0x2eaa <__ultoa_invert+0x9c>
    2e32:	67 0f       	add	r22, r23
    2e34:	78 1f       	adc	r23, r24
    2e36:	89 1f       	adc	r24, r25
    2e38:	9a 1f       	adc	r25, r26
    2e3a:	a1 1d       	adc	r26, r1
    2e3c:	68 0f       	add	r22, r24
    2e3e:	79 1f       	adc	r23, r25
    2e40:	8a 1f       	adc	r24, r26
    2e42:	91 1d       	adc	r25, r1
    2e44:	a1 1d       	adc	r26, r1
    2e46:	6a 0f       	add	r22, r26
    2e48:	71 1d       	adc	r23, r1
    2e4a:	81 1d       	adc	r24, r1
    2e4c:	91 1d       	adc	r25, r1
    2e4e:	a1 1d       	adc	r26, r1
    2e50:	20 d0       	rcall	.+64     	; 0x2e92 <__ultoa_invert+0x84>
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <__ultoa_invert+0x48>
    2e54:	68 94       	set
    2e56:	3f 91       	pop	r19
    2e58:	2a e0       	ldi	r18, 0x0A	; 10
    2e5a:	26 9f       	mul	r18, r22
    2e5c:	11 24       	eor	r1, r1
    2e5e:	30 19       	sub	r19, r0
    2e60:	30 5d       	subi	r19, 0xD0	; 208
    2e62:	31 93       	st	Z+, r19
    2e64:	de f6       	brtc	.-74     	; 0x2e1c <__ultoa_invert+0xe>
    2e66:	cf 01       	movw	r24, r30
    2e68:	08 95       	ret
    2e6a:	46 2f       	mov	r20, r22
    2e6c:	47 70       	andi	r20, 0x07	; 7
    2e6e:	40 5d       	subi	r20, 0xD0	; 208
    2e70:	41 93       	st	Z+, r20
    2e72:	b3 e0       	ldi	r27, 0x03	; 3
    2e74:	0f d0       	rcall	.+30     	; 0x2e94 <__ultoa_invert+0x86>
    2e76:	c9 f7       	brne	.-14     	; 0x2e6a <__ultoa_invert+0x5c>
    2e78:	f6 cf       	rjmp	.-20     	; 0x2e66 <__ultoa_invert+0x58>
    2e7a:	46 2f       	mov	r20, r22
    2e7c:	4f 70       	andi	r20, 0x0F	; 15
    2e7e:	40 5d       	subi	r20, 0xD0	; 208
    2e80:	4a 33       	cpi	r20, 0x3A	; 58
    2e82:	18 f0       	brcs	.+6      	; 0x2e8a <__ultoa_invert+0x7c>
    2e84:	49 5d       	subi	r20, 0xD9	; 217
    2e86:	31 fd       	sbrc	r19, 1
    2e88:	40 52       	subi	r20, 0x20	; 32
    2e8a:	41 93       	st	Z+, r20
    2e8c:	02 d0       	rcall	.+4      	; 0x2e92 <__ultoa_invert+0x84>
    2e8e:	a9 f7       	brne	.-22     	; 0x2e7a <__ultoa_invert+0x6c>
    2e90:	ea cf       	rjmp	.-44     	; 0x2e66 <__ultoa_invert+0x58>
    2e92:	b4 e0       	ldi	r27, 0x04	; 4
    2e94:	a6 95       	lsr	r26
    2e96:	97 95       	ror	r25
    2e98:	87 95       	ror	r24
    2e9a:	77 95       	ror	r23
    2e9c:	67 95       	ror	r22
    2e9e:	ba 95       	dec	r27
    2ea0:	c9 f7       	brne	.-14     	; 0x2e94 <__ultoa_invert+0x86>
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	61 05       	cpc	r22, r1
    2ea6:	71 05       	cpc	r23, r1
    2ea8:	08 95       	ret
    2eaa:	9b 01       	movw	r18, r22
    2eac:	ac 01       	movw	r20, r24
    2eae:	0a 2e       	mov	r0, r26
    2eb0:	06 94       	lsr	r0
    2eb2:	57 95       	ror	r21
    2eb4:	47 95       	ror	r20
    2eb6:	37 95       	ror	r19
    2eb8:	27 95       	ror	r18
    2eba:	ba 95       	dec	r27
    2ebc:	c9 f7       	brne	.-14     	; 0x2eb0 <__ultoa_invert+0xa2>
    2ebe:	62 0f       	add	r22, r18
    2ec0:	73 1f       	adc	r23, r19
    2ec2:	84 1f       	adc	r24, r20
    2ec4:	95 1f       	adc	r25, r21
    2ec6:	a0 1d       	adc	r26, r0
    2ec8:	08 95       	ret

00002eca <eeprom_read_block>:
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22

00002ece <eeprom_read_blraw>:
    2ece:	fc 01       	movw	r30, r24
    2ed0:	e1 99       	sbic	0x1c, 1	; 28
    2ed2:	fe cf       	rjmp	.-4      	; 0x2ed0 <eeprom_read_blraw+0x2>
    2ed4:	06 c0       	rjmp	.+12     	; 0x2ee2 <eeprom_read_blraw+0x14>
    2ed6:	ff bb       	out	0x1f, r31	; 31
    2ed8:	ee bb       	out	0x1e, r30	; 30
    2eda:	e0 9a       	sbi	0x1c, 0	; 28
    2edc:	31 96       	adiw	r30, 0x01	; 1
    2ede:	0d b2       	in	r0, 0x1d	; 29
    2ee0:	0d 92       	st	X+, r0
    2ee2:	41 50       	subi	r20, 0x01	; 1
    2ee4:	50 40       	sbci	r21, 0x00	; 0
    2ee6:	b8 f7       	brcc	.-18     	; 0x2ed6 <eeprom_read_blraw+0x8>
    2ee8:	08 95       	ret

00002eea <eeprom_read_word>:
    2eea:	a8 e1       	ldi	r26, 0x18	; 24
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	42 e0       	ldi	r20, 0x02	; 2
    2ef0:	50 e0       	ldi	r21, 0x00	; 0
    2ef2:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <eeprom_read_blraw>

00002ef6 <eeprom_write_block>:
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <eeprom_write_block+0xc>
    2efc:	2d 91       	ld	r18, X+
    2efe:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <eeprom_write_r18>
    2f02:	41 50       	subi	r20, 0x01	; 1
    2f04:	50 40       	sbci	r21, 0x00	; 0
    2f06:	d0 f7       	brcc	.-12     	; 0x2efc <eeprom_write_block+0x6>
    2f08:	08 95       	ret

00002f0a <eeprom_write_byte>:
    2f0a:	26 2f       	mov	r18, r22

00002f0c <eeprom_write_r18>:
    2f0c:	e1 99       	sbic	0x1c, 1	; 28
    2f0e:	fe cf       	rjmp	.-4      	; 0x2f0c <eeprom_write_r18>
    2f10:	9f bb       	out	0x1f, r25	; 31
    2f12:	8e bb       	out	0x1e, r24	; 30
    2f14:	2d bb       	out	0x1d, r18	; 29
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	e2 9a       	sbi	0x1c, 2	; 28
    2f1c:	e1 9a       	sbi	0x1c, 1	; 28
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	08 95       	ret

00002f24 <__mulsi3>:
    2f24:	db 01       	movw	r26, r22
    2f26:	8f 93       	push	r24
    2f28:	9f 93       	push	r25
    2f2a:	0e 94 1f 13 	call	0x263e	; 0x263e <__muluhisi3>
    2f2e:	bf 91       	pop	r27
    2f30:	af 91       	pop	r26
    2f32:	a2 9f       	mul	r26, r18
    2f34:	80 0d       	add	r24, r0
    2f36:	91 1d       	adc	r25, r1
    2f38:	a3 9f       	mul	r26, r19
    2f3a:	90 0d       	add	r25, r0
    2f3c:	b2 9f       	mul	r27, r18
    2f3e:	90 0d       	add	r25, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	08 95       	ret

00002f44 <__prologue_saves__>:
    2f44:	2f 92       	push	r2
    2f46:	3f 92       	push	r3
    2f48:	4f 92       	push	r4
    2f4a:	5f 92       	push	r5
    2f4c:	6f 92       	push	r6
    2f4e:	7f 92       	push	r7
    2f50:	8f 92       	push	r8
    2f52:	9f 92       	push	r9
    2f54:	af 92       	push	r10
    2f56:	bf 92       	push	r11
    2f58:	cf 92       	push	r12
    2f5a:	df 92       	push	r13
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	ca 1b       	sub	r28, r26
    2f6e:	db 0b       	sbc	r29, r27
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	09 94       	ijmp

00002f7c <__epilogue_restores__>:
    2f7c:	2a 88       	ldd	r2, Y+18	; 0x12
    2f7e:	39 88       	ldd	r3, Y+17	; 0x11
    2f80:	48 88       	ldd	r4, Y+16	; 0x10
    2f82:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f84:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f86:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f88:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f8e:	b9 84       	ldd	r11, Y+9	; 0x09
    2f90:	c8 84       	ldd	r12, Y+8	; 0x08
    2f92:	df 80       	ldd	r13, Y+7	; 0x07
    2f94:	ee 80       	ldd	r14, Y+6	; 0x06
    2f96:	fd 80       	ldd	r15, Y+5	; 0x05
    2f98:	0c 81       	ldd	r16, Y+4	; 0x04
    2f9a:	1b 81       	ldd	r17, Y+3	; 0x03
    2f9c:	aa 81       	ldd	r26, Y+2	; 0x02
    2f9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa0:	ce 0f       	add	r28, r30
    2fa2:	d1 1d       	adc	r29, r1
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	ed 01       	movw	r28, r26
    2fb0:	08 95       	ret

00002fb2 <_exit>:
    2fb2:	f8 94       	cli

00002fb4 <__stop_program>:
    2fb4:	ff cf       	rjmp	.-2      	; 0x2fb4 <__stop_program>
